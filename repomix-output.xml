This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
index.html
package.json
postcss.config.js
README.md
src/App.jsx
src/components/common/ImageUploader.jsx
src/components/common/Layout.jsx
src/components/common/Navbar.jsx
src/components/common/ProtectedRoute.jsx
src/components/common/ThemeToggle.jsx
src/components/dashboard/AnalyticsCharts.jsx
src/components/dashboard/ProductGallery.jsx
src/components/dashboard/QuickActions.jsx
src/components/DashboardSelector.jsx
src/components/DatabaseDiagnostic.jsx
src/components/DatabaseInitializer.jsx
src/components/inventory/App.jsx
src/components/inventory/categoryUtils.js
src/components/inventory/LowStockAlert.jsx
src/components/inventory/ProductDetails.jsx
src/components/inventory/ProductImageUpload.jsx
src/components/inventory/ProductModal.jsx
src/components/inventory/productService.js
src/context/AuthContext.jsx
src/context/ThemeContext.jsx
src/firebase/auth.js
src/firebase/config.js
src/firebase/orderService.js
src/firebase/productService.js
src/hooks/useAuth.js
src/index.css
src/Main.jsx
src/pages/CreateOrder.jsx
src/pages/Dashboard.jsx
src/pages/EnhancedDashboard.jsx
src/pages/GuestDashboard.jsx
src/pages/Inventory.jsx
src/pages/Login.jsx
src/pages/Orders.jsx
src/pages/Orders/InvoicePage.jsx
src/pages/Orders/OrderDetails.jsx
src/pages/Orders/OrderFilters.jsx
src/pages/Orders/OrdersPage.jsx
src/pages/Orders/OrderTable.jsx
src/pages/ProductDetail.jsx
src/routes.jsx
src/services/dashboardService.js
src/utils/fakerData.js
src/utils/imageManagement.js
src/utils/imageUtils.js
src/utils/seedDatabase.js
src/utils/seedFirebase.js
tailwind.config.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Wholesaler App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="postcss.config.js">
export default {
    plugins: {
      '@tailwindcss/postcss': {},
    },
  }
</file>

<file path="README.md">
# üßæ Wholesaler App ‚Äì Inventory & Order Management

This is a React + Firebase-based app to manage wholesale inventory and customer orders in real-time.

---

## üöÄ Team Members

- üëë **Bhanu** ‚Äì App UI, Navigation, Dashboard
- üß± **Sahib** ‚Äì Product Inventory (CRUD + Stock Logic)
- üîå **Paras** ‚Äì Firebase Integration + Order System

---

## üîß Tech Stack

- React (via Create React App)
- Firebase Firestore (for database)
- Tailwind CSS (styling)
- React Router (navigation)

---

## üìÅ Features

- Add, edit, delete products with stock control
- Place orders with live product list
- View order history (filter/sort by customer/date)
- Auto deduct product stock on order
- Realtime database updates via Firestore
- Clean UI with Tailwind
- Component-based folder structure

---

## üö¶ Branch Structure

| Branch | Purpose |
|--------|---------|
| `main` | Final production-ready code |
| `feature/bhanu/app-ui` | Main UI & routing |
| `feature/sahib/inventory` | Inventory CRUD |
| `feature/paras/orders-and-firebase` | Orders & Firebase setup |

---

## üõ† How to Run Locally

```bash
git clone https://github.com/bhanuGupta1/wholesaler-app.git
cd wholesaler-app
npm install
npm start
</file>

<file path="src/index.css">
@import "tailwindcss";
</file>

<file path="src/pages/CreateOrder.jsx">
// src/pages/CreateOrder.jsx
const CreateOrder = () => {
    return (
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-8">Create New Order</h1>
        <p>This page will be implemented by Paras.</p>
      </div>
    );
  };
  
  export default CreateOrder;
</file>

<file path="src/pages/Orders.jsx">
// src/pages/Orders.jsx
const Orders = () => {
    return (
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-8">Orders</h1>
        <p>This page will be implemented by Paras.</p>
      </div>
    );
  };
  
  export default Orders;
</file>

<file path="src/routes.jsx">
import { Navigate, Route, Routes } from 'react-router-dom';
import { useAuth } from './hooks/useAuth';

// Layouts
import Layout from './components/common/Layout';

// Pages
import Dashboard from './pages/Dashboard';
import Inventory from './pages/Inventory';
import Orders from './pages/Orders';
import CreateOrder from './pages/CreateOrder';
import Login from './pages/Login';

const ProtectedRoute = ({ children }) => {
  const { user, loading } = useAuth();
  
  if (loading) {
    return <div className="flex justify-center items-center h-screen">Loading...</div>;
  }
  
  if (!user) {
    return <Navigate to="/login" />;
  }
  
  return children;
};

const AppRoutes = () => {
  return (
    <Routes>
      <Route 
        path="/" 
        element={
          <ProtectedRoute>
            <Layout>
              <Dashboard />
            </Layout>
          </ProtectedRoute>
        } 
      />
      <Route 
        path="/inventory" 
        element={
          <ProtectedRoute>
            <Layout>
              <Inventory />
            </Layout>
          </ProtectedRoute>
        } 
      />
      <Route 
        path="/orders" 
        element={
          <ProtectedRoute>
            <Layout>
              <Orders />
            </Layout>
          </ProtectedRoute>
        } 
      />
      <Route 
        path="/create-order" 
        element={
          <ProtectedRoute>
            <Layout>
              <CreateOrder />
            </Layout>
          </ProtectedRoute>
        } 
      />
      <Route 
        path="/login" 
        element={
          <Layout>
            <Login />
          </Layout>
        } 
      />
    </Routes>
  );
};

export default AppRoutes;
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tailwindcss from '@tailwindcss/vite';

export default defineConfig({
  plugins: [
    react(),
    tailwindcss()
  ],
  server: {
    port: 3000
  },
  build: {
    outDir: 'dist',
  },
  // Define the entry point explicitly
  optimizeDeps: {
    include: ['react', 'react-dom']
  }
});
</file>

<file path="src/components/common/ImageUploader.jsx">
// src/components/common/ImageUploader.jsx
import { useState } from 'react';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { storage } from '../../firebase/config';

/**
 * A reusable component for image uploading
 * 
 * @param {Object} props - Component props
 * @param {Function} props.onImageUploaded - Callback function that receives the image URL after upload
 * @param {string} props.initialImage - Initial image URL (optional)
 * @param {string} props.folder - Storage folder path (default: 'images')
 * @param {boolean} props.darkMode - Whether dark mode is enabled
 */
const ImageUploader = ({ onImageUploaded, initialImage = '', folder = 'images', darkMode = false }) => {
  const [image, setImage] = useState(initialImage);
  const [imageFile, setImageFile] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState('');
  const [uploadProgress, setUploadProgress] = useState(0);

  // Handle file selection
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // Validate file type
    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!validTypes.includes(file.type)) {
      setError('Please select a valid image file (JPEG, PNG, GIF, or WEBP)');
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      setError('Image size must be less than 5MB');
      return;
    }

    setError('');
    setImageFile(file);

    // Preview the image
    const reader = new FileReader();
    reader.onloadend = () => {
      setImage(reader.result);
    };
    reader.readAsDataURL(file);
  };

  // Upload the image to Firebase Storage
  const handleUpload = async () => {
    if (!imageFile) {
      setError('Please select an image first');
      return;
    }

    try {
      setIsUploading(true);
      setUploadProgress(0);
      setError('');

      // Create a unique filename
      const fileName = `${Date.now()}_${imageFile.name}`;
      const storageRef = ref(storage, `${folder}/${fileName}`);

      // Upload the file with progress monitoring
      const uploadTask = uploadBytes(storageRef, imageFile);
      
      // Monitor the upload
      // Note: Firebase v9 doesn't provide direct progress monitoring in the modular API
      // This is a simplified version that just shows indeterminate progress
      for (let i = 0; i <= 100; i += 10) {
        await new Promise(resolve => setTimeout(resolve, 100));
        setUploadProgress(i);
      }

      // Complete the upload
      await uploadTask;
      setUploadProgress(100);

      // Get the download URL
      const downloadURL = await getDownloadURL(storageRef);
      
      // Call the callback with the URL
      if (onImageUploaded) {
        onImageUploaded(downloadURL);
      }
      
      setIsUploading(false);
      return downloadURL;
    } catch (error) {
      console.error('Error uploading image:', error);
      setError('Failed to upload image. Please try again.');
      setIsUploading(false);
      return null;
    }
  };

  // Remove the current image
  const handleRemoveImage = () => {
    setImage('');
    setImageFile(null);
    setUploadProgress(0);
    if (onImageUploaded) {
      onImageUploaded('');
    }
  };

  return (
    <div className="w-full">
      {/* Image preview */}
      {image && (
        <div className="mb-4 relative">
          <img
            src={image}
            alt="Preview"
            className="w-full h-48 object-cover rounded-lg"
          />
          <button
            type="button"
            onClick={handleRemoveImage}
            className={`absolute top-2 right-2 p-1 rounded-full ${
              darkMode 
                ? 'bg-gray-800 text-gray-200 hover:bg-gray-700' 
                : 'bg-white text-gray-700 hover:bg-gray-100'
            } shadow-md`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
      )}

      {/* File input and upload button */}
      <div className="flex flex-col sm:flex-row gap-3">
        <div className="flex-1">
          <label
            htmlFor="image-upload"
            className={`flex justify-center items-center px-4 py-2 border rounded-lg cursor-pointer ${
              darkMode 
                ? 'bg-gray-700 border-gray-600 hover:bg-gray-600 text-gray-200' 
                : 'bg-white border-gray-300 hover:bg-gray-50 text-gray-700'
            }`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            {image ? 'Change Image' : 'Select Image'}
            <input
              id="image-upload"
              type="file"
              accept="image/*"
              onChange={handleImageChange}
              className="hidden"
              disabled={isUploading}
            />
          </label>
        </div>

        {imageFile && !isUploading && (
          <button
            type="button"
            onClick={handleUpload}
            className={`px-4 py-2 rounded-lg ${
              darkMode
                ? 'bg-indigo-600 text-white hover:bg-indigo-700'
                : 'bg-indigo-600 text-white hover:bg-indigo-700'
            }`}
          >
            Upload
          </button>
        )}
      </div>

      {/* Error message */}
      {error && (
        <p className={`mt-2 text-sm ${darkMode ? 'text-red-400' : 'text-red-600'}`}>
          {error}
        </p>
      )}

      {/* Upload progress */}
      {isUploading && (
        <div className="mt-4">
          <div className="flex justify-between mb-1">
            <span className={`text-xs ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Uploading...</span>
            <span className={`text-xs ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>{uploadProgress}%</span>
          </div>
          <div className={`w-full h-2 bg-gray-300 rounded-full ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
            <div
              className={`h-full rounded-full ${darkMode ? 'bg-indigo-500' : 'bg-indigo-600'}`}
              style={{ width: `${uploadProgress}%` }}
            ></div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ImageUploader;
</file>

<file path="src/components/common/Navbar.jsx">
// src/components/common/Navbar.jsx - Enhanced with dark mode support and user state
import { useState, useEffect, useRef } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import { useTheme } from '../../context/ThemeContext';
import ThemeToggle from './ThemeToggle';

const Navbar = ({ sidebarOpen, setSidebarOpen }) => {
  const location = useLocation();
  const navigate = useNavigate();
  const { user, logout } = useAuth();
  const { darkMode } = useTheme();
  
  const [profileDropdownOpen, setProfileDropdownOpen] = useState(false);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const dropdownRef = useRef(null);
  
  const isActive = (path) => location.pathname === path;
  
  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setProfileDropdownOpen(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  // Handle sign out
  const handleSignOut = async () => {
    try {
      await logout();
      setProfileDropdownOpen(false);
      setMobileMenuOpen(false);
      navigate('/login');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };
  
  return (
    <div className={`${darkMode ? 'bg-gradient-to-r from-gray-800 to-gray-700' : 'bg-gradient-to-r from-indigo-700 to-indigo-600'}`}>
      {/* Top Bar with Search */}
      <div className={`${darkMode ? 'bg-gray-900' : 'bg-indigo-800'} py-2 px-4 text-indigo-100`}>
        <div className="container mx-auto flex items-center justify-between text-sm">
          <p className="hidden md:block">Wholesaler | Premium Inventory Management</p>
          <div className="flex items-center space-x-3">
            <a href="#" className="hover:text-white transition-colors">Help Center</a>
            <span>|</span>
            <a href="#" className="hover:text-white transition-colors">Contact Support</a>
          </div>
        </div>
      </div>
      
      {/* Main Navigation */}
      <nav className="container mx-auto px-4 py-3">
        <div className="flex justify-between items-center">
          {/* Logo */}
          <div className="flex items-center space-x-2">
            <div className="flex items-center justify-center bg-white p-2 rounded-lg shadow-md">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-indigo-600" viewBox="0 0 20 20" fill="currentColor">
                <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" />
                <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H14a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7h-4v4h4V7zm1-2a2 2 0 012 2v10a2 2 0 01-2 2H3a2 2 0 01-2-2V5a2 2 0 012-2h12z" />
              </svg>
            </div>
            <Link to="/" className="text-2xl font-bold text-white">Wholesaler</Link>
          </div>
          
          {/* Search Bar */}
          <div className="hidden md:flex flex-1 max-w-2xl mx-6">
            <div className="relative w-full">
              <input 
                type="text" 
                placeholder="Search products, orders, or customers..." 
                className={`w-full py-2 pl-4 pr-10 rounded-lg border-0 focus:ring-2 focus:ring-indigo-400 ${darkMode ? 'bg-gray-700 text-white placeholder-gray-400' : 'bg-white text-gray-800 placeholder-gray-500'}`}
              />
              <button className="absolute right-0 top-0 bottom-0 px-3 bg-indigo-500 text-white rounded-r-lg hover:bg-indigo-600 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
            </div>
          </div>
          
          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-6">
            <Link 
              to="/" 
              className={`text-indigo-100 hover:text-white font-medium transition-colors flex items-center ${isActive('/') ? 'border-b-2 border-white' : ''}`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
              Dashboard
            </Link>
            <Link 
              to="/inventory" 
              className={`text-indigo-100 hover:text-white font-medium transition-colors flex items-center ${isActive('/inventory') ? 'border-b-2 border-white' : ''}`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
              </svg>
              Inventory
            </Link>
            <Link 
              to="/orders" 
              className={`text-indigo-100 hover:text-white font-medium transition-colors flex items-center ${isActive('/orders') ? 'border-b-2 border-white' : ''}`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
              Orders
            </Link>
            <div className="h-6 w-px bg-indigo-300"></div>
            <Link 
              to="/create-order" 
              className={`bg-white text-indigo-600 hover:bg-indigo-50 px-4 py-2 rounded-lg font-medium shadow-md transition-colors flex items-center`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              New Order
            </Link>
            
            {/* Dark mode toggle */}
            <div className="flex items-center">
              <ThemeToggle />
            </div>
            
            {/* User Profile Dropdown */}
            {user ? (
              <div className="relative" ref={dropdownRef}>
                <button 
                  onClick={() => setProfileDropdownOpen(!profileDropdownOpen)}
                  className="flex items-center space-x-2 focus:outline-none group"
                  aria-expanded={profileDropdownOpen}
                  aria-haspopup="true"
                >
                  <div className="h-10 w-10 rounded-full bg-white p-0.5 shadow-md overflow-hidden group-hover:ring-2 ring-white transition-all">
                    <div className="bg-indigo-200 h-full w-full rounded-full flex items-center justify-center text-indigo-800 font-bold text-lg">
                      {user.displayName ? user.displayName.charAt(0).toUpperCase() : 'U'}
                    </div>
                  </div>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
                
                {profileDropdownOpen && (
                  <div className={`absolute right-0 mt-3 w-64 ${darkMode ? 'bg-gray-800 ring-gray-700' : 'bg-white ring-black ring-opacity-5'} rounded-lg shadow-xl py-2 z-50 transform transition-all duration-150 origin-top-right`}>
                    <div className={`px-4 py-3 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                      <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Signed in as</p>
                      <p className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'} truncate`}>{user.email}</p>
                    </div>
                    <div className="py-1">
                      <Link 
                        to="/profile" 
                        className={`flex items-center px-4 py-2 text-sm ${darkMode ? 'text-gray-300 hover:bg-gray-700 hover:text-white' : 'text-gray-700 hover:bg-indigo-50 hover:text-indigo-700'}`}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-3 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        Your Profile
                      </Link>
                      <Link 
                        to="/settings" 
                        className={`flex items-center px-4 py-2 text-sm ${darkMode ? 'text-gray-300 hover:bg-gray-700 hover:text-white' : 'text-gray-700 hover:bg-indigo-50 hover:text-indigo-700'}`}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-3 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        Settings
                      </Link>
                    </div>
                    <div className={`py-1 border-t ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                      <button 
                        onClick={handleSignOut}
                        className={`flex w-full items-center px-4 py-2 text-sm ${darkMode ? 'text-gray-300 hover:bg-red-900/30 hover:text-red-300' : 'text-gray-700 hover:bg-red-50 hover:text-red-700'}`}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-3 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                        </svg>
                        Sign out
                      </button>
                    </div>
                  </div>
                )}
              </div>
            ) : (
              <Link 
                to="/login" 
                className="bg-white text-indigo-600 hover:bg-indigo-50 px-4 py-2 rounded-lg font-medium shadow-md transition-colors flex items-center"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1" />
                </svg>
                Sign In
              </Link>
            )}
          </div>
          
          {/* Mobile Menu Button */}
          <div className="md:hidden flex items-center">
            <ThemeToggle className="mr-2" />
            <button 
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
              className="text-white focus:outline-none"
            >
              {mobileMenuOpen ? (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              ) : (
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16m-7 6h7" />
                </svg>
              )}
            </button>
          </div>
        </div>
        
        {/* Mobile Search - Only visible when mobile menu is open */}
        {mobileMenuOpen && (
          <div className="mt-3 md:hidden">
            <div className="relative w-full">
              <input 
                type="text" 
                placeholder="Search..." 
                className={`w-full py-2 pl-4 pr-10 rounded-lg border-0 focus:ring-2 focus:ring-indigo-400 ${darkMode ? 'bg-gray-700 text-white placeholder-gray-400' : 'bg-white text-gray-800 placeholder-gray-500'}`}
              />
              <button className="absolute right-0 top-0 bottom-0 px-3 bg-indigo-500 text-white rounded-r-lg">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </button>
            </div>
          </div>
        )}
      </nav>
      
      {/* Mobile Menu */}
      {mobileMenuOpen && (
        <div className={`${darkMode ? 'bg-gray-800' : 'bg-indigo-800'} md:hidden`}>
          <div className="py-3 px-4 space-y-1">
            <Link
              to="/"
              className={`block px-3 py-2 rounded-md text-base font-medium text-white hover:${darkMode ? 'bg-gray-700' : 'bg-indigo-700'}`}
              onClick={() => setMobileMenuOpen(false)}
            >
              Dashboard
            </Link>
            <Link
              to="/inventory"
              className={`block px-3 py-2 rounded-md text-base font-medium text-white hover:${darkMode ? 'bg-gray-700' : 'bg-indigo-700'}`}
              onClick={() => setMobileMenuOpen(false)}
            >
              Inventory
            </Link>
            <Link
              to="/orders"
              className={`block px-3 py-2 rounded-md text-base font-medium text-white hover:${darkMode ? 'bg-gray-700' : 'bg-indigo-700'}`}
              onClick={() => setMobileMenuOpen(false)}
            >
              Orders
            </Link>
            <Link
              to="/create-order"
              className={`block px-3 py-2 rounded-md text-base font-medium text-white hover:${darkMode ? 'bg-gray-700' : 'bg-indigo-700'}`}
              onClick={() => setMobileMenuOpen(false)}
            >
              New Order
            </Link>
            {user ? (
              <div className={`pt-4 pb-3 border-t ${darkMode ? 'border-gray-700' : 'border-indigo-700'}`}>
                <div className="flex items-center px-3">
                  <div className={`h-10 w-10 rounded-full ${darkMode ? 'bg-gray-600 text-white' : 'bg-indigo-200 text-indigo-800'} flex items-center justify-center font-bold`}>
                    {user.displayName ? user.displayName.charAt(0).toUpperCase() : 'U'}
                  </div>
                  <div className="ml-3">
                    <div className="text-base font-medium text-white">{user.displayName || "User"}</div>
                    <div className="text-sm font-medium text-indigo-300">{user.email}</div>
                  </div>
                </div>
                <div className="mt-3 space-y-1 px-2">
                  <Link
                    to="/profile"
                    className={`block px-3 py-2 rounded-md text-base font-medium text-white hover:${darkMode ? 'bg-gray-700' : 'bg-indigo-700'}`}
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    Your Profile
                  </Link>
                  <Link
                    to="/settings"
                    className={`block px-3 py-2 rounded-md text-base font-medium text-white hover:${darkMode ? 'bg-gray-700' : 'bg-indigo-700'}`}
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    Settings
                  </Link>
                  <button
                    onClick={handleSignOut}
                    className={`block w-full text-left px-3 py-2 rounded-md text-base font-medium text-white hover:${darkMode ? 'bg-gray-700' : 'bg-indigo-700'}`}
                  >
                    Sign out
                  </button>
                </div>
              </div>
            ) : (
              <Link
                to="/login"
                className={`block px-3 py-2 mt-2 rounded-md text-base font-medium ${darkMode ? 'bg-gray-700 text-white' : 'bg-white text-indigo-600'} hover:opacity-90`}
                onClick={() => setMobileMenuOpen(false)}
              >
                Sign In
              </Link>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Navbar;
</file>

<file path="src/components/dashboard/AnalyticsCharts.jsx">
// src/components/dashboard/AnalyticsCharts.jsx
import { useMemo } from 'react';
import { motion } from 'framer-motion';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

const AnalyticsCharts = ({ data, darkMode }) => {
  // Use memoized values to prevent unnecessary re-renders
  const { revenueData, inventoryData, comparisonData } = useMemo(() => {
    // Use provided data or populate with defaults if none available
    const revenue = data?.revenue || [
      { month: 'Jan', value: 4200 },
      { month: 'Feb', value: 4900 },
      { month: 'Mar', value: 5600 },
      { month: 'Apr', value: 5200 },
      { month: 'May', value: 6100 },
      { month: 'Jun', value: 7200 }
    ];
    
    const inventory = data?.inventory || [
      { category: 'Electronics', count: 42 },
      { category: 'Office', count: 28 },
      { category: 'Furniture', count: 16 },
      { category: 'Other', count: 14 }
    ];
    
    const comparison = data?.comparison || [
      { name: 'Week 1', current: 4000, previous: 3000 },
      { name: 'Week 2', current: 5000, previous: 4000 },
      { name: 'Week 3', current: 4800, previous: 5200 },
      { name: 'Week 4', current: 6000, previous: 5800 }
    ];
    
    return { revenueData: revenue, inventoryData: inventory, comparisonData: comparison };
  }, [data]);

  // Chart theme based on dark/light mode
  const chartTheme = useMemo(() => ({
    textColor: darkMode ? '#e5e7eb' : '#374151',
    gridColor: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
    tooltipBg: darkMode ? '#1f2937' : '#ffffff',
    tooltipBorder: darkMode ? '#4b5563' : '#e5e7eb',
    tooltipText: darkMode ? '#e5e7eb' : '#374151'
  }), [darkMode]);

  return (
    <motion.div
      className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.2 }}
    >
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Analytics</h2>
      </div>
      
      <div className="p-6 space-y-8">
        {/* Revenue Chart */}
        <div>
          <h3 className={`text-lg font-medium ${darkMode ? 'text-gray-200' : 'text-gray-700'} mb-4`}>Monthly Revenue</h3>
          <div className="h-72">
            <ResponsiveContainer width="100%" height="100%">
              <BarChart
                data={revenueData}
                margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
              >
                <CartesianGrid strokeDasharray="3 3" stroke={chartTheme.gridColor} />
                <XAxis 
                  dataKey="month" 
                  tick={{ fill: chartTheme.textColor }}
                />
                <YAxis 
                  tick={{ fill: chartTheme.textColor }} 
                  tickFormatter={(value) => `$${value}`}
                />
                <Tooltip
                  contentStyle={{ 
                    backgroundColor: chartTheme.tooltipBg, 
                    borderColor: chartTheme.tooltipBorder,
                    color: chartTheme.tooltipText
                  }}
                  formatter={(value) => [`$${value.toLocaleString()}`, 'Revenue']}
                />
                <Bar 
                  dataKey="value" 
                  fill={darkMode ? "#6366f1" : "#4f46e5"} 
                  radius={[4, 4, 0, 0]}
                  animationDuration={1500}
                />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>
        
        {/* Revenue Comparison Chart */}
        <div>
          <h3 className={`text-lg font-medium ${darkMode ? 'text-gray-200' : 'text-gray-700'} mb-4`}>Performance Comparison</h3>
          <div className="h-72">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart
                data={comparisonData}
                margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
              >
                <CartesianGrid strokeDasharray="3 3" stroke={chartTheme.gridColor} />
                <XAxis 
                  dataKey="name" 
                  tick={{ fill: chartTheme.textColor }}
                />
                <YAxis 
                  tick={{ fill: chartTheme.textColor }}
                  tickFormatter={(value) => `$${value}`}
                />
                <Tooltip
                  contentStyle={{ 
                    backgroundColor: chartTheme.tooltipBg, 
                    borderColor: chartTheme.tooltipBorder,
                    color: chartTheme.tooltipText
                  }}
                  formatter={(value) => [`$${value.toLocaleString()}`]}
                />
                <Legend />
                <Line 
                  type="monotone" 
                  dataKey="current" 
                  stroke={darkMode ? "#10b981" : "#059669"} 
                  strokeWidth={2}
                  dot={{ fill: darkMode ? "#10b981" : "#059669", r: 5 }}
                  activeDot={{ r: 8 }}
                  animationDuration={1500}
                  name="Current Period"
                />
                <Line 
                  type="monotone" 
                  dataKey="previous" 
                  stroke={darkMode ? "#6366f1" : "#4f46e5"} 
                  strokeWidth={2}
                  strokeDasharray="5 5"
                  dot={{ fill: darkMode ? "#6366f1" : "#4f46e5", r: 5 }}
                  animationDuration={1500}
                  name="Previous Period"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>
      
      <div className={`border-t ${darkMode ? 'border-gray-700 bg-gray-700' : 'border-gray-100 bg-gray-50'} px-6 py-3`}>
        <button className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center w-full`}>
          Export Analytics Report
          <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
          </svg>
        </button>
      </div>
    </motion.div>
  );
};

export default AnalyticsCharts;
</file>

<file path="src/components/dashboard/ProductGallery.jsx">
// src/components/dashboard/ProductGallery.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { collection, getDocs, query, where, orderBy, limit } from 'firebase/firestore';
import { db } from '../../firebase/config';
import { motion } from 'framer-motion';

const ProductGallery = ({ darkMode, limit: displayLimit = 6 }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeCategory, setActiveCategory] = useState('all');
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        
        // Create a products query
        const productsRef = collection(db, 'products');
        let productsQuery;
        
        if (activeCategory === 'all') {
          productsQuery = query(
            productsRef,
            orderBy('createdAt', 'desc'),
            limit(displayLimit * 2) // Fetch more than needed to allow for filtering
          );
        } else {
          productsQuery = query(
            productsRef,
            where('category', '==', activeCategory),
            orderBy('createdAt', 'desc'),
            limit(displayLimit * 2)
          );
        }
        
        const productsSnapshot = await getDocs(productsQuery);
        
        // Process products
        const fetchedProducts = [];
        const categorySet = new Set(['all']);
        
        productsSnapshot.docs.forEach(doc => {
          const productData = doc.data();
          fetchedProducts.push({
            id: doc.id,
            ...productData
          });
          
          // Collect categories for filter
          if (productData.category) {
            categorySet.add(productData.category);
          }
        });
        
        // Update state
        setProducts(fetchedProducts.slice(0, displayLimit));
        setCategories(Array.from(categorySet));
        setLoading(false);
      } catch (error) {
        console.error('Error fetching products:', error);
        setLoading(false);
      }
    };
    
    fetchProducts();
  }, [activeCategory, displayLimit]);

  return (
    <motion.div 
      className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'} flex justify-between items-center`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Product Gallery</h2>
        
        {/* Category filter */}
        <div className="flex items-center space-x-2 overflow-x-auto hide-scrollbar">
          {categories.map((category) => (
            <button
              key={category}
              onClick={() => setActiveCategory(category)}
              className={`px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap ${
                activeCategory === category
                  ? darkMode
                    ? 'bg-indigo-600 text-white'
                    : 'bg-indigo-100 text-indigo-800'
                  : darkMode
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              }`}
            >
              {category === 'all' ? 'All Products' : category}
            </button>
          ))}
        </div>
      </div>
      
      {loading ? (
        <div className="p-6 flex justify-center">
          <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
      ) : (
        <>
          <div className="p-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            {products.length > 0 ? (
              products.map((product) => (
                <motion.div
                  key={product.id}
                  className={`border rounded-lg overflow-hidden ${darkMode ? 'border-gray-700 hover:border-gray-600' : 'border-gray-200 hover:border-gray-300'} hover:shadow-md transition-all duration-200`}
                  whileHover={{ y: -5, transition: { duration: 0.2 } }}
                >
                  <Link to={`/inventory/${product.id}`} className="block h-full">
                    <div className="h-40 overflow-hidden bg-gray-100 dark:bg-gray-700">
                      {product.imageUrl ? (
                        <img 
                          src={product.imageUrl} 
                          alt={product.name}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center">
                          <svg 
                            className={`h-12 w-12 ${darkMode ? 'text-gray-600' : 'text-gray-400'}`}
                            fill="none" 
                            viewBox="0 0 24 24" 
                            stroke="currentColor"
                          >
                            <path 
                              strokeLinecap="round" 
                              strokeLinejoin="round" 
                              strokeWidth={1} 
                              d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" 
                            />
                          </svg>
                        </div>
                      )}
                    </div>
                    <div className="p-4">
                      <h3 className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'} line-clamp-1`}>
                        {product.name}
                      </h3>
                      <div className="flex justify-between items-center mt-2">
                        <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          {product.category || 'Uncategorized'}
                        </div>
                        <div className={`text-sm font-bold ${darkMode ? 'text-indigo-400' : 'text-indigo-600'}`}>
                          ${parseFloat(product.price).toFixed(2)}
                        </div>
                      </div>
                      <div className="flex justify-between items-center mt-2">
                        <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          Stock: {product.stock}
                        </div>
                        <span
                          className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium
                            ${product.stock <= 5 
                              ? darkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-800'
                              : darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-800'
                            }`}
                        >
                          {product.stock <= 5 ? 'Low Stock' : 'In Stock'}
                        </span>
                      </div>
                    </div>
                  </Link>
                </motion.div>
              ))
            ) : (
              <div className={`col-span-full text-center py-12 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                <svg 
                  className="mx-auto h-12 w-12 text-gray-400" 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={1} 
                    d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" 
                  />
                </svg>
                <h3 className="mt-2 text-sm font-medium">No products found</h3>
                {activeCategory !== 'all' ? (
                  <p className="mt-1 text-sm">
                    No products found in the {activeCategory} category.
                    <button 
                      onClick={() => setActiveCategory('all')} 
                      className={`ml-1 font-medium ${darkMode ? 'text-indigo-400' : 'text-indigo-600'}`}
                    >
                      View all products
                    </button>
                  </p>
                ) : (
                  <p className="mt-1 text-sm">
                    Add products to your inventory to see them here.
                  </p>
                )}
              </div>
            )}
          </div>
          
          <div className={`border-t ${darkMode ? 'border-gray-700 bg-gray-700' : 'border-gray-100 bg-gray-50'} px-6 py-3`}>
            <Link 
              to="/inventory" 
              className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center`}
            >
              View all products
              <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </Link>
          </div>
        </>
      )}
    </motion.div>
  );
};

export default ProductGallery;
</file>

<file path="src/components/dashboard/QuickActions.jsx">
// src/components/dashboard/QuickActions.jsx
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { motion } from 'framer-motion';

// Interactive QuickActions Component
const QuickActions = ({ darkMode }) => {
  const [hoverIndex, setHoverIndex] = useState(null);
  
  const actions = [
    {
      id: 'new-order',
      to: '/create-order',
      name: 'New Order',
      description: 'Create customer order',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
      ),
      color: 'blue'
    },
    {
      id: 'add-product',
      to: '/inventory',
      name: 'Add Product',
      description: 'Add to inventory',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
      ),
      color: 'green'
    },
    {
      id: 'low-stock',
      to: '/inventory',
      name: 'Low Stock',
      description: 'View alerts',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      ),
      color: 'yellow'
    },
    {
      id: 'pending-orders',
      to: '/orders',
      name: 'Pending Orders',
      description: 'Process orders',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      ),
      color: 'purple'
    },
  ];
  
  return (
    <motion.div 
      className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Quick Actions</h2>
      </div>
      <div className="p-5 grid grid-cols-2 gap-4">
        {actions.map((action, index) => (
          <Link 
            key={action.id}
            to={action.to}
            className={`flex flex-col items-center p-4 rounded-xl 
              hover:bg-${action.color}-${darkMode ? '900/20' : '50'} 
              transition-all duration-300 transform ${hoverIndex === index ? 'scale-105' : 'scale-100'}
              group border ${darkMode ? 
                `border-gray-700 hover:border-${action.color}-800` : 
                `border-gray-100 hover:border-${action.color}-100`}`}
            onMouseEnter={() => setHoverIndex(index)}
            onMouseLeave={() => setHoverIndex(null)}
            aria-label={action.name}
          >
            <motion.div 
              className={`h-12 w-12 rounded-full ${darkMode ? 
                `bg-${action.color}-900/30` : 
                `bg-${action.color}-100`} 
                flex items-center justify-center mb-3 
                ${darkMode ? 
                  `group-hover:bg-${action.color}-900/50` : 
                  `group-hover:bg-${action.color}-200`} 
                transition-colors`}
              whileHover={{ scale: 1.1, rotate: 5 }}
              transition={{ type: "spring", stiffness: 400, damping: 10 }}
            >
              <span className={`${darkMode ? 
                `text-${action.color}-400` : 
                `text-${action.color}-600`}`}
              >
                {action.icon}
              </span>
            </motion.div>
            <span className={`text-sm font-medium ${darkMode ? 
              `text-gray-200 group-hover:text-${action.color}-400` : 
              `text-gray-800 group-hover:text-${action.color}-700`}`}
            >
              {action.name}
            </span>
            <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>
              {action.description}
            </span>
          </Link>
        ))}
      </div>
    </motion.div>
  );
};

export default QuickActions;
</file>

<file path="src/components/DatabaseDiagnostic.jsx">
// src/components/DatabaseDiagnostic.jsx
import { useState, useEffect } from 'react';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../firebase/config';

const DatabaseDiagnostic = () => {
  const [diagnosticResults, setDiagnosticResults] = useState({
    loading: true,
    results: {},
    error: null
  });

  // List of collections the Dashboard expects
  const requiredCollections = [
    'products',
    'orders',
    'activities'
  ];

  // Expected fields for each document in collections
  const expectedFields = {
    products: ['id', 'name', 'stock', 'price'],
    orders: ['id', 'customerName', 'createdAt', 'itemCount', 'total', 'status'],
    activities: ['id', 'type', 'description', 'createdAt']
  };

  useEffect(() => {
    async function checkDatabase() {
      try {
        const results = {};
        
        // Check each collection
        for (const collectionName of requiredCollections) {
          try {
            console.log(`Checking collection: ${collectionName}`);
            const snapshot = await getDocs(collection(db, collectionName));
            const exists = !snapshot.empty;
            const count = snapshot.size;
            
            // Check document structure if collection exists
            let sampleDoc = null;
            let missingFields = [];
            
            if (exists && count > 0) {
              sampleDoc = snapshot.docs[0].data();
              const expectedForCollection = expectedFields[collectionName] || [];
              
              missingFields = expectedForCollection.filter(
                field => !sampleDoc.hasOwnProperty(field) && field !== 'id' // ID might be from doc.id
              );
            }
            
            results[collectionName] = {
              exists,
              count,
              sampleDoc,
              missingFields,
              isValid: exists && count > 0 && missingFields.length === 0
            };
          } catch (error) {
            console.error(`Error checking ${collectionName}:`, error);
            results[collectionName] = {
              exists: false,
              error: error.message,
              isValid: false
            };
          }
        }
        
        setDiagnosticResults({
          loading: false,
          results,
          error: null
        });
      } catch (error) {
        console.error("Database diagnostic error:", error);
        setDiagnosticResults({
          loading: false,
          results: {},
          error: error.message
        });
      }
    }
    
    checkDatabase();
  }, []);

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">Firebase Database Diagnostic</h1>
      
      {diagnosticResults.loading ? (
        <div className="flex flex-col items-center justify-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
          <p className="mt-4 text-gray-600">Scanning database collections...</p>
        </div>
      ) : diagnosticResults.error ? (
        <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700">Error scanning database: {diagnosticResults.error}</p>
            </div>
          </div>
        </div>
      ) : (
        <div className="space-y-8">
          <div className="bg-white rounded-xl shadow-md p-6 border border-gray-200">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Dashboard Requirements</h2>
            <p className="text-gray-600 mb-4">
              The dashboard requires these collections to function properly. Here's what we found in your Firebase database:
            </p>
            
            {Object.entries(diagnosticResults.results).map(([collection, info]) => (
              <div key={collection} className="mb-6 border-b border-gray-100 pb-6">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-lg font-semibold text-gray-800">
                    Collection: <span className="font-mono">{collection}</span>
                  </h3>
                  <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                    info.isValid 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {info.isValid ? 'Valid' : 'Issue Detected'}
                  </span>
                </div>
                
                <div className="ml-6 space-y-2">
                  <p className={`text-sm ${info.exists ? 'text-green-600' : 'text-red-600'}`}>
                    {info.exists 
                      ? `‚úì Collection exists with ${info.count} document(s)` 
                      : `‚úï Collection does not exist or is empty`}
                  </p>
                  
                  {info.exists && info.count > 0 && (
                    <>
                      {info.missingFields && info.missingFields.length > 0 ? (
                        <div className="text-sm text-red-600">
                          <p>‚úï Missing required fields:</p>
                          <ul className="list-disc list-inside ml-4">
                            {info.missingFields.map(field => (
                              <li key={field}>{field}</li>
                            ))}
                          </ul>
                        </div>
                      ) : (
                        <p className="text-sm text-green-600">
                          ‚úì Document structure looks good
                        </p>
                      )}
                      
                      <div className="mt-3">
                        <details className="text-sm">
                          <summary className="cursor-pointer text-indigo-600 hover:text-indigo-800">
                            View sample document structure
                          </summary>
                          <pre className="mt-2 p-2 bg-gray-50 rounded border border-gray-200 overflow-x-auto text-xs">
                            {JSON.stringify(info.sampleDoc, null, 2)}
                          </pre>
                        </details>
                      </div>
                    </>
                  )}
                </div>
              </div>
            ))}
          </div>
          
          <div className="bg-white rounded-xl shadow-md p-6 border border-gray-200">
            <h2 className="text-xl font-bold text-gray-800 mb-4">How to Fix</h2>
            
            <div className="space-y-4">
              {/* Products Collection */}
              {!diagnosticResults.results.products?.isValid && (
                <div className="border-l-4 border-blue-400 pl-4 py-2">
                  <h3 className="font-semibold text-blue-800">Products Collection</h3>
                  <p className="text-sm text-gray-600 mt-1">
                    Create a collection named 'products' with documents that have at least these fields:
                  </p>
                  <pre className="mt-2 p-2 bg-gray-50 rounded border border-gray-200 overflow-x-auto text-xs">
{`{
  "name": "Product Name",
  "stock": 15,
  "price": 19.99
}`}
                  </pre>
                  <p className="text-sm text-gray-500 mt-2">
                    The 'stock' field is used to calculate low stock alerts, using a threshold of 10.
                  </p>
                </div>
              )}
              
              {/* Orders Collection */}
              {!diagnosticResults.results.orders?.isValid && (
                <div className="border-l-4 border-green-400 pl-4 py-2">
                  <h3 className="font-semibold text-green-800">Orders Collection</h3>
                  <p className="text-sm text-gray-600 mt-1">
                    Create a collection named 'orders' with documents that have at least these fields:
                  </p>
                  <pre className="mt-2 p-2 bg-gray-50 rounded border border-gray-200 overflow-x-auto text-xs">
{`{
  "customerName": "Customer Name",
  "createdAt": Timestamp,
  "itemCount": 3,
  "total": 59.97,
  "status": "pending" // or "completed", "shipped", "cancelled"
}`}
                  </pre>
                  <p className="text-sm text-gray-500 mt-2">
                    The 'createdAt' field should be a Firebase Timestamp (using serverTimestamp() when creating).
                  </p>
                </div>
              )}
              
              {/* Activities Collection */}
              {!diagnosticResults.results.activities?.isValid && (
                <div className="border-l-4 border-purple-400 pl-4 py-2">
                  <h3 className="font-semibold text-purple-800">Activities Collection</h3>
                  <p className="text-sm text-gray-600 mt-1">
                    Create a collection named 'activities' with documents that have at least these fields:
                  </p>
                  <pre className="mt-2 p-2 bg-gray-50 rounded border border-gray-200 overflow-x-auto text-xs">
{`{
  "type": "order", // or "inventory"
  "description": "New order placed by John Doe",
  "createdAt": Timestamp
}`}
                  </pre>
                  <p className="text-sm text-gray-500 mt-2">
                    Activities track user or system actions. The type field is used for icon display.
                  </p>
                </div>
              )}
              
              <div className="bg-yellow-50 p-4 rounded-lg">
                <h3 className="font-semibold text-yellow-800 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                  Temporary Solution
                </h3>
                <p className="text-sm text-gray-600 mt-1">
                  If you want to use the dashboard without adding data, you can modify the Dashboard component to not depend on these collections:
                </p>
                <ol className="list-decimal list-inside text-sm text-gray-600 mt-2 ml-4">
                  <li>Add default empty arrays and objects to prevent crashes</li>
                  <li>Use mock data instead of Firebase data</li>
                  <li>Comment out sections that require specific data</li>
                </ol>
              </div>
            </div>
          </div>
          
          <div className="bg-indigo-50 rounded-xl p-6 border border-indigo-100">
            <h2 className="text-xl font-bold text-indigo-800 mb-4">Need Data Samples?</h2>
            <p className="text-indigo-600 mb-4">
              Would you like me to generate sample data that you can use to populate your Firebase database?
            </p>
            <button className="mt-2 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" onClick={() => alert("This would generate sample data in a real app")}>
              Generate Sample Data
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default DatabaseDiagnostic;
</file>

<file path="src/components/DatabaseInitializer.jsx">
// src/components/DatabaseInitializer.jsx
import { useState } from 'react';
import { Link } from 'react-router-dom';
import seedDatabase, { createSampleDocument } from '../utils/seedDatabase';

const DatabaseInitializer = () => {
  const [isSeeding, setIsSeeding] = useState(false);
  const [seedResults, setSeedResults] = useState(null);
  const [error, setError] = useState(null);

  const handleSeedDatabase = async () => {
    setIsSeeding(true);
    setError(null);
    
    try {
      const results = await seedDatabase();
      setSeedResults(results);
    } catch (error) {
      console.error("Error in seed process:", error);
      setError(error.message || "Unknown error occurred");
    } finally {
      setIsSeeding(false);
    }
  };

  const handleCreateMinimumData = async () => {
    setIsSeeding(true);
    setError(null);
    
    try {
      // Create minimum required data for dashboard to display
      const results = {
        products: await createSampleDocument('products', {
          name: "Sample Product",
          stock: 20,
          price: 29.99
        }),
        
        orders: await createSampleDocument('orders', {
          customerName: "Sample Customer",
          itemCount: 1,
          total: 29.99,
          status: "pending"
        }),
        
        activities: await createSampleDocument('activities', {
          type: "system",
          description: "Dashboard initialized"
        })
      };
      
      setSeedResults(results);
    } catch (error) {
      console.error("Error creating minimum data:", error);
      setError(error.message || "Unknown error occurred");
    } finally {
      setIsSeeding(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8 max-w-7xl">
      <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-200">
        <h1 className="text-3xl font-bold text-gray-900 mb-4">Database Initializer</h1>
        
        <div className="mb-6">
          <p className="text-gray-600">
            Your dashboard is crashing because it requires specific data in your Firebase database.
            You have two options:
          </p>
          
          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Option 1: Full database seed */}
            <div className="border border-gray-200 rounded-lg p-5 bg-gradient-to-br from-blue-50 to-indigo-50">
              <h3 className="text-xl font-bold text-indigo-700 mb-3">Option 1: Seed Complete Dataset</h3>
              <p className="text-gray-600 mb-4">
                This will add a complete set of sample data to your Firebase database, including:
              </p>
              <ul className="list-disc list-inside text-gray-600 mb-4 ml-2">
                <li>6 sample products with full details</li>
                <li>3 sample orders with customer information</li>
                <li>5 activity records for system tracking</li>
              </ul>
              <p className="text-sm text-gray-500 mb-4">
                Perfect for testing the full functionality of your dashboard.
              </p>
              <button
                onClick={handleSeedDatabase}
                disabled={isSeeding}
                className="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-indigo-300"
              >
                {isSeeding ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Seeding Database...
                  </>
                ) : "Seed Database with Complete Dataset"}
              </button>
            </div>
            
            {/* Option 2: Minimum data */}
            <div className="border border-gray-200 rounded-lg p-5 bg-gradient-to-br from-green-50 to-teal-50">
              <h3 className="text-xl font-bold text-teal-700 mb-3">Option 2: Add Minimum Data</h3>
              <p className="text-gray-600 mb-4">
                This will add just the minimum data needed for your dashboard to display without crashing:
              </p>
              <ul className="list-disc list-inside text-gray-600 mb-4 ml-2">
                <li>1 sample product with basic fields</li>
                <li>1 sample order with minimal information</li>
                <li>1 activity record for the system</li>
              </ul>
              <p className="text-sm text-gray-500 mb-4">
                Quick solution to get your dashboard working, but with minimal data to display.
              </p>
              <button
                onClick={handleCreateMinimumData}
                disabled={isSeeding}
                className="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-teal-600 hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500 disabled:bg-teal-300"
              >
                {isSeeding ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Adding Minimum Data...
                  </>
                ) : "Add Minimum Required Data"}
              </button>
            </div>
          </div>
        </div>
        
        {/* Results */}
        {seedResults && (
          <div className={`mt-8 p-4 rounded-lg ${
            error ? 'bg-red-50 border border-red-200' : 'bg-green-50 border border-green-200'
          }`}>
            <h3 className={`text-lg font-semibold ${
              error ? 'text-red-700' : 'text-green-700'
            } mb-2`}>
              {error ? 'Error' : 'Database Initialization Results'}
            </h3>
            
            {error ? (
              <p className="text-red-600">{error}</p>
            ) : (
              <div className="space-y-3">
                <div className="flex items-center">
                  <div className={`w-3 h-3 rounded-full mr-2 ${
                    seedResults.products?.success ? 'bg-green-500' : 'bg-red-500'
                  }`}></div>
                  <span className="text-gray-700">Products: </span>
                  <span className="ml-2 text-sm font-medium">
                    {seedResults.products?.success 
                      ? `Success (${seedResults.products?.count || '1'} added)` 
                      : `Failed - ${seedResults.products?.error || 'Unknown error'}`}
                  </span>
                </div>
                
                <div className="flex items-center">
                  <div className={`w-3 h-3 rounded-full mr-2 ${
                    seedResults.orders?.success ? 'bg-green-500' : 'bg-red-500'
                  }`}></div>
                  <span className="text-gray-700">Orders: </span>
                  <span className="ml-2 text-sm font-medium">
                    {seedResults.orders?.success 
                      ? `Success (${seedResults.orders?.count || '1'} added)` 
                      : `Failed - ${seedResults.orders?.error || 'Unknown error'}`}
                  </span>
                </div>
                
                <div className="flex items-center">
                  <div className={`w-3 h-3 rounded-full mr-2 ${
                    seedResults.activities?.success ? 'bg-green-500' : 'bg-red-500'
                  }`}></div>
                  <span className="text-gray-700">Activities: </span>
                  <span className="ml-2 text-sm font-medium">
                    {seedResults.activities?.success 
                      ? `Success (${seedResults.activities?.count || '1'} added)` 
                      : `Failed - ${seedResults.activities?.error || 'Unknown error'}`}
                  </span>
                </div>
                
                <div className="pt-4 mt-4 border-t border-green-200">
                  <p className="text-green-700 font-medium">
                    Your dashboard should now work! You can try accessing it from the Dashboard link.
                  </p>
                  <div className="mt-4 flex space-x-4">
                    <Link 
                      to="/dashboard" 
                      className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      Go to Dashboard
                    </Link>
                    <Link 
                      to="/diagnostic" 
                      className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      Run Database Diagnostic
                    </Link>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
        
        {/* Manual Fix Instructions */}
        <div className="mt-8 border-t border-gray-200 pt-6">
          <h3 className="text-xl font-bold text-gray-800 mb-4">Manual Setup Instructions</h3>
          <p className="text-gray-600 mb-4">
            If you prefer to set up your database manually, you need to create these collections and documents:
          </p>
          
          <div className="space-y-6">
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-semibold text-gray-800 mb-2">products collection</h4>
              <p className="text-sm text-gray-600 mb-2">Each document needs at least:</p>
              <pre className="bg-white p-3 rounded border border-gray-200 text-xs overflow-x-auto">
{`{
  "name": "Product Name",
  "stock": 15,
  "price": 19.99
}`}
              </pre>
            </div>
            
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-semibold text-gray-800 mb-2">orders collection</h4>
              <p className="text-sm text-gray-600 mb-2">Each document needs at least:</p>
              <pre className="bg-white p-3 rounded border border-gray-200 text-xs overflow-x-auto">
{`{
  "customerName": "Customer Name",
  "createdAt": serverTimestamp(),
  "itemCount": 3,
  "total": 59.97,
  "status": "pending"
}`}
              </pre>
            </div>
            
            <div className="bg-gray-50 p-4 rounded-lg">
              <h4 className="font-semibold text-gray-800 mb-2">activities collection</h4>
              <p className="text-sm text-gray-600 mb-2">Each document needs at least:</p>
              <pre className="bg-white p-3 rounded border border-gray-200 text-xs overflow-x-auto">
{`{
  "type": "order",
  "description": "Activity description",
  "createdAt": serverTimestamp()
}`}
              </pre>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DatabaseInitializer;
</file>

<file path="src/context/AuthContext.jsx">
// src/context/AuthContext.jsx - Enhanced with better authentication
import { createContext, useState, useEffect } from 'react';
import { 
  signInWithEmailAndPassword, 
  signOut, 
  onAuthStateChanged,
  createUserWithEmailAndPassword,
  updateProfile,
  sendPasswordResetEmail
} from 'firebase/auth';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { auth, db } from '../firebase/config';

export const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
  // User state
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userRole, setUserRole] = useState('guest');

  // Initialize authentication state
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      setLoading(true);
      
      if (currentUser) {
        try {
          // Get additional user data from Firestore
          const userRef = doc(db, 'users', currentUser.uid);
          const userDoc = await getDoc(userRef);
          
          if (userDoc.exists()) {
            // Combine Firebase auth user with Firestore user data
            setUser({
              ...currentUser,
              ...userDoc.data()
            });
            setUserRole(userDoc.data().role || 'user');
          } else {
            // If Firestore record doesn't exist, create one
            await setDoc(userRef, {
              email: currentUser.email,
              displayName: currentUser.displayName || currentUser.email.split('@')[0],
              role: 'user', // Default role
              createdAt: new Date()
            });
            
            setUser({
              ...currentUser,
              role: 'user',
              displayName: currentUser.displayName || currentUser.email.split('@')[0],
              createdAt: new Date()
            });
            setUserRole('user');
          }
        } catch (err) {
          console.error("Error fetching user data:", err);
          // Still set the basic user info even if Firestore fetch fails
          setUser(currentUser);
          setUserRole('user');
        }
      } else {
        // No user is signed in
        setUser(null);
        setUserRole('guest');
      }
      
      setLoading(false);
    });

    // Cleanup subscription
    return () => unsubscribe();
  }, []);

  // Login function
  const login = async (email, password, rememberMe = false) => {
    try {
      setLoading(true);
      setError(null);
      
      // Set persistence based on rememberMe option
      // In a real app, you would use setPersistence, but for simplicity we'll skip that
      
      // Sign in user
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      
      // Firebase will trigger onAuthStateChanged which will update the user state
      return userCredential.user;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Register function
  const register = async (email, password, displayName) => {
    try {
      setLoading(true);
      setError(null);
      
      // Create user
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      
      // Update display name if provided
      if (displayName) {
        await updateProfile(userCredential.user, { displayName });
      }
      
      // Create user document in Firestore
      await setDoc(doc(db, 'users', userCredential.user.uid), {
        email,
        displayName: displayName || email.split('@')[0],
        role: 'user',
        createdAt: new Date()
      });
      
      // Firebase will trigger onAuthStateChanged which will update the user state
      return userCredential.user;
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Logout function
  const logout = async () => {
    try {
      setError(null);
      await signOut(auth);
      // Firebase will trigger onAuthStateChanged which will update the user state
    } catch (err) {
      setError(err.message);
      throw err;
    }
  };

  // Password reset
  const resetPassword = async (email) => {
    try {
      setLoading(true);
      setError(null);
      await sendPasswordResetEmail(auth, email);
    } catch (err) {
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // Provide auth context
  const value = {
    user,
    loading,
    error,
    userRole,
    login,
    logout,
    register,
    resetPassword
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;
</file>

<file path="src/hooks/useAuth.js">
// src/hooks/useAuth.js - Custom hook to access authentication
import { useContext } from 'react';
import { AuthContext } from '../context/AuthContext';

export const useAuth = () => {
  const context = useContext(AuthContext);
  
  if (context === null) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  
  return context;
};

export default useAuth;
</file>

<file path="src/Main.jsx">
// src/main.jsx - Application entry point
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);
</file>

<file path="src/pages/EnhancedDashboard.jsx">
// src/pages/EnhancedDashboard.jsx
import { useState, useEffect, useMemo, useCallback, lazy, Suspense } from 'react';
import { Link } from 'react-router-dom';
import { collection, getDocs, query, where, orderBy, limit, doc, getDoc, onSnapshot } from 'firebase/firestore';
import { db } from '../firebase/config';
import { useTheme } from '../context/ThemeContext';
import ThemeToggle from '../components/common/ThemeToggle';
import { seedFirebaseData } from '../utils/seedFirebase';
import { motion, AnimatePresence } from 'framer-motion'; // You'll need to install this

// Lazy-loaded components for better performance
const AnalyticsCharts = lazy(() => import('../components/dashboard/AnalyticsCharts'));
const QuickActions = lazy(() => import('../components/dashboard/QuickActions'));

// Skeleton loaders for better loading UX
const SkeletonLoader = ({ type, darkMode }) => {
  const bgColor = darkMode ? 'bg-gray-700' : 'bg-gray-200';
  const pulseClass = 'animate-pulse';
  
  if (type === 'card') {
    return (
      <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-md overflow-hidden h-40`}>
        <div className="p-6">
          <div className="flex items-center">
            <div className={`${bgColor} ${pulseClass} h-12 w-12 rounded-xl`}></div>
            <div className="ml-5 space-y-2">
              <div className={`${bgColor} ${pulseClass} h-4 w-24 rounded`}></div>
              <div className={`${bgColor} ${pulseClass} h-6 w-16 rounded`}></div>
            </div>
          </div>
          <div className="mt-4">
            <div className={`${bgColor} ${pulseClass} h-4 w-full rounded`}></div>
          </div>
        </div>
      </div>
    );
  }
  
  if (type === 'table') {
    return (
      <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-md overflow-hidden`}>
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
          <div className="flex justify-between">
            <div className={`${bgColor} ${pulseClass} h-6 w-40 rounded`}></div>
            <div className={`${bgColor} ${pulseClass} h-6 w-24 rounded`}></div>
          </div>
        </div>
        <div className="p-6 space-y-4">
          {[1, 2, 3].map(i => (
            <div key={i} className="flex items-center space-x-4">
              <div className={`${bgColor} ${pulseClass} h-10 w-10 rounded-full`}></div>
              <div className="flex-1">
                <div className={`${bgColor} ${pulseClass} h-4 w-full rounded mb-2`}></div>
                <div className={`${bgColor} ${pulseClass} h-3 w-1/2 rounded`}></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }
  
  return null;
};

// Simple chart component for data visualization
const SimpleBarChart = ({ data, title, description, color, darkMode }) => {
  const max = Math.max(...data.map(item => item.value));
  
  return (
    <div className="mb-6">
      <h3 className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>{title}</h3>
      {description && <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-3`}>{description}</p>}
      <div className="space-y-2">
        {data.map((item, index) => (
          <motion.div 
            key={index} 
            className="flex items-center"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <span className={`text-xs w-16 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>{item.name}</span>
            <div className="flex-1 ml-2">
              <div className={`h-4 rounded-full ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} overflow-hidden`}>
                <motion.div 
                  className={`h-4 rounded-full ${darkMode ? `bg-${color}-500` : `bg-${color}-600`}`} 
                  initial={{ width: 0 }}
                  animate={{ width: `${(item.value / max) * 100}%` }}
                  transition={{ duration: 0.8, ease: "easeOut" }}
                ></motion.div>
              </div>
            </div>
            <span className={`ml-2 text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
              {item.value}
            </span>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

// Enhanced Activity Timeline with expandable details
const ActivityTimeline = ({ activities, darkMode }) => {
  const [filter, setFilter] = useState('all');
  const [expandedId, setExpandedId] = useState(null);
  
  // Filter activities based on selected type
  const filteredActivities = useMemo(() => {
    if (filter === 'all') return activities;
    return activities.filter(activity => activity.type === filter);
  }, [activities, filter]);
  
  const handleActivityClick = useCallback((id) => {
    setExpandedId(expandedId === id ? null : id);
  }, [expandedId]);
  
  return (
    <motion.div 
      className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'} flex justify-between items-center`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Recent Activities</h2>
        <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} flex items-center`}>
          <span className="mr-2">Filter by:</span>
          <select 
            className={`form-select rounded-md ${darkMode ? 'bg-gray-700 border-gray-600 text-gray-300' : 'border-gray-300 text-gray-600'} text-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50`}
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            aria-label="Filter activities"
          >
            <option value="all">All Activities</option>
            <option value="order">Orders</option>
            <option value="inventory">Inventory</option>
          </select>
        </div>
      </div>
      <div className={`divide-y ${darkMode ? 'divide-gray-700' : 'divide-gray-100'}`}>
        <AnimatePresence>
          {filteredActivities.length > 0 ? (
            filteredActivities.map((activity) => (
              <motion.div 
                key={activity.id} 
                className={`p-5 ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'} transition-colors cursor-pointer`}
                onClick={() => handleActivityClick(activity.id)}
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                layout
              >
                <div className="flex items-start">
                  <div className={`flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center ${
                    activity.type === 'order' 
                      ? darkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600'
                      : darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600'
                  }`}>
                    {activity.type === 'order' ? (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                      </svg>
                    ) : (
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10" />
                      </svg>
                    )}
                  </div>
                  <div className="ml-4 flex-1">
                    <div className="flex justify-between">
                      <p className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>{activity.description}</p>
                      <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>{activity.time}</span>
                    </div>
                    <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>
                      {activity.type === 'order' ? 'Order Management' : 'Inventory Update'}
                    </p>
                    
                    {/* Expanded details */}
                    <AnimatePresence>
                      {expandedId === activity.id && (
                        <motion.div 
                          className={`mt-4 pt-4 border-t ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          transition={{ duration: 0.3 }}
                        >
                          {activity.type === 'order' ? (
                            <div className="space-y-3">
                              <div className="flex items-center justify-between">
                                <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Reference:</span>
                                <span className={`text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                                  #{activity.id.substring(0, 8)}
                                </span>
                              </div>
                              <div className="flex items-center justify-between">
                                <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Status:</span>
                                <span className={`px-2 py-0.5 rounded-full text-xs font-medium 
                                  ${darkMode ? 'bg-blue-900/20 text-blue-400' : 'bg-blue-100 text-blue-700'}`}>
                                  Processing
                                </span>
                              </div>
                              <div className="mt-2 text-right">
                                <Link 
                                  to={`/orders/${activity.id.replace('order-', '')}`} 
                                  className={`text-xs font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-700'}`}
                                  onClick={(e) => e.stopPropagation()}
                                  aria-label={`View details for order ${activity.id.substring(0, 8)}`}
                                >
                                  View details
                                </Link>
                              </div>
                            </div>
                          ) : (
                            <div className="space-y-3">
                              <div className="flex items-center justify-between">
                                <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Product:</span>
                                <span className={`text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                                  {activity.description.includes('"') 
                                    ? activity.description.split('"')[1] 
                                    : 'Unknown product'}
                                </span>
                              </div>
                              <div className="flex items-center justify-between">
                                <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Stock level:</span>
                                <span className={`px-2 py-0.5 rounded-full text-xs font-medium 
                                  ${darkMode ? 'bg-red-900/20 text-red-400' : 'bg-red-100 text-red-700'}`}>
                                  Low stock
                                </span>
                              </div>
                              <div className="mt-2 text-right">
                                <Link 
                                  to="/inventory" 
                                  className={`text-xs font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-700'}`}
                                  onClick={(e) => e.stopPropagation()}
                                  aria-label="View inventory"
                                >
                                  View inventory
                                </Link>
                              </div>
                            </div>
                          )}
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </div>
              </motion.div>
            ))
          ) : (
            <motion.div 
              className="p-6 text-center"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <p className={`${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>No activities found with the selected filter.</p>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
      <div className={`${darkMode ? 'bg-gray-700 border-gray-700' : 'bg-gray-50 border-gray-100'} px-6 py-3 border-t`}>
        <Link to="/activity" className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center`}>
          View all activities
          <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </Link>
      </div>
    </motion.div>
  );
};

// Enhanced Orders Table with search function
const OrdersTable = ({ orders, darkMode }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  
  const filteredOrders = useMemo(() => {
    let result = orders;
    
    // Filter by status
    if (statusFilter !== 'all') {
      result = result.filter(order => order.status === statusFilter);
    }
    
    // Filter by search term
    if (searchTerm.trim()) {
      const term = searchTerm.toLowerCase().trim();
      result = result.filter(order => 
        order.customerName.toLowerCase().includes(term) ||
        order.id.toLowerCase().includes(term)
      );
    }
    
    return result;
  }, [orders, statusFilter, searchTerm]);
  
  return (
    <motion.div 
      className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.2 }}
    >
      <div className={`flex flex-col sm:flex-row sm:justify-between sm:items-center p-6 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-3 sm:mb-0`}>Recent Orders</h2>
        <div className="flex flex-col sm:flex-row gap-3">
          {/* Search input with accessibility */}
          <div className="relative">
            <input
              type="text"
              aria-label="Search orders"
              placeholder="Search orders..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={`pl-9 pr-4 py-2 rounded-lg ${
                darkMode ? 'bg-gray-700 border-gray-600 text-gray-200 placeholder-gray-400' : 'bg-white border-gray-300 text-gray-800'
              } border focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm transition-colors`}
            />
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-4 w-4 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>
          
          {/* Status filter with accessibility */}
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            aria-label="Filter orders by status"
            className={`form-select rounded-md ${darkMode ? 'bg-gray-700 border-gray-600 text-gray-300' : 'border-gray-300 text-gray-600'} text-sm pr-8 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50`}
          >
            <option value="all">All orders</option>
            <option value="completed">Completed</option>
            <option value="pending">Pending</option>
            <option value="cancelled">Cancelled</option>
          </select>
          
          <Link to="/orders" className={`${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} font-medium flex items-center text-sm`}>
            View all
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </Link>
        </div>
      </div>
      
      {orders.length > 0 ? (
        <>
          <div className="overflow-x-auto">
            <table className="w-full text-left" aria-label="Recent orders">
              <thead>
                <tr className={`${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-100'} border-b`}>
                  <th scope="col" className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Order ID</th>
                  <th scope="col" className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Customer</th>
                  <th scope="col" className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Date</th>
                  <th scope="col" className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Items</th>
                  <th scope="col" className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Total</th>
                  <th scope="col" className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Status</th>
                  <th scope="col" className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Actions</th>
                </tr>
              </thead>
              <tbody className={`divide-y ${darkMode ? 'divide-gray-700' : 'divide-gray-100'}`}>
                <AnimatePresence>
                  {filteredOrders.length > 0 ? (
                    filteredOrders.map((order) => (
                      <motion.tr 
                        key={order.id} 
                        className={`${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'} transition-colors`}
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        whileHover={{ backgroundColor: darkMode ? 'rgba(55, 65, 81, 1)' : 'rgba(249, 250, 251, 1)' }}
                      >
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>#{order.id.slice(0, 6)}</span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className={`h-8 w-8 flex-shrink-0 rounded-full ${darkMode ? 'bg-gray-600 text-gray-300' : 'bg-gray-200 text-gray-500'} flex items-center justify-center font-medium`} aria-hidden="true">
                              {order.customerName.charAt(0)}
                            </div>
                            <div className="ml-3">
                              <div className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>{order.customerName}</div>
                            </div>
                          </div>
                        </td>
                        <td className={`px-6 py-4 whitespace-nowrap text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          {order.createdAt.toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric' 
                          })}
                        </td>
                        <td className={`px-6 py-4 whitespace-nowrap text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                          <div className="flex items-center">
                            <div className={`h-6 w-6 rounded-full ${darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600'} flex items-center justify-center text-xs font-medium`} aria-hidden="true">
                              {order.itemCount || (order.items && order.items.length) || 0}
                            </div>
                            <span className="ml-2">items</span>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className={`text-sm font-bold ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>${parseFloat(order.total).toFixed(2)}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium
                            ${order.status === 'completed' 
                              ? darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-800'
                              : order.status === 'pending' 
                                ? darkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-800'
                                : darkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-800'}`}>
                            {order.status === 'completed' && (
                              <svg className={`mr-1.5 h-2 w-2 ${darkMode ? 'text-green-400' : 'text-green-500'}`} fill="currentColor" viewBox="0 0 8 8" aria-hidden="true">
                                <circle cx="4" cy="4" r="3" />
                              </svg>
                            )}
                            {order.status === 'pending' && (
                              <svg className={`mr-1.5 h-2 w-2 ${darkMode ? 'text-yellow-400' : 'text-yellow-500'}`} fill="currentColor" viewBox="0 0 8 8" aria-hidden="true">
                                <circle cx="4" cy="4" r="3" />
                              </svg>
                            )}
                            {order.status === 'cancelled' && (
                              <svg className={`mr-1.5 h-2 w-2 ${darkMode ? 'text-red-400' : 'text-red-500'}`} fill="currentColor" viewBox="0 0 8 8" aria-hidden="true">
                                <circle cx="4" cy="4" r="3" />
                              </svg>
                            )}
                            {order.status}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <Link 
                            to={`/orders/${order.id}`} 
                            className={`${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-900'} mr-3`}
                            aria-label={`View order ${order.id}`}
                          >
                            View
                          </Link>
                          <button 
                            className={`${darkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-600 hover:text-gray-900'}`}
                            aria-label={`Edit order ${order.id}`}
                          >
                            Edit
                          </button>
                        </td>
                      </motion.tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="7" className="px-6 py-8 text-center">
                        <p className={`${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>No orders found with the current filters.</p>
                        <button 
                          onClick={() => { setSearchTerm(''); setStatusFilter('all'); }}
                          className={`mt-2 text-sm ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} font-medium`}
                          aria-label="Reset filters"
                        >
                          Reset filters
                        </button>
                      </td>
                    </tr>
                  )}
                </AnimatePresence>
              </tbody>
            </table>
          </div>
        </>
      ) : (
        <div className="text-center py-12">
          <svg xmlns="http://www.w3.org/2000/svg" className={`h-12 w-12 mx-auto ${darkMode ? 'text-gray-600' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
          </svg>
          <p className={`mt-2 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>No recent orders found.</p>
          <Link 
            to="/create-order" 
            className={`mt-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md ${darkMode ? 'text-indigo-300 bg-indigo-900/30 hover:bg-indigo-900/50' : 'text-indigo-700 bg-indigo-100 hover:bg-indigo-200'}`}
            aria-label="Create your first order"
          >
            Create your first order
          </Link>
        </div>
      )}
    </motion.div>
  );
};

// Enhanced Analytics component with visualization
const Analytics = ({ metrics, stats, darkMode }) => {
  // Sample data for the chart
  const monthlyData = useMemo(() => [
    { name: 'Jan', value: 3200 },
    { name: 'Feb', value: 4100 },
    { name: 'Mar', value: 3800 },
    { name: 'Apr', value: 5200 },
    { name: 'May', value: 6100 },
    { name: 'Jun', value: metrics?.revenue?.total || 7320 },
  ], [metrics]);
  
  const categoryData = useMemo(() => [
    { name: 'Electronics', value: 42 },
    { name: 'Office', value: 28 },
    { name: 'Furniture', value: 16 },
    { name: 'Other', value: 14 },
  ], []);
  
  return (
    <motion.div 
      className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.3 }}
    >
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Performance Metrics</h2>
      </div>
      
      <div className="p-6">
        <motion.div 
          className="mb-6"
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
        >
          <div className="flex justify-between items-center mb-2">
            <div className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>Revenue this month</div>
            <span className="text-sm text-green-600 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
              </svg>
              {metrics?.revenue?.percentChange || 16}%
            </span>
          </div>
          <div className="relative pt-1">
            <div className={`overflow-hidden h-2 text-xs flex rounded ${darkMode ? 'bg-indigo-900/30' : 'bg-indigo-200'}`} role="progressbar" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100">
              <motion.div 
                style={{ width: "0%" }} 
                className={`shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center ${darkMode ? 'bg-indigo-500' : 'bg-indigo-600'}`}
                initial={{ width: "0%" }}
                animate={{ width: "70%" }}
                transition={{ duration: 1, ease: "easeOut" }}
              />
            </div>
            <div className={`flex justify-between mt-1 text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              <span>$0</span>
              <span>${metrics?.revenue?.total || '7,320.80'}</span>
            </div>
          </div>
        </motion.div>
        
        <SimpleBarChart 
          title="Monthly Revenue" 
          description="Sales performance over the last 6 months" 
          data={monthlyData} 
          color="indigo" 
          darkMode={darkMode} 
        />
        
        <SimpleBarChart 
          title="Inventory by Category" 
          description="Distribution of products across categories" 
          data={categoryData} 
          color="green" 
          darkMode={darkMode} 
        />
      </div>
      
      <div className={`border-t ${darkMode ? 'border-gray-700 bg-gray-700' : 'border-gray-100 bg-gray-50'} px-6 py-3`}>
        <a href="#" 
          className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center`}
          aria-label="Generate detailed report"
        >
          Generate detailed report
          <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>
    </motion.div>
  );
};

// Main Enhanced Dashboard Component
const EnhancedDashboard = () => {
  const { darkMode } = useTheme();
  
  // State for dashboard data
  const [stats, setStats] = useState({
    totalProducts: 0,
    lowStockProducts: 0,
    totalOrders: 0,
    recentOrders: []
  });
  const [activities, setActivities] = useState([]);
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(new Date());
  const [realTimeEnabled, setRealTimeEnabled] = useState(false);
  const [isSeeding, setIsSeeding] = useState(false);
  const [seedStatus, setSeedStatus] = useState('');
  const lowStockThreshold = 10;
  
  // Fetch dashboard data from Firebase
  useEffect(() => {
    let unsubscribeActivities = null;
    let unsubscribeOrders = null;
    
    async function fetchDashboardData() {
      try {
        setLoading(true);
        setError(null);

        // Fetch product stats
        const productsRef = collection(db, 'products');
        const productsSnapshot = await getDocs(productsRef);
        const products = productsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        
        // Calculate product stats
        const totalProducts = products.length;
        const lowStockProducts = products.filter(
          product => product.stock <= lowStockThreshold
        ).length;

        // Fetch recent orders - use snapshot listener if real-time is enabled
        const ordersRef = collection(db, 'orders');
        const recentOrdersQuery = query(
          ordersRef,
          orderBy('createdAt', 'desc'),
          limit(5)
        );
        
        if (realTimeEnabled) {
          unsubscribeOrders = onSnapshot(recentOrdersQuery, (snapshot) => {
            const recentOrders = snapshot.docs.map(doc => {
              const data = doc.data();
              const createdAt = data.createdAt ? 
                (typeof data.createdAt.toDate === 'function' ? 
                  data.createdAt.toDate() : new Date(data.createdAt)) : 
                new Date();
                
              return {
                id: doc.id,
                customerName: data.customerName || 'Unknown Customer',
                createdAt,
                items: data.items || [],
                itemCount: data.itemCount || 0,
                total: data.total || 0,
                status: data.status || 'pending'
              };
            });
            
            setStats(prev => ({
              ...prev,
              recentOrders
            }));
            setLastUpdated(new Date());
          }, (err) => {
            console.error("Error in orders listener:", err);
          });
        } else {
          const ordersSnapshot = await getDocs(recentOrdersQuery);
          const recentOrders = ordersSnapshot.docs.map(doc => {
            const data = doc.data();
            const createdAt = data.createdAt ? 
              (typeof data.createdAt.toDate === 'function' ? 
                data.createdAt.toDate() : new Date(data.createdAt)) : 
              new Date();
              
            return {
              id: doc.id,
              customerName: data.customerName || 'Unknown Customer',
              createdAt,
              items: data.items || [],
              itemCount: data.itemCount || 0,
              total: data.total || 0,
              status: data.status || 'pending'
            };
          });
          
          setStats(prev => ({
            ...prev,
            recentOrders
          }));
        }

        // Get total orders count
        const ordersCountSnapshot = await getDocs(collection(db, 'orders'));
        const totalOrders = ordersCountSnapshot.size;

        // Set product and order stats
        setStats(prev => ({
          ...prev,
          totalProducts,
          lowStockProducts,
          totalOrders
        }));

        // Try to get metrics data (added in new seed)
        try {
          const metricsDoc = await getDoc(doc(db, 'metrics', 'current'));
          if (metricsDoc.exists()) {
            setMetrics(metricsDoc.data());
          }
        } catch (metricsError) {
          console.log('Metrics not available:', metricsError);
          // Not critical, continue without metrics
        }

        // Fetch activities - use snapshot listener if real-time is enabled
        const activitiesRef = collection(db, 'activities');
        const activitiesQuery = query(
          activitiesRef,
          orderBy('createdAt', 'desc'),
          limit(5)
        );
        
        if (realTimeEnabled) {
          unsubscribeActivities = onSnapshot(activitiesQuery, (snapshot) => {
            const fetchedActivities = snapshot.docs.map(doc => {
              const data = doc.data();
              const activityDate = data.createdAt ? 
                (typeof data.createdAt.toDate === 'function' ? 
                  data.createdAt.toDate() : new Date(data.createdAt)) : 
                new Date();
                
              return {
                id: doc.id,
                type: data.type || 'order',
                description: data.description || 'Activity',
                time: getRelativeTime(activityDate),
                createdAt: activityDate
              };
            });
            
            setActivities(fetchedActivities);
            setLastUpdated(new Date());
          }, (err) => {
            console.error("Error in activities listener:", err);
          });
        } else {
          const activitiesSnapshot = await getDocs(activitiesQuery);
          const fetchedActivities = activitiesSnapshot.docs.map(doc => {
            const data = doc.data();
            const activityDate = data.createdAt ? 
              (typeof data.createdAt.toDate === 'function' ? 
                data.createdAt.toDate() : new Date(data.createdAt)) : 
              new Date();
              
            return {
              id: doc.id,
              type: data.type || 'order',
              description: data.description || 'Activity',
              time: getRelativeTime(activityDate),
              createdAt: activityDate
            };
          });
          
          // If no activities found, generate from orders and products
          const combinedActivities = fetchedActivities.length > 0 ? 
            fetchedActivities : [];
          
          // Add order activities if no activities found
          if (combinedActivities.length === 0 && stats.recentOrders.length > 0) {
            stats.recentOrders.forEach((order, index) => {
              combinedActivities.push({
                id: `order-${order.id}`,
                type: 'order',
                description: `New order from ${order.customerName}`,
                time: getRelativeTime(order.createdAt),
                createdAt: order.createdAt
              });
            });

            // Add inventory activities for low stock
            const lowStockItems = products.filter(product => product.stock <= lowStockThreshold);
            lowStockItems.slice(0, 3).forEach((product, index) => {
              combinedActivities.push({
                id: `inventory-${product.id}`,
                type: 'inventory',
                description: `Product "${product.name}" is low on stock`,
                time: 'Today', // Fallback
                createdAt: new Date()
              });
            });
          }

          // Sort activities by time
          combinedActivities.sort((a, b) => b.createdAt - a.createdAt);
          setActivities(combinedActivities);
        }

        setLastUpdated(new Date());
        setLoading(false);
      } catch (err) {
        console.error('Error fetching dashboard data:', err);
        setError('Failed to load dashboard data. Please try again later.');
        setLoading(false);
      }
    }

    fetchDashboardData();

    // Cleanup function to unsubscribe from listeners
    return () => {
      if (unsubscribeActivities) unsubscribeActivities();
      if (unsubscribeOrders) unsubscribeOrders();
    };
  }, [lowStockThreshold, realTimeEnabled]);

  // Helper function to format relative time
  const getRelativeTime = useCallback((date) => {
    if (!date) return 'Unknown';
    
    const now = new Date();
    const diffMs = now - date;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

    if (diffMinutes < 60) {
      return diffMinutes <= 1 ? 'Just now' : `${diffMinutes} minutes ago`;
    } else if (diffHours < 24) {
      return `${diffHours} ${diffHours === 1 ? 'hour' : 'hours'} ago`;
    } else if (diffDays < 7) {
      return diffDays === 1 ? 'Yesterday' : `${diffDays} days ago`;
    } else {
      return date.toLocaleDateString();
    }
  }, []);

  // Function to handle refresh
  const handleRefresh = useCallback(() => {
    window.location.reload();
  }, []);
  
  // Function to seed random data with Faker
  const handleGenerateData = useCallback(async () => {
    try {
      setIsSeeding(true);
      setSeedStatus('Generating random data...');
      
      // Use the imported seedFirebaseData function
      await seedFirebaseData(true); // Force reseed of the database
      
      setIsSeeding(false);
      setSeedStatus('Data successfully generated!');
      
      // Refresh the page after a short delay
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    } catch (error) {
      console.error('Error generating data:', error);
      setIsSeeding(false);
      setSeedStatus(`Error: ${error.message}`);
    }
  }, []);
  
  // Toggle real-time updates
  const toggleRealTime = useCallback(() => {
    setRealTimeEnabled(prev => !prev);
  }, []);
  
  // Memoize stat cards data to prevent unnecessary recalculations
  const statCards = useMemo(() => [
    {
      id: 'products',
      title: 'Products',
      value: stats.totalProducts,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10" />
        </svg>
      ),
      color: 'indigo',
      description: 'in inventory',
      link: '/inventory',
      linkText: 'View inventory',
      trend: 'up'
    },
    {
      id: 'low-stock',
      title: 'Low Stock',
      value: stats.lowStockProducts,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      ),
      color: 'red',
      description: 'need attention',
      link: '/inventory',
      linkText: 'View alerts',
      trend: 'down'
    },
    {
      id: 'orders',
      title: 'Orders',
      value: stats.totalOrders,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
        </svg>
      ),
      color: 'green',
      description: 'total orders',
      link: '/orders',
      linkText: 'View orders',
      trend: 'up'
    }
  ], [stats.totalProducts, stats.lowStockProducts, stats.totalOrders]);

  return (
    <div className={`container mx-auto px-4 py-8 max-w-7xl ${darkMode ? 'text-gray-200' : 'text-gray-800'}`}>
      {/* Page Header */}
      <div className="mb-8">
        <div className="flex flex-col md:flex-row md:justify-between md:items-center">
          <div>
            <h1 className={`text-3xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>Welcome to Your Dashboard</h1>
            <p className={`mt-1 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              Here's what's happening with your business today
            </p>
          </div>
          <div className="mt-4 md:mt-0 flex flex-wrap items-center gap-3">
            <span className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              Last updated: {lastUpdated.toLocaleTimeString()}
            </span>
            
            {/* Real-time toggle */}
            <div className="flex items-center">
              <button 
                onClick={toggleRealTime}
                className={`relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 ${
                  realTimeEnabled 
                    ? darkMode ? 'border-indigo-500 bg-indigo-600' : 'border-indigo-600 bg-indigo-600' 
                    : darkMode ? 'border-gray-600 bg-gray-700' : 'border-gray-300 bg-gray-200'
                } transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2`}
                role="switch"
                aria-checked={realTimeEnabled}
                aria-label="Toggle real-time updates"
              >
                <span 
                  className={`pointer-events-none inline-block h-5 w-5 transform rounded-full ${
                    realTimeEnabled 
                      ? 'translate-x-5 bg-white' 
                      : 'translate-x-0 bg-white'
                  } shadow ring-0 transition duration-200 ease-in-out`}
                />
              </button>
              <span className="ml-2 text-sm font-medium">
                {realTimeEnabled ? 'Real-time: On' : 'Real-time: Off'}
              </span>
            </div>
            
            <button 
              className={`p-2 ${darkMode ? 'bg-gray-700 text-indigo-400 border-gray-600' : 'bg-white text-indigo-600 border-gray-200'} rounded-full hover:bg-indigo-${darkMode ? '900' : '50'} border shadow-sm transition-colors`}
              onClick={handleRefresh}
              disabled={loading}
              aria-label="Refresh dashboard data"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${loading ? 'animate-spin' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
            </button>
            
            {/* Generate Data Button */}
            <button 
              onClick={handleGenerateData}
              disabled={isSeeding}
              className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${
                isSeeding 
                  ? darkMode ? 'bg-indigo-800' : 'bg-indigo-400' 
                  : darkMode ? 'bg-indigo-700 hover:bg-indigo-800' : 'bg-indigo-600 hover:bg-indigo-700'
              } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors`}
              aria-label="Generate random data"
            >
              {isSeeding ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Generating...
                </>
              ) : (
                <>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Generate Random Data
                </>
              )}
            </button>
            
            <button className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${darkMode ? 'bg-indigo-700 hover:bg-indigo-800' : 'bg-indigo-600 hover:bg-indigo-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors`}>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Export Report
            </button>
          </div>
        </div>
        
        {/* Breadcrumbs */}
        <nav className="mt-4" aria-label="Breadcrumb">
          <ol className={`flex items-center space-x-1 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            <li>
              <Link to="/" className={`hover:text-indigo-${darkMode ? '400' : '600'} transition-colors`}>Home</Link>
            </li>
            <li className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </li>
            <li>
              <span className={`${darkMode ? 'text-gray-300' : 'text-gray-800'} font-medium`}>Dashboard</span>
            </li>
          </ol>
        </nav>
        
        {/* Status message */}
        {seedStatus && (
          <div className={`mt-4 p-2 ${
            seedStatus.includes('Error') 
              ? darkMode ? 'bg-red-900/20 text-red-400 border-red-800' : 'bg-red-50 text-red-600 border-red-200'
              : darkMode ? 'bg-green-900/20 text-green-400 border-green-800' : 'bg-green-50 text-green-600 border-green-200'
          } border rounded-md text-sm`}>
            {seedStatus}
          </div>
        )}
      </div>
      
      {/* Loading state with skeleton loaders */}
      {loading ? (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-8">
            {/* Stats Cards Skeletons */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {[1, 2, 3].map(i => (
                <SkeletonLoader key={i} type="card" darkMode={darkMode} />
              ))}
            </div>
            
            {/* Table and Activity Skeletons */}
            <SkeletonLoader type="table" darkMode={darkMode} />
            <SkeletonLoader type="table" darkMode={darkMode} />
          </div>
          
          <div className="space-y-8">
            <SkeletonLoader type="table" darkMode={darkMode} />
            <SkeletonLoader type="table" darkMode={darkMode} />
          </div>
        </div>
      ) : error ? (
        <div className={`${darkMode ? 'bg-red-900/20 border-red-800 text-red-300' : 'bg-red-50 border-red-400 text-red-700'} border-l-4 p-4 mb-6`} role="alert">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className={`h-5 w-5 ${darkMode ? 'text-red-500' : 'text-red-400'}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className={`text-sm ${darkMode ? 'text-red-300' : 'text-red-700'}`}>{error}</p>
              <button 
                onClick={handleRefresh}
                className={`mt-2 text-sm ${darkMode ? 'text-red-300 hover:text-red-200' : 'text-red-700 hover:text-red-600'} font-medium focus:outline-none`}
              >
                Try Again
              </button>
            </div>
          </div>
        </div>
      ) : (
        // Dashboard content
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-8">
            {/* Stats Cards - now using memoized data */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {statCards.map((card, index) => (
                <motion.div 
                  key={card.id}
                  className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-md overflow-hidden transition-all duration-300 border hover:shadow-lg`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                  whileHover={{ scale: 1.03, transition: { duration: 0.2 } }}
                >
                  <div className="px-6 py-5">
                    <div className="flex items-center">
                      <div className={`flex-shrink-0 rounded-xl ${darkMode ? `bg-${card.color}-900/30` : `bg-${card.color}-100`} p-3`} aria-hidden="true">
                        <span className={`${darkMode ? `text-${card.color}-400` : `text-${card.color}-600`}`}>
                          {card.icon}
                        </span>
                      </div>
                      <div className="ml-5">
                        <div className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wide`}>{card.title}</div>
                        <div className={`mt-1 text-3xl font-extrabold ${darkMode ? `text-${card.color}-400` : `text-${card.color}-600`}`}>
                          <motion.span
                            key={card.value}
                            initial={{ opacity: 0, y: -10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.3 }}
                          >
                            {card.value}
                          </motion.span>
                        </div>
                        <div className="mt-1 flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" className={`h-4 w-4 ${
                            card.trend === 'up' ? 'text-green-500' : 'text-red-500'
                          }`} fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={
                              card.trend === 'up' 
                                ? "M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" 
                                : "M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"
                            } />
                          </svg>
                          <span className={`text-sm ${
                            card.trend === 'up' ? darkMode ? 'text-green-400' : 'text-green-600' : darkMode ? 'text-red-400' : 'text-red-600'
                          } ml-1`}>{card.description}</span>
                        </div>
                      </div>
                    </div>
                    <div className="mt-6">
                      <Link to={card.link} className={`text-sm ${darkMode ? `text-${card.color}-400 hover:text-${card.color}-300` : `text-${card.color}-600 hover:text-${card.color}-800`} font-medium flex items-center`} aria-label={card.linkText}>
                        {card.linkText}
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </Link>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
            
            {/* Recent Orders - Enhanced with search functionality */}
            <OrdersTable orders={stats.recentOrders} darkMode={darkMode} />
            
            {/* Activity Timeline - Enhanced with expandable details */}
            <ActivityTimeline activities={activities} darkMode={darkMode} />
          </div>

          {/* Right Sidebar with Enhanced Components */}
          <div className="space-y-8">
            {/* QuickActions component loaded lazily */}
            <Suspense fallback={<SkeletonLoader type="table" darkMode={darkMode} />}>
              <QuickActions darkMode={darkMode} />
            </Suspense>
            
            {/* Analytics with data visualization */}
            <Analytics metrics={metrics} stats={stats} darkMode={darkMode} />
            
            {/* Upcoming Deliveries */}
            <motion.div 
              className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
                <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Upcoming Deliveries</h2>
              </div>
              
              <div className="p-6 space-y-4">
                <motion.div 
                  className={`flex items-center p-4 rounded-lg ${darkMode ? 'bg-blue-900/20 border-blue-800' : 'bg-blue-50 border-blue-100'} border`}
                  initial={{ x: -20, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ duration: 0.5 }}
                >
                  <div className={`h-10 w-10 rounded-full ${darkMode ? 'bg-blue-900/50' : 'bg-blue-100'} flex items-center justify-center`} aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${darkMode ? 'text-blue-400' : 'text-blue-600'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l3.414 3.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0m-4 0a2 2 0 114 0m6 0a2 2 0 104 0m-4 0a2 2 0 114 0" />
                    </svg>
                  </div>
                  <div className="ml-4 flex-1">
                    <p className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>Office Supplies Delivery</p>
                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>Arriving Today, 2:30 PM</p>
                    
                    {/* Added progress bar with animation */}
                    <div className="mt-2 w-full bg-blue-200 dark:bg-blue-700/30 rounded-full h-1.5 overflow-hidden">
                      <motion.div 
                        className={`${darkMode ? 'bg-blue-500' : 'bg-blue-600'} h-1.5 rounded-full`} 
                        initial={{ width: 0 }}
                        animate={{ width: '75%' }}
                        transition={{ duration: 1, ease: "easeOut" }}
                      />
                    </div>
                    <div className="flex justify-between mt-1">
                      <span className={`text-xs ${darkMode ? 'text-blue-400' : 'text-blue-600'} font-medium`}>In Transit</span>
                      <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>75%</span>
                    </div>
                  </div>
                </motion.div>
                
                <motion.div 
                  className={`flex items-center p-4 rounded-lg ${darkMode ? 'bg-green-900/20 border-green-800' : 'bg-green-50 border-green-100'} border`}
                  initial={{ x: -20, opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  transition={{ duration: 0.5, delay: 0.2 }}
                >
                  <div className={`h-10 w-10 rounded-full ${darkMode ? 'bg-green-900/50' : 'bg-green-100'} flex items-center justify-center`} aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${darkMode ? 'text-green-400' : 'text-green-600'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l3.414 3.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0m-4 0a2 2 0 114 0m6 0a2 2 0 104 0m-4 0a2 2 0 114 0" />
                    </svg>
                  </div>
                  <div className="ml-4 flex-1">
                    <p className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>Electronics Shipment</p>
                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>Arriving Tomorrow, 10:00 AM</p>
                    
                    {/* Added progress bar with animation */}
                    <div className="mt-2 w-full bg-green-200 dark:bg-green-700/30 rounded-full h-1.5 overflow-hidden">
                      <motion.div 
                        className={`${darkMode ? 'bg-green-500' : 'bg-green-600'} h-1.5 rounded-full`} 
                        initial={{ width: 0 }}
                        animate={{ width: '40%' }}
                        transition={{ duration: 1, ease: "easeOut" }}
                      />
                    </div>
                    <div className="flex justify-between mt-1">
                      <span className={`text-xs ${darkMode ? 'text-green-400' : 'text-green-600'} font-medium`}>Processing</span>
                      <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>40%</span>
                    </div>
                  </div>
                </motion.div>
              </div>
              
              <div className={`border-t ${darkMode ? 'border-gray-700 bg-gray-700' : 'border-gray-100 bg-gray-50'} px-6 py-3`}>
                <a 
                  href="#" 
                  className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center`}
                  aria-label="View all deliveries"
                >
                  View all deliveries
                  <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
            </motion.div>
          </div>
        </div>
      )}
      
      {/* CSS for animations */}
      <style jsx="true">{`
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        .animate-fade-in {
          animation: fadeIn 0.3s ease-out forwards;
        }
      `}</style>
    </div>
  );
};

export default EnhancedDashboard;
</file>

<file path="src/pages/Login.jsx">
// src/pages/Login.jsx - Enhanced Login Page
import { useState } from 'react';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import ThemeToggle from '../components/common/ThemeToggle';
import { useTheme } from '../context/ThemeContext';

const Login = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { login, error: authError, loading: authLoading } = useAuth();
  const { darkMode } = useTheme();
  
  // Get redirect path from location state or default to dashboard
  const from = location.state?.from?.pathname || "/";
  
  const [credentials, setCredentials] = useState({
    email: '',
    password: ''
  });
  
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const [showDemoAccounts, setShowDemoAccounts] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCredentials(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!credentials.email || !credentials.password) {
      setError('Please enter both email and password');
      return;
    }
    
    setLoading(true);
    setError('');
    
    try {
      await login(credentials.email, credentials.password, rememberMe);
      navigate(from, { replace: true });
    } catch (error) {
      console.error('Login error:', error);
      setError(error.message || 'Failed to login. Please check your credentials.');
    } finally {
      setLoading(false);
    }
  };

  // Helper function to quick-fill credentials for demo accounts
  const useTestAccount = (role) => {
    let email = '';
    let password = 'password123';

    switch(role) {
      case 'admin':
        email = 'admin@wholesaler.com';
        break;
      case 'manager': 
        email = 'manager@wholesaler.com';
        break;
      case 'user':
        email = 'user@wholesaler.com';
        break;
      default:
        email = 'user@wholesaler.com';
    }

    setCredentials({
      email,
      password
    });
  };

  return (
    <div className={`min-h-screen flex flex-col md:flex-row ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
      {/* Left Panel - Brand information */}
      <div className={`hidden md:flex md:w-1/2 bg-gradient-to-br from-indigo-600 to-indigo-800 text-white p-12 flex-col justify-between`}>
        <div>
          <div className="flex items-center mb-8">
            <div className="h-10 w-10 bg-white rounded-lg flex items-center justify-center text-indigo-600">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" />
                <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H14a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7h-4v4h4V7zm1-2a2 2 0 012 2v10a2 2 0 01-2 2H3a2 2 0 01-2-2V5a2 2 0 012-2h12z" />
              </svg>
            </div>
            <h1 className="text-2xl font-bold ml-3">Wholesaler</h1>
          </div>
          
          <h2 className="text-4xl font-bold mb-6">Premium Inventory Management</h2>
          <p className="text-indigo-100 mb-8">
            The complete solution for managing your wholesale inventory and customer orders in real-time.
          </p>
          
          <div className="space-y-6">
            <div className="flex items-start">
              <div className="flex-shrink-0 h-8 w-8 bg-indigo-500 rounded-md flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-semibold">Real-time Inventory Tracking</h3>
                <p className="text-indigo-100 text-sm mt-1">Keep track of your stock levels in real-time with automatic updates.</p>
              </div>
            </div>
            
            <div className="flex items-start">
              <div className="flex-shrink-0 h-8 w-8 bg-indigo-500 rounded-md flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-semibold">Seamless Order Management</h3>
                <p className="text-indigo-100 text-sm mt-1">Create and process orders with automatic stock adjustments.</p>
              </div>
            </div>
            
            <div className="flex items-start">
              <div className="flex-shrink-0 h-8 w-8 bg-indigo-500 rounded-md flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-semibold">Comprehensive Analytics</h3>
                <p className="text-indigo-100 text-sm mt-1">Gain insights into your business with detailed reports and analytics.</p>
              </div>
            </div>
          </div>
        </div>
        
        <div className="mt-auto pt-12">
          <p className="text-sm text-indigo-100">¬© {new Date().getFullYear()} Wholesaler App. All rights reserved.</p>
        </div>
      </div>
      
      {/* Right Panel - Login Form */}
      <div className={`flex flex-col justify-center items-center p-6 md:p-12 w-full md:w-1/2 ${darkMode ? 'bg-gray-900 text-white' : 'bg-white text-gray-900'}`}>
        <div className="absolute top-4 right-4">
          <ThemeToggle />
        </div>
        
        <div className="w-full max-w-md">
          <div className="md:hidden flex items-center justify-center mb-8">
            <div className={`h-10 w-10 ${darkMode ? 'bg-indigo-500' : 'bg-indigo-600'} rounded-lg flex items-center justify-center text-white`}>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" />
                <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H14a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7h-4v4h4V7zm1-2a2 2 0 012 2v10a2 2 0 01-2 2H3a2 2 0 01-2-2V5a2 2 0 012-2h12z" />
              </svg>
            </div>
            <h1 className={`text-2xl font-bold ml-3 ${darkMode ? 'text-white' : 'text-gray-900'}`}>Wholesaler</h1>
          </div>
          
          <div className="text-center mb-10">
            <h2 className={`text-3xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>Welcome back</h2>
            <p className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Please sign in to your account</p>
          </div>
          
          {/* Demo accounts section */}
          <div className={`mb-6 ${darkMode ? 'bg-gray-800' : 'bg-indigo-50'} rounded-lg p-4`}>
            <div className="flex justify-between items-center">
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-indigo-700'} font-medium`}>
                Demo Application
              </p>
              <button 
                onClick={() => setShowDemoAccounts(!showDemoAccounts)}
                className={`text-xs ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'}`}
              >
                {showDemoAccounts ? 'Hide Accounts' : 'Show Test Accounts'}
              </button>
            </div>
            
            {showDemoAccounts && (
              <div className="mt-3 space-y-2">
                <button 
                  onClick={() => useTestAccount('admin')}
                  className={`w-full text-left px-3 py-2 rounded text-sm ${
                    darkMode 
                      ? 'bg-gray-700 hover:bg-gray-600 text-indigo-300' 
                      : 'bg-indigo-100 hover:bg-indigo-200 text-indigo-700'
                  }`}
                >
                  Admin: admin@wholesaler.com / password123
                </button>
                <button 
                  onClick={() => useTestAccount('manager')}
                  className={`w-full text-left px-3 py-2 rounded text-sm ${
                    darkMode 
                      ? 'bg-gray-700 hover:bg-gray-600 text-indigo-300' 
                      : 'bg-indigo-100 hover:bg-indigo-200 text-indigo-700'
                  }`}
                >
                  Manager: manager@wholesaler.com / password123
                </button>
                <button 
                  onClick={() => useTestAccount('user')}
                  className={`w-full text-left px-3 py-2 rounded text-sm ${
                    darkMode 
                      ? 'bg-gray-700 hover:bg-gray-600 text-indigo-300' 
                      : 'bg-indigo-100 hover:bg-indigo-200 text-indigo-700'
                  }`}
                >
                  User: user@wholesaler.com / password123
                </button>
              </div>
            )}
          </div>
          
          {(error || authError) && (
            <div className={`mb-6 ${darkMode ? 'bg-red-900 border-red-800' : 'bg-red-50 border-red-500'} border-l-4 p-4 rounded-md`}>
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className={`h-5 w-5 ${darkMode ? 'text-red-400' : 'text-red-400'}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className={`text-sm ${darkMode ? 'text-red-300' : 'text-red-700'}`}>
                    {error || authError}
                  </p>
                </div>
              </div>
            </div>
          )}
          
          <form className="space-y-6" onSubmit={handleSubmit}>
            <div>
              <label htmlFor="email-address" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>Email address</label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg className={`h-5 w-5 ${darkMode ? 'text-gray-500' : 'text-gray-400'}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                    <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                  </svg>
                </div>
                <input
                  id="email-address"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  value={credentials.email}
                  onChange={handleChange}
                  className={`${darkMode ? 'bg-gray-800 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'} focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 pr-3 py-3 sm:text-sm rounded-md`}
                  placeholder="you@example.com"
                />
              </div>
            </div>

            <div>
              <label htmlFor="password" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>Password</label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg className={`h-5 w-5 ${darkMode ? 'text-gray-500' : 'text-gray-400'}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                  </svg>
                </div>
                <input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="current-password"
                  required
                  value={credentials.password}
                  onChange={handleChange}
                  className={`${darkMode ? 'bg-gray-800 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'} focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 pr-3 py-3 sm:text-sm rounded-md`}
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                />
              </div>
            </div>

            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <input
                  id="remember-me"
                  name="remember-me"
                  type="checkbox"
                  checked={rememberMe}
                  onChange={(e) => setRememberMe(e.target.checked)}
                  className={`h-4 w-4 text-indigo-600 focus:ring-indigo-500 ${darkMode ? 'border-gray-600 bg-gray-700' : 'border-gray-300'} rounded`}
                />
                <label htmlFor="remember-me" className={`ml-2 block text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Remember me
                </label>
              </div>

              <div className="text-sm">
                <Link to="/forgot-password" className={`font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-500'}`}>
                  Forgot your password?
                </Link>
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading || authLoading}
                className={`w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${darkMode ? 'bg-indigo-600 hover:bg-indigo-700' : 'bg-indigo-600 hover:bg-indigo-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors ${(loading || authLoading) ? 'opacity-70 cursor-not-allowed' : ''}`}
              >
                {(loading || authLoading) ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span>Signing in...</span>
                  </>
                ) : (
                  <span>Sign in</span>
                )}
              </button>
            </div>
          </form>
          
          <div className="mt-8">
            <div className="relative">
              <div className="absolute inset-0 flex items-center">
                <div className={`w-full border-t ${darkMode ? 'border-gray-700' : 'border-gray-300'}`}></div>
              </div>
              <div className="relative flex justify-center text-sm">
                <span className={`px-2 ${darkMode ? 'bg-gray-900 text-gray-400' : 'bg-white text-gray-500'}`}>
                  Or continue with
                </span>
              </div>
            </div>

            <div className="mt-6 grid grid-cols-2 gap-3">
              <div>
                <button
                  type="button"
                  className={`w-full inline-flex justify-center py-2 px-4 border ${darkMode ? 'border-gray-700 bg-gray-800 text-gray-300 hover:bg-gray-700' : 'border-gray-300 bg-white text-gray-500 hover:bg-gray-50'} rounded-md shadow-sm text-sm font-medium`}
                  onClick={() => {
                    // Handle Google login
                    console.log('Google login clicked');
                  }}
                >
                  <svg className="h-5 w-5" aria-hidden="true" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M20.283 10.356h-8.327v3.451h4.792c-.446 2.193-2.313 3.453-4.792 3.453a5.27 5.27 0 0 1-5.279-5.28 5.27 5.27 0 0 1 5.279-5.279c1.259 0 2.397.447 3.29 1.178l2.6-2.599c-1.584-1.381-3.615-2.233-5.89-2.233a8.908 8.908 0 0 0-8.934 8.934 8.907 8.907 0 0 0 8.934 8.934c4.467 0 8.529-3.249 8.529-8.934 0-.528-.081-1.097-.202-1.625z"></path>
                  </svg>
                </button>
              </div>
              <div>
                <button
                  type="button"
                  className={`w-full inline-flex justify-center py-2 px-4 border ${darkMode ? 'border-gray-700 bg-gray-800 text-gray-300 hover:bg-gray-700' : 'border-gray-300 bg-white text-gray-500 hover:bg-gray-50'} rounded-md shadow-sm text-sm font-medium`}
                  onClick={() => {
                    // Handle Facebook login
                    console.log('Facebook login clicked');
                  }}
                >
                  <svg className="h-5 w-5" aria-hidden="true" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M22.675 0H1.325C.593 0 0 .593 0 1.325v21.351C0 23.407.593 24 1.325 24H12.82v-9.294H9.692v-3.622h3.128V8.413c0-3.1 1.893-4.788 4.659-4.788 1.325 0 2.463.099 2.795.143v3.24l-1.918.001c-1.504 0-1.795.715-1.795 1.763v2.313h3.587l-.467 3.622h-3.12V24h6.116c.73 0 1.323-.593 1.323-1.325V1.325C24 .593 23.407 0 22.675 0z"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          
          <div className="mt-8 text-center">
            <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
              Don't have an account?{' '}
              <Link to="/signup" className={`font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-500'}`}>
                Sign up
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="src/pages/ProductDetail.jsx">
// src/pages/ProductDetail.jsx (continued)
import React, { useState, useEffect } from 'react';
import { useParams, Link, useNavigate } from 'react-router-dom';
import { doc, getDoc, updateDoc, deleteDoc } from 'firebase/firestore';
import { db } from '../firebase/config';
import { useTheme } from '../context/ThemeContext';
import ProductModal from '../components/inventory/ProductModal';

const ProductDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { darkMode } = useTheme();
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [confirmDelete, setConfirmDelete] = useState(false);
  const [stockAdjustment, setStockAdjustment] = useState(0);
  const [categories, setCategories] = useState([]);

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        
        // Fetch product
        const productRef = doc(db, 'products', id);
        const productSnap = await getDoc(productRef);
        
        if (productSnap.exists()) {
          setProduct({
            id: productSnap.id,
            ...productSnap.data()
          });
        } else {
          setError('Product not found');
        }
        
        // Fetch categories for the edit modal
        // In a real app, you'd fetch this from a separate collection or context
        setCategories(['Electronics', 'Office Supplies', 'Furniture', 'Kitchen', 'Clothing']);
        
        setLoading(false);
      } catch (err) {
        console.error('Error fetching product:', err);
        setError('Failed to load product data. Please try again later.');
        setLoading(false);
      }
    };
    
    fetchProduct();
  }, [id]);

  // Handle stock adjustment
  const handleStockUpdate = async () => {
    if (stockAdjustment === 0) return;
    
    try {
      const newStock = Math.max(0, (product.stock || 0) + stockAdjustment);
      
      // Update stock in Firestore
      const productRef = doc(db, 'products', id);
      await updateDoc(productRef, {
        stock: newStock,
        updatedAt: new Date()
      });
      
      // Update local state
      setProduct({
        ...product,
        stock: newStock
      });
      
      // Reset adjustment
      setStockAdjustment(0);
    } catch (err) {
      console.error('Error updating stock:', err);
      alert('Failed to update stock. Please try again.');
    }
  };

  // Handle product deletion
  const handleDeleteProduct = async () => {
    try {
      const productRef = doc(db, 'products', id);
      await deleteDoc(productRef);
      navigate('/inventory');
    } catch (err) {
      console.error('Error deleting product:', err);
      alert('Failed to delete product. Please try again.');
    }
  };

  // Handle edit modal close
  const handleCloseEditModal = async (refreshData) => {
    setShowEditModal(false);
    
    if (refreshData) {
      // Refresh product data
      try {
        const productRef = doc(db, 'products', id);
        const productSnap = await getDoc(productRef);
        
        if (productSnap.exists()) {
          setProduct({
            id: productSnap.id,
            ...productSnap.data()
          });
        }
      } catch (err) {
        console.error('Error refreshing product data:', err);
      }
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`container mx-auto px-4 py-8 ${darkMode ? 'text-white' : ''}`}>
        <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} shadow rounded-lg p-6`}>
          <h1 className="text-2xl font-bold mb-4">{error}</h1>
          <Link to="/inventory" className={`text-indigo-${darkMode ? '400' : '600'} hover:text-indigo-${darkMode ? '300' : '800'}`}>
            ‚Üê Back to Inventory
          </Link>
        </div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className={`container mx-auto px-4 py-8 ${darkMode ? 'text-white' : ''}`}>
        <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} shadow rounded-lg p-6`}>
          <h1 className="text-2xl font-bold mb-4">Product not found</h1>
          <Link to="/inventory" className={`text-indigo-${darkMode ? '400' : '600'} hover:text-indigo-${darkMode ? '300' : '800'}`}>
            ‚Üê Back to Inventory
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className={`container mx-auto px-4 py-8 ${darkMode ? 'text-white' : ''}`}>
      <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} shadow rounded-lg overflow-hidden`}>
        {/* Product Header */}
        <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'} flex justify-between items-center`}>
          <div className="flex items-center">
            <Link
              to="/inventory"
              className={`mr-4 text-indigo-${darkMode ? '400' : '600'} hover:text-indigo-${darkMode ? '300' : '800'} flex items-center`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
            </Link>
            <h2 className="text-2xl font-bold">{product.name}</h2>
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => setShowEditModal(true)}
              className={`inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-${darkMode ? '500' : '600'} hover:bg-indigo-${darkMode ? '400' : '700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
              Edit
            </button>
            <button
              onClick={() => setConfirmDelete(true)}
              className={`inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-white bg-red-${darkMode ? '500' : '600'} hover:bg-red-${darkMode ? '400' : '700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
              Delete
            </button>
          </div>
        </div>
        
        {/* Product Content */}
        <div className="p-6 grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Left Column - Product Image */}
          <div>
            <div className={`border ${darkMode ? 'border-gray-700' : 'border-gray-200'} rounded-lg overflow-hidden mb-4`}>
              <div className={`h-80 bg-gray-100 ${darkMode ? 'bg-gray-700' : ''} flex items-center justify-center`}>
                {product.imageUrl ? (
                  <img 
                    src={product.imageUrl} 
                    alt={product.name}
                    className="w-full h-full object-contain"
                  />
                ) : (
                  <div className="text-center p-6">
                    <svg 
                      className={`mx-auto h-16 w-16 ${darkMode ? 'text-gray-600' : 'text-gray-400'}`}
                      fill="none" 
                      viewBox="0 0 24 24" 
                      stroke="currentColor"
                    >
                      <path 
                        strokeLinecap="round" 
                        strokeLinejoin="round" 
                        strokeWidth={1} 
                        d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" 
                      />
                    </svg>
                    <p className={`mt-2 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                      No product image available
                    </p>
                    <button
                      onClick={() => setShowEditModal(true)}
                      className={`mt-4 inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-${darkMode ? '500' : '600'} hover:bg-indigo-${darkMode ? '400' : '700'}`}
                    >
                      Add Image
                    </button>
                  </div>
                )}
              </div>
            </div>
            
            {/* Product Description */}
            <div className={`border ${darkMode ? 'border-gray-700' : 'border-gray-200'} rounded-lg p-4`}>
              <h3 className="text-lg font-medium mb-2">Description</h3>
              <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                {product.description || 'No description available for this product.'}
              </p>
            </div>
          </div>
          
          {/* Right Column - Product Details */}
          <div className="space-y-6">
            <div className={`border ${darkMode ? 'border-gray-700' : 'border-gray-200'} rounded-lg p-4`}>
              <h3 className="text-lg font-medium mb-4">Product Information</h3>
              
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-4">
                  <div>
                    <label className={`block text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Category</label>
                    <span className={`block mt-1 text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>{product.category || 'Uncategorized'}</span>
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>SKU</label>
                    <span className={`block mt-1 text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>{product.sku || 'N/A'}</span>
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Supplier</label>
                    <span className={`block mt-1 text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>{product.supplier || 'N/A'}</span>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <label className={`block text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Selling Price</label>
                    <span className={`block mt-1 text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${parseFloat(product.price).toFixed(2)}</span>
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Cost Price</label>
                    <span className={`block mt-1 text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                      {product.costPrice ? `$${parseFloat(product.costPrice).toFixed(2)}` : 'N/A'}
                    </span>
                  </div>
                  
                  <div>
                    <label className={`block text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Profit Margin</label>
                    <span className={`block mt-1 text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                      {product.costPrice 
                        ? `${Math.round(((product.price - product.costPrice) / product.price) * 100)}%` 
                        : 'N/A'}
                    </span>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Stock Information */}
            <div className={`border ${darkMode ? 'border-gray-700' : 'border-gray-200'} rounded-lg p-4`}>
              <h3 className="text-lg font-medium mb-4">Stock Information</h3>
              
              <div className="mb-4">
                <div className="flex justify-between items-center">
                  <label className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Current Stock</label>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium 
                    ${parseInt(product.stock) <= 5 
                      ? darkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-800'
                      : darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-800'
                    }`}
                  >
                    {parseInt(product.stock) <= 5 ? 'Low Stock' : 'In Stock'}
                  </span>
                </div>
                
                <div className="mt-1 flex items-center">
                  <span className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    {product.stock || 0}
                  </span>
                  <span className={`ml-2 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                    units
                  </span>
                </div>
              </div>
              
              {product.reorderPoint && (
                <div className="mb-4">
                  <label className={`block text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Reorder Point</label>
                  <span className={`block mt-1 text-sm ${darkMode ? 'text-white' : 'text-gray-900'}`}>{product.reorderPoint}</span>
                </div>
              )}
              
              {/* Stock Adjustment */}
              <div className="mt-6">
                <label className={`block text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-2`}>
                  Adjust Stock
                </label>
                <div className="flex items-center">
                  <div className="flex rounded-md shadow-sm flex-1">
                    <button
                      type="button"
                      onClick={() => setStockAdjustment(prev => Math.max(product.stock * -1, prev - 1))}
                      className={`relative inline-flex items-center px-3 py-2 rounded-l-md border ${darkMode ? 'border-gray-600 bg-gray-700 text-gray-300' : 'border-gray-300 bg-gray-50 text-gray-500'} hover:bg-gray-${darkMode ? '600' : '100'}`}
                    >
                      <span className="sr-only">Decrease</span>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 12H6" />
                      </svg>
                    </button>
                    <input
                      type="number"
                      id="stock-adjustment"
                      value={stockAdjustment}
                      onChange={(e) => {
                        const value = parseInt(e.target.value, 10);
                        if (!isNaN(value)) {
                          // Prevent going below -current stock (which would make total stock negative)
                          if (value >= -product.stock) {
                            setStockAdjustment(value);
                          }
                        }
                      }}
                      className={`block w-full flex-1 rounded-none ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300 text-gray-900'} focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-y text-center`}
                    />
                    <button
                      type="button"
                      onClick={() => setStockAdjustment(prev => prev + 1)}
                      className={`relative inline-flex items-center px-3 py-2 rounded-r-md border ${darkMode ? 'border-gray-600 bg-gray-700 text-gray-300' : 'border-gray-300 bg-gray-50 text-gray-500'} hover:bg-gray-${darkMode ? '600' : '100'}`}
                    >
                      <span className="sr-only">Increase</span>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                    </button>
                  </div>
                  <button
                    onClick={handleStockUpdate}
                    disabled={stockAdjustment === 0}
                    className={`ml-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${
                      stockAdjustment === 0 
                        ? 'bg-gray-300 dark:bg-gray-600 cursor-not-allowed' 
                        : stockAdjustment > 0 
                          ? 'bg-green-600 hover:bg-green-700 dark:bg-green-500 dark:hover:bg-green-400' 
                          : 'bg-red-600 hover:bg-red-700 dark:bg-red-500 dark:hover:bg-red-400'
                    } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                  >
                    {stockAdjustment === 0 
                      ? 'No Change' 
                      : stockAdjustment > 0 
                        ? `Add ${stockAdjustment}` 
                        : `Remove ${Math.abs(stockAdjustment)}`}
                  </button>
                </div>
                <div className="mt-2 text-sm text-gray-500 dark:text-gray-400">
                  {stockAdjustment !== 0 && (
                    <div>
                      New stock will be: <span className="font-medium">{product.stock + stockAdjustment}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            {/* Last Updated */}
            <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              Last Updated: {product.updatedAt ? new Date(product.updatedAt.toDate()).toLocaleString() : 'N/A'}
            </div>
          </div>
        </div>
      </div>
      
      {/* Delete Confirmation Modal */}
      {confirmDelete && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className={`absolute inset-0 bg-gray-500 opacity-75`}></div>
            </div>
            
            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div className={`inline-block align-bottom ${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full`}>
              <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} px-4 pt-5 pb-4 sm:p-6 sm:pb-4`}>
                <div className="sm:flex sm:items-start">
                  <div className="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                    <svg className="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  </div>
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3 className={`text-lg leading-6 font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`} id="modal-title">
                      Delete Product
                    </h3>
                    <div className="mt-2">
                      <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-500'}`}>
                        Are you sure you want to delete this product? This action cannot be undone.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div className={`${darkMode ? 'bg-gray-800' : 'bg-gray-50'} px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse`}>
                <button 
                  type="button" 
                  onClick={handleDeleteProduct}
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
                >
                  Delete
                </button>
                <button 
                  type="button" 
                  onClick={() => setConfirmDelete(false)}
                  className={`mt-3 w-full inline-flex justify-center rounded-md border ${darkMode ? 'border-gray-600 bg-gray-700 text-gray-300' : 'border-gray-300 bg-white text-gray-700'} shadow-sm px-4 py-2 text-base font-medium hover:bg-gray-${darkMode ? '600' : '50'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm`}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Edit Product Modal */}
      {showEditModal && (
        <ProductModal 
          product={product} 
          onClose={handleCloseEditModal}
          categories={categories}
        />
      )}
    </div>
  );
};

export default ProductDetail;
</file>

<file path="src/services/dashboardService.js">
// src/services/dashboardService.js
import { 
  collection, 
  doc, 
  addDoc, 
  getDoc, 
  getDocs, 
  updateDoc, 
  deleteDoc, 
  query, 
  where, 
  orderBy, 
  limit,
  onSnapshot,
  serverTimestamp,
  Timestamp
} from 'firebase/firestore';
import { db } from '../firebase/config';

// Constants
const PRODUCTS_COLLECTION = 'products';
const ORDERS_COLLECTION = 'orders';
const ACTIVITIES_COLLECTION = 'activities';
const METRICS_COLLECTION = 'metrics';

/**
 * Fetch dashboard summary data (products, orders, activities)
 */
export const getDashboardSummary = async (lowStockThreshold = 10, itemLimit = 5) => {
  try {
    // Fetch Products
    const productsRef = collection(db, PRODUCTS_COLLECTION);
    const productsSnapshot = await getDocs(productsRef);
    const products = productsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    // Calculate product stats
    const totalProducts = products.length;
    const lowStockProducts = products.filter(
      product => product.stock <= lowStockThreshold
    ).length;

    // Fetch recent orders
    const ordersRef = collection(db, ORDERS_COLLECTION);
    const recentOrdersQuery = query(
      ordersRef,
      orderBy('createdAt', 'desc'),
      limit(itemLimit)
    );
    
    const ordersSnapshot = await getDocs(recentOrdersQuery);
    const recentOrders = ordersSnapshot.docs.map(doc => {
      const data = doc.data();
      const createdAt = data.createdAt 
        ? (data.createdAt instanceof Timestamp ? data.createdAt.toDate() : new Date(data.createdAt)) 
        : new Date();
        
      return {
        id: doc.id,
        customerName: data.customerName || 'Unknown Customer',
        createdAt,
        items: data.items || [],
        itemCount: data.itemCount || 0,
        total: data.total || 0,
        status: data.status || 'pending'
      };
    });

    // Get total orders count
    const ordersCountSnapshot = await getDocs(collection(db, ORDERS_COLLECTION));
    const totalOrders = ordersCountSnapshot.size;

    // Fetch recent activities
    const activitiesRef = collection(db, ACTIVITIES_COLLECTION);
    const activitiesQuery = query(
      activitiesRef,
      orderBy('createdAt', 'desc'),
      limit(itemLimit)
    );
    
    const activitiesSnapshot = await getDocs(activitiesQuery);
    const activities = activitiesSnapshot.docs.map(doc => {
      const data = doc.data();
      const activityDate = data.createdAt 
        ? (data.createdAt instanceof Timestamp ? data.createdAt.toDate() : new Date(data.createdAt)) 
        : new Date();
        
      return {
        id: doc.id,
        type: data.type || 'order',
        description: data.description || 'Activity',
        time: getRelativeTime(activityDate),
        createdAt: activityDate
      };
    });

    // Fetch metrics
    let metrics = null;
    try {
      const metricsDoc = await getDoc(doc(db, METRICS_COLLECTION, 'current'));
      if (metricsDoc.exists()) {
        metrics = metricsDoc.data();
      }
    } catch (err) {
      console.log("Metrics data not available:", err);
    }

    return {
      products: {
        total: totalProducts,
        lowStock: lowStockProducts,
        items: products.slice(0, itemLimit)
      },
      orders: {
        total: totalOrders,
        recent: recentOrders
      },
      activities,
      metrics
    };
  } catch (error) {
    console.error("Error fetching dashboard data:", error);
    throw error;
  }
};

/**
 * Setup real-time listeners for dashboard data
 * @returns {Function} Unsubscribe function for all listeners
 */
export const setupDashboardListeners = (callbacks, options = {}) => {
  const { onOrdersUpdate, onActivitiesUpdate, onMetricsUpdate } = callbacks;
  const { limit: itemLimit = 5 } = options;
  
  const unsubscribers = [];

  // Orders listener
  if (onOrdersUpdate) {
    const ordersRef = collection(db, ORDERS_COLLECTION);
    const recentOrdersQuery = query(
      ordersRef,
      orderBy('createdAt', 'desc'),
      limit(itemLimit)
    );
    
    const unsubscribe = onSnapshot(recentOrdersQuery, (snapshot) => {
      const recentOrders = snapshot.docs.map(doc => {
        const data = doc.data();
        const createdAt = data.createdAt 
          ? (data.createdAt instanceof Timestamp ? data.createdAt.toDate() : new Date(data.createdAt)) 
          : new Date();
          
        return {
          id: doc.id,
          customerName: data.customerName || 'Unknown Customer',
          createdAt,
          items: data.items || [],
          itemCount: data.itemCount || 0,
          total: data.total || 0,
          status: data.status || 'pending'
        };
      });
      
      onOrdersUpdate(recentOrders);
    }, (error) => {
      console.error("Error in orders listener:", error);
    });

    unsubscribers.push(unsubscribe);
  }

  // Activities listener
  if (onActivitiesUpdate) {
    const activitiesRef = collection(db, ACTIVITIES_COLLECTION);
    const activitiesQuery = query(
      activitiesRef,
      orderBy('createdAt', 'desc'),
      limit(itemLimit)
    );
    
    const unsubscribe = onSnapshot(activitiesQuery, (snapshot) => {
      const activities = snapshot.docs.map(doc => {
        const data = doc.data();
        const activityDate = data.createdAt 
          ? (data.createdAt instanceof Timestamp ? data.createdAt.toDate() : new Date(data.createdAt)) 
          : new Date();
          
        return {
          id: doc.id,
          type: data.type || 'order',
          description: data.description || 'Activity',
          time: getRelativeTime(activityDate),
          createdAt: activityDate
        };
      });
      
      onActivitiesUpdate(activities);
    }, (error) => {
      console.error("Error in activities listener:", error);
    });

    unsubscribers.push(unsubscribe);
  }

  // Metrics listener
  if (onMetricsUpdate) {
    const metricsRef = doc(db, METRICS_COLLECTION, 'current');
    
    const unsubscribe = onSnapshot(metricsRef, (doc) => {
      if (doc.exists()) {
        onMetricsUpdate(doc.data());
      }
    }, (error) => {
      console.error("Error in metrics listener:", error);
    });

    unsubscribers.push(unsubscribe);
  }

  // Return a function to unsubscribe from all listeners
  return () => {
    unsubscribers.forEach(unsubscribe => unsubscribe());
  };
};

/**
 * Get analytics data for charts
 */
export const getDashboardAnalytics = async () => {
  try {
    // Get orders for revenue data by month
    const ordersRef = collection(db, ORDERS_COLLECTION);
    const ordersQuery = query(
      ordersRef,
      orderBy('createdAt', 'desc'),
      limit(100) // Get enough orders to aggregate
    );
    
    const ordersSnapshot = await getDocs(ordersQuery);
    const orders = ordersSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      createdAt: doc.data().createdAt instanceof Timestamp ? 
        doc.data().createdAt.toDate() : new Date(doc.data().createdAt || Date.now())
    }));

    // Get products for inventory data by category
    const productsRef = collection(db, PRODUCTS_COLLECTION);
    const productsSnapshot = await getDocs(productsRef);
    const products = productsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));

    // Aggregate orders by month for revenue data
    const revenueByMonth = {};
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    orders.forEach(order => {
      const month = months[order.createdAt.getMonth()];
      revenueByMonth[month] = (revenueByMonth[month] || 0) + (order.total || 0);
    });

    // Format revenue data for chart
    const revenueData = Object.entries(revenueByMonth).map(([month, total]) => ({
      month,
      revenue: Math.round(total)
    })).sort((a, b) => months.indexOf(a.month) - months.indexOf(b.month));

    // Fill in missing months with zero values
    const currentMonth = new Date().getMonth();
    for (let i = 0; i < 6; i++) {
      const monthIndex = (currentMonth - i + 12) % 12; // Get the last 6 months
      const month = months[monthIndex];
      if (!revenueByMonth[month]) {
        revenueData.push({ month, revenue: 0 });
      }
    }
    
    // Sort by month
    revenueData.sort((a, b) => {
      const aIndex = months.indexOf(a.month);
      const bIndex = months.indexOf(b.month);
      const current = currentMonth;
      
      // Calculate distance from current month
      const aDist = (current - aIndex + 12) % 12;
      const bDist = (current - bIndex + 12) % 12;
      
      // Sort by distance (most recent first)
      return aDist - bDist;
    });

    // Only keep the most recent 6 months
    const recentRevenueData = revenueData.slice(0, 6).reverse();

    // Aggregate products by category
    const productsByCategory = {};
    
    products.forEach(product => {
      const category = product.category || 'Other';
      if (!productsByCategory[category]) {
        productsByCategory[category] = {
          count: 0,
          value: 0
        };
      }
      
      productsByCategory[category].count += 1;
      productsByCategory[category].value += (product.price || 0) * (product.stock || 0);
    });

    // Format inventory data for chart
    const inventoryData = Object.entries(productsByCategory).map(([category, data]) => ({
      category,
      count: data.count,
      value: Math.round(data.value)
    }));

    // Generate comparison data (mock data for now)
    const currentWeek = [1, 2, 3, 4, 5, 6, 7].map(day => ({
      day: `Day ${day}`,
      current: Math.round(Math.random() * 3000) + 2000,
      previous: Math.round(Math.random() * 3000) + 2000
    }));

    return {
      revenue: recentRevenueData,
      inventory: inventoryData,
      comparison: currentWeek
    };
  } catch (error) {
    console.error("Error fetching analytics data:", error);
    throw error;
  }
};

/**
 * Add a mock activity to the database
 */
export const addActivity = async (activity) => {
  try {
    const activityData = {
      ...activity,
      createdAt: serverTimestamp()
    };
    
    const docRef = await addDoc(collection(db, ACTIVITIES_COLLECTION), activityData);
    return docRef.id;
  } catch (error) {
    console.error("Error adding activity:", error);
    throw error;
  }
};

/**
 * Get relative time string from date
 */
function getRelativeTime(date) {
  if (!date) return 'Unknown';
  
  const now = new Date();
  const diffMs = now - date;
  const diffMinutes = Math.floor(diffMs / (1000 * 60));
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

  if (diffMinutes < 60) {
    return diffMinutes <= 1 ? 'Just now' : `${diffMinutes} minutes ago`;
  } else if (diffHours < 24) {
    return `${diffHours} ${diffHours === 1 ? 'hour' : 'hours'} ago`;
  } else if (diffDays < 7) {
    return diffDays === 1 ? 'Yesterday' : `${diffDays} days ago`;
  } else {
    return date.toLocaleDateString();
  }
}

export default {
  getDashboardSummary,
  setupDashboardListeners,
  getDashboardAnalytics,
  addActivity
};
</file>

<file path="src/utils/imageManagement.js">
// src/utils/imageManagement.js
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { storage } from '../firebase/config';
import { updateDoc, doc } from 'firebase/firestore';
import { db } from '../firebase/config';

/**
 * Upload a product image to Firebase Storage
 * @param {File} file - The image file to upload
 * @param {string} productId - The ID of the product
 * @returns {Promise<string>} - The download URL of the image
 */
export const uploadProductImage = async (file, productId) => {
  try {
    // Create a storage reference
    const storageRef = ref(storage, `products/${productId}/${file.name}`);
    
    // Upload the file
    const snapshot = await uploadBytes(storageRef, file);
    
    // Get the download URL
    const downloadURL = await getDownloadURL(snapshot.ref);
    
    // Update the product document with the image URL
    await updateDoc(doc(db, 'products', productId), {
      imageUrl: downloadURL,
      updatedAt: new Date()
    });
    
    return downloadURL;
  } catch (error) {
    console.error('Error uploading image:', error);
    throw error;
  }
};

/**
 * Generate a placeholder image URL for products without images
 * @param {Object} product - Product data
 * @returns {string} - Placeholder image URL
 */
export const generatePlaceholderImage = (product) => {
  const category = product?.category?.toLowerCase() || 'product';
  const name = product?.name?.replace(/\s+/g, '-').toLowerCase() || 'item';
  
  // Use placeholder.com service for clean placeholders
  return `https://via.placeholder.com/300x300?text=${category}+${name}`;
};

/**
 * Get the image URL for a product
 * @param {Object} product - The product object
 * @returns {string} - The image URL or a placeholder
 */
export const getProductImageUrl = (product) => {
  if (product?.imageUrl) {
    return product.imageUrl;
  }
  
  return generatePlaceholderImage(product);
};
</file>

<file path="src/utils/seedDatabase.js">
// src/utils/seedDatabase.js
import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '../firebase/config';

// Sample product data
const sampleProducts = [
  {
    name: "Wireless Headphones",
    description: "High-quality wireless headphones with noise cancellation",
    price: 149.99,
    stock: 25,
    category: "Electronics",
    imageUrl: "https://example.com/headphones.jpg",
    sku: "WH-001"
  },
  {
    name: "Smart Watch",
    description: "Fitness and health tracking smartwatch",
    price: 199.99,
    stock: 18,
    category: "Electronics",
    imageUrl: "https://example.com/smartwatch.jpg",
    sku: "SW-002"
  },
  {
    name: "Bluetooth Speaker",
    description: "Portable waterproof bluetooth speaker",
    price: 79.99,
    stock: 32,
    category: "Electronics",
    imageUrl: "https://example.com/speaker.jpg",
    sku: "BS-003"
  },
  {
    name: "Laptop Stand",
    description: "Adjustable aluminum laptop stand",
    price: 49.99,
    stock: 12,
    category: "Office Supplies",
    imageUrl: "https://example.com/laptopstand.jpg",
    sku: "LS-004"
  },
  {
    name: "Mechanical Keyboard",
    description: "RGB mechanical gaming keyboard",
    price: 129.99,
    stock: 8,
    category: "Computer Accessories",
    imageUrl: "https://example.com/keyboard.jpg",
    sku: "KB-005"
  },
  {
    name: "USB-C Hub",
    description: "7-in-1 USB-C hub adapter",
    price: 39.99,
    stock: 5,
    category: "Computer Accessories",
    imageUrl: "https://example.com/usbchub.jpg",
    sku: "UC-006"
  }
];

// Sample order data
const sampleOrders = [
  {
    customerName: "John Smith",
    email: "john.smith@example.com",
    total: 229.98,
    status: "completed",
    itemCount: 2,
    items: [
      { productId: 1, quantity: 1, price: 149.99, name: "Wireless Headphones" },
      { productId: 4, quantity: 1, price: 79.99, name: "Bluetooth Speaker" }
    ],
    shippingAddress: {
      street: "123 Main St",
      city: "Springfield",
      state: "IL",
      zipCode: "62704",
      country: "USA"
    },
    paymentMethod: "Credit Card",
    createdAt: serverTimestamp()
  },
  {
    customerName: "Sarah Johnson",
    email: "sarah.j@example.com",
    total: 199.99,
    status: "shipped",
    itemCount: 1,
    items: [
      { productId: 2, quantity: 1, price: 199.99, name: "Smart Watch" }
    ],
    shippingAddress: {
      street: "456 Elm St",
      city: "Riverdale",
      state: "NY",
      zipCode: "10471",
      country: "USA"
    },
    paymentMethod: "PayPal",
    createdAt: serverTimestamp()
  },
  {
    customerName: "Michael Wong",
    email: "m.wong@example.com",
    total: 259.97,
    status: "pending",
    itemCount: 3,
    items: [
      { productId: 4, quantity: 1, price: 49.99, name: "Laptop Stand" },
      { productId: 5, quantity: 1, price: 129.99, name: "Mechanical Keyboard" },
      { productId: 6, quantity: 2, price: 39.99, name: "USB-C Hub" }
    ],
    shippingAddress: {
      street: "789 Oak Ave",
      city: "Portland",
      state: "OR",
      zipCode: "97205",
      country: "USA"
    },
    paymentMethod: "Credit Card",
    createdAt: serverTimestamp()
  }
];

// Sample activity data
const sampleActivities = [
  {
    type: "order",
    description: "New order #ORD-001 placed by John Smith",
    createdAt: serverTimestamp(),
    userId: "user123",
    details: {
      orderId: "ORD-001",
      total: 229.98
    }
  },
  {
    type: "inventory",
    description: "Stock updated for Mechanical Keyboard",
    createdAt: serverTimestamp(),
    userId: "admin456",
    details: {
      productId: "KB-005",
      oldStock: 5,
      newStock: 8
    }
  },
  {
    type: "order",
    description: "Order #ORD-002 status changed to shipped",
    createdAt: serverTimestamp(),
    userId: "admin456",
    details: {
      orderId: "ORD-002",
      oldStatus: "processing",
      newStatus: "shipped"
    }
  },
  {
    type: "order",
    description: "New order #ORD-003 placed by Michael Wong",
    createdAt: serverTimestamp(),
    userId: "user456",
    details: {
      orderId: "ORD-003",
      total: 259.97
    }
  },
  {
    type: "inventory",
    description: "Low stock alert: USB-C Hub (5 remaining)",
    createdAt: serverTimestamp(),
    userId: "system",
    details: {
      productId: "UC-006",
      stock: 5,
      threshold: 10
    }
  }
];

/**
 * Seeds the Firebase database with sample data for testing
 * @returns {Promise<object>} Object containing the results of seeding each collection
 */
export const seedDatabase = async () => {
  const results = {
    products: { success: false, count: 0, error: null },
    orders: { success: false, count: 0, error: null },
    activities: { success: false, count: 0, error: null }
  };

  try {
    // Add products
    for (const product of sampleProducts) {
      await addDoc(collection(db, 'products'), product);
      results.products.count++;
    }
    results.products.success = true;

    // Add orders
    for (const order of sampleOrders) {
      await addDoc(collection(db, 'orders'), order);
      results.orders.count++;
    }
    results.orders.success = true;

    // Add activities
    for (const activity of sampleActivities) {
      await addDoc(collection(db, 'activities'), activity);
      results.activities.count++;
    }
    results.activities.success = true;

    return results;
  } catch (error) {
    console.error("Error seeding database:", error);
    return {
      ...results,
      error: error.message
    };
  }
};

// Utility function to create a simple document in a collection
export const createSampleDocument = async (collectionName, data) => {
  try {
    const docRef = await addDoc(collection(db, collectionName), {
      ...data,
      createdAt: serverTimestamp()
    });
    return { success: true, id: docRef.id };
  } catch (error) {
    console.error(`Error creating sample ${collectionName} document:`, error);
    return { success: false, error: error.message };
  }
};

export default seedDatabase;
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
    darkMode: 'class',   // ‚úÖ Add this line
    content: [
      "./index.html",
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
    theme: {
      extend: {
        colors: {
          primary: "#4F46E5",
          secondary: "#10B981",
          accent: "#F59E0B",
        }
      },
    },
    plugins: [],
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# productions
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="src/components/common/ThemeToggle.jsx">
// src/components/common/ThemeToggle.jsx
import { useTheme } from '../../context/ThemeContext';

const ThemeToggle = ({ className = '' }) => {
  const { darkMode, toggleDarkMode } = useTheme();

  return (
    <button
      onClick={toggleDarkMode}
      className={`relative inline-flex items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 ${className} ${
        darkMode
          ? 'bg-indigo-600'
          : 'bg-gray-200'
      }`}
      style={{ width: '56px', height: '28px' }}
      aria-pressed={darkMode}
      aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}
    >
      <span
        className={`inline-block h-6 w-6 transform rounded-full bg-white shadow-lg ring-0 transition-transform ${
          darkMode ? 'translate-x-7' : 'translate-x-0.5'
        }`}
      >
        {darkMode ? (
          // Moon icon
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-4 w-4 m-1 text-indigo-600"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
          </svg>
        ) : (
          // Sun icon
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-4 w-4 m-1 text-amber-500"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fillRule="evenodd"
              d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
              clipRule="evenodd"
            />
          </svg>
        )}
      </span>
      <span className="sr-only">{darkMode ? 'Dark mode' : 'Light mode'}</span>
    </button>
  );
};

export default ThemeToggle;
</file>

<file path="src/components/inventory/App.jsx">
// src/App.jsx - Updated with additional inventory routes
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import Layout from './components/common/Layout';
import Dashboard from './pages/Dashboard';
import Login from './pages/Login';
import Inventory from './pages/Inventory';
import ProductDetails from './components/inventory/ProductDetails';
import Orders from './pages/Orders';
import CreateOrder from './pages/CreateOrder';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/" element={
            <Layout>
              <Dashboard />
            </Layout>
          } />
          <Route path="/login" element={
            <Layout>
              <Login />
            </Layout>
          } />
          <Route path="/inventory" element={
            <Layout>
              <Inventory />
            </Layout>
          } />
          <Route path="/inventory/:id" element={
            <Layout>
              <ProductDetails />
            </Layout>
          } />
          <Route path="/orders" element={
            <Layout>
              <Orders />
            </Layout>
          } />
          <Route path="/create-order" element={
            <Layout>
              <CreateOrder />
            </Layout>
          } />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;
</file>

<file path="src/components/inventory/categoryUtils.js">
// src/utils/categoryUtils.js
import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from '../firebase/config';

// Default categories if none are found in database
const DEFAULT_CATEGORIES = [
  'Electronics',
  'Office Supplies',
  'Furniture',
  'Kitchen',
  'Clothing',
  'Miscellaneous'
];

/**
 * Get all unique categories from products
 * @returns {Promise<Array>} Array of category strings
 */
export const getAllCategories = async () => {
  try {
    const productsRef = collection(db, 'products');
    const productsSnapshot = await getDocs(productsRef);
    
    // Extract unique categories from products
    const categorySet = new Set();
    
    productsSnapshot.docs.forEach(doc => {
      const category = doc.data().category;
      if (category) {
        categorySet.add(category);
      }
    });
    
    // Convert to array and sort alphabetically
    const categories = Array.from(categorySet).sort();
    
    // If no categories found, return defaults
    return categories.length > 0 ? categories : DEFAULT_CATEGORIES;
  } catch (error) {
    console.error('Error fetching categories:', error);
    return DEFAULT_CATEGORIES;
  }
};

/**
 * Get products count by category
 * @returns {Promise<Object>} Object with category names as keys and counts as values
 */
export const getCategoryCounts = async () => {
  try {
    const productsRef = collection(db, 'products');
    const productsSnapshot = await getDocs(productsRef);
    
    // Count products by category
    const categoryCounts = {};
    
    productsSnapshot.docs.forEach(doc => {
      const category = doc.data().category;
      if (category) {
        categoryCounts[category] = (categoryCounts[category] || 0) + 1;
      }
    });
    
    return categoryCounts;
  } catch (error) {
    console.error('Error fetching category counts:', error);
    return {};
  }
};

/**
 * Get category stats (count, total value, average price, etc.)
 * @param {string} category - The category to get stats for
 * @returns {Promise<Object>} Object with category statistics
 */
export const getCategoryStats = async (category) => {
  try {
    const productsRef = collection(db, 'products');
    const q = query(productsRef, where('category', '==', category));
    const productsSnapshot = await getDocs(q);
    
    if (productsSnapshot.empty) {
      return {
        count: 0,
        totalValue: 0,
        averagePrice: 0,
        lowestPrice: 0,
        highestPrice: 0,
        totalStock: 0,
        lowStockCount: 0
      };
    }
    
    let totalValue = 0;
    let totalStock = 0;
    let lowStockCount = 0;
    let prices = [];
    
    productsSnapshot.docs.forEach(doc => {
      const product = doc.data();
      const price = product.price || 0;
      const stock = product.stock || 0;
      const reorderPoint = product.reorderPoint || 10;
      
      totalValue += price * stock;
      totalStock += stock;
      prices.push(price);
      
      if (stock <= reorderPoint) {
        lowStockCount++;
      }
    });
    
    // Calculate stats
    const count = productsSnapshot.size;
    const averagePrice = count > 0 ? totalValue / totalStock : 0;
    const lowestPrice = prices.length > 0 ? Math.min(...prices) : 0;
    const highestPrice = prices.length > 0 ? Math.max(...prices) : 0;
    
    return {
      count,
      totalValue,
      averagePrice,
      lowestPrice,
      highestPrice,
      totalStock,
      lowStockCount
    };
  } catch (error) {
    console.error(`Error fetching stats for category ${category}:`, error);
    return null;
  }
};

// Export utilities
const categoryUtils = {
  getAllCategories,
  getCategoryCounts,
  getCategoryStats,
  DEFAULT_CATEGORIES
};

export default categoryUtils;
</file>

<file path="src/components/inventory/LowStockAlert.jsx">
// src/components/inventory/LowStockAlert.jsx
import { useState } from 'react';

const LowStockAlert = ({ products, onUpdateStock, threshold, onChangeThreshold }) => {
  const [expandedProduct, setExpandedProduct] = useState(null);
  const [stockAdjustment, setStockAdjustment] = useState(0);
  const [customThreshold, setCustomThreshold] = useState(threshold);
  
  // Handler for expanding/collapsing product details
  const toggleProductExpand = (productId) => {
    if (expandedProduct === productId) {
      setExpandedProduct(null);
      setStockAdjustment(0);
    } else {
      setExpandedProduct(productId);
      setStockAdjustment(0);
    }
  };
  
  // Handler for adjusting stock
  const handleStockAdjustment = async (product) => {
    const newStock = Math.max(0, product.stock + stockAdjustment);
    await onUpdateStock(product.id, newStock);
    setExpandedProduct(null);
    setStockAdjustment(0);
  };
  
  // Handler for changing threshold
  const handleThresholdChange = (e) => {
    const value = parseInt(e.target.value, 10);
    if (!isNaN(value) && value >= 0) {
      setCustomThreshold(value);
    }
  };
  
  // Handler for applying new threshold
  const applyThreshold = () => {
    onChangeThreshold(customThreshold);
  };

  return (
    <div className="mt-2 bg-white rounded-lg shadow-md border border-yellow-200 overflow-hidden">
      <div className="p-4 border-b border-yellow-100 bg-yellow-50 flex justify-between items-center">
        <h3 className="text-lg font-medium text-yellow-800">Low Stock Alert</h3>
        <div className="flex items-center space-x-2">
          <label htmlFor="threshold" className="text-sm font-medium text-yellow-700">
            Low stock threshold:
          </label>
          <input
            type="number"
            id="threshold"
            value={customThreshold}
            onChange={handleThresholdChange}
            min="0"
            className="w-16 text-center border-yellow-300 focus:ring-yellow-500 focus:border-yellow-500 rounded-md shadow-sm text-sm"
          />
          <button
            onClick={applyThreshold}
            className="px-2 py-1 bg-yellow-100 text-yellow-800 rounded hover:bg-yellow-200 text-sm"
          >
            Apply
          </button>
        </div>
      </div>
      
      <div className="divide-y divide-gray-100">
        {products.map((product) => (
          <div key={product.id} className="p-4 hover:bg-gray-50">
            <div className="flex justify-between items-center">
              <div className="flex items-center">
                <div className="h-10 w-10 bg-gray-100 rounded-md flex items-center justify-center text-gray-400">
                  {product.imageUrl ? (
                    <img src={product.imageUrl} alt={product.name} className="h-10 w-10 rounded-md object-cover" />
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  )}
                </div>
                <div className="ml-3">
                  <div className="text-sm font-medium text-gray-900">{product.name}</div>
                  <div className="text-xs text-gray-500">SKU: {product.sku || 'N/A'}</div>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <div className="flex flex-col items-end">
                  <div className="text-sm font-medium text-gray-900">${parseFloat(product.price).toFixed(2)}</div>
                  <div className="text-xs font-medium text-red-600">
                    Stock: {product.stock}
                  </div>
                </div>
                <button
                  onClick={() => toggleProductExpand(product.id)}
                  className="flex-shrink-0 p-1 rounded-full text-gray-400 hover:text-gray-500"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 transition-transform duration-200 ${expandedProduct === product.id ? 'transform rotate-180' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
              </div>
            </div>
            
            {expandedProduct === product.id && (
              <div className="mt-4 border-t border-gray-100 pt-4">
                <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center">
                  <div className="mb-4 sm:mb-0">
                    <div className="flex items-center text-sm text-gray-700">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                      <span>Supplier: {product.supplier || 'N/A'}</span>
                    </div>
                    <div className="flex items-center text-sm text-gray-700 mt-1">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                      </svg>
                      <span>Category: {product.category}</span>
                    </div>
                    {product.reorderPoint && (
                      <div className="flex items-center text-sm text-gray-700 mt-1">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                        <span>Reorder Point: {product.reorderPoint}</span>
                      </div>
                    )}
                  </div>
                  
                  <div className="flex items-center">
                    <div className="flex rounded-md shadow-sm">
                      <button
                        type="button"
                        onClick={() => setStockAdjustment(prev => Math.max(0, prev - 1))}
                        className="relative inline-flex items-center px-2 py-1 rounded-l-md border border-gray-300 bg-gray-50 text-gray-500 hover:bg-gray-100"
                      >
                        <span className="sr-only">Decrease</span>
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 12H6" />
                        </svg>
                      </button>
                      <input
                        type="number"
                        className="focus:ring-indigo-500 focus:border-indigo-500 block w-16 min-w-0 border-gray-300 text-center"
                        value={stockAdjustment}
                        onChange={(e) => {
                          const value = parseInt(e.target.value, 10);
                          if (!isNaN(value) && value >= 0) {
                            setStockAdjustment(value);
                          }
                        }}
                        min="0"
                      />
                      <button
                        type="button"
                        onClick={() => setStockAdjustment(prev => prev + 1)}
                        className="relative inline-flex items-center px-2 py-1 rounded-r-md border border-gray-300 bg-gray-50 text-gray-500 hover:bg-gray-100"
                      >
                        <span className="sr-only">Increase</span>
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                      </button>
                    </div>
                    <button
                      onClick={() => handleStockAdjustment(product)}
                      className="ml-3 inline-flex items-center px-3 py-1 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    >
                      Restock
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default LowStockAlert;
</file>

<file path="src/components/inventory/ProductDetails.jsx">
// src/components/inventory/ProductDetails.jsx
import { useState, useEffect } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { getProductById, updateProductStock, deleteProduct } from '../../services/productService';

const ProductDetails = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  
  const [product, setProduct] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [stockAdjustment, setStockAdjustment] = useState(0);
  const [confirmDelete, setConfirmDelete] = useState(false);
  
  // Fetch product data
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        const data = await getProductById(id);
        if (data) {
          setProduct(data);
        } else {
          setError('Product not found');
        }
        setLoading(false);
      } catch (err) {
        console.error('Error fetching product:', err);
        setError('Failed to load product. Please try again later.');
        setLoading(false);
      }
    };
    
    fetchProduct();
  }, [id]);
  
  // Handler for updating stock
  const handleStockUpdate = async () => {
    try {
      const newStock = Math.max(0, product.stock + stockAdjustment);
      await updateProductStock(id, newStock);
      
      // Update local state
      setProduct(prev => ({
        ...prev,
        stock: newStock
      }));
      
      // Reset adjustment
      setStockAdjustment(0);
      
      alert('Stock updated successfully!');
    } catch (err) {
      console.error('Error updating stock:', err);
      alert('Failed to update stock. Please try again.');
    }
  };
  
  // Handler for deleting product
  const handleDeleteProduct = async () => {
    try {
      await deleteProduct(id);
      alert('Product deleted successfully!');
      navigate('/inventory');
    } catch (err) {
      console.error('Error deleting product:', err);
      alert('Failed to delete product. Please try again.');
    }
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="bg-red-50 border-l-4 border-red-400 p-4">
        <div className="flex">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <p className="text-sm text-red-700">{error}</p>
            <div className="mt-4">
              <Link
                to="/inventory"
                className="text-sm font-medium text-red-700 hover:text-red-600"
              >
                &larr; Back to Inventory
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  if (!product) {
    return <div>No product found</div>;
  }

  return (
    <div className="bg-white shadow rounded-lg overflow-hidden">
      {/* Header */}
      <div className="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
        <div className="flex items-center">
          <Link
            to="/inventory"
            className="mr-4 text-indigo-600 hover:text-indigo-800 flex items-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
          </Link>
          <h2 className="text-2xl font-bold text-gray-800">{product.name}</h2>
        </div>
        <div className="flex space-x-2">
          <Link
            to={`/inventory/edit/${id}`}
            className="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
            Edit
          </Link>
          <button
            onClick={() => setConfirmDelete(true)}
            className="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
            Delete
          </button>
        </div>
      </div>
      
      {/* Product Information */}
      <div className="p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Basic Information */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4">Product Information</h3>
            <div className="space-y-4">
              <div className="flex justify-between border-b border-gray-100 pb-2">
                <span className="text-sm text-gray-500">SKU</span>
                <span className="text-sm font-medium text-gray-900">{product.sku || 'N/A'}</span>
              </div>
              <div className="flex justify-between border-b border-gray-100 pb-2">
                <span className="text-sm text-gray-500">Category</span>
                <span className="text-sm font-medium text-gray-900">{product.category}</span>
              </div>
              <div className="flex justify-between border-b border-gray-100 pb-2">
                <span className="text-sm text-gray-500">Price</span>
                <span className="text-sm font-medium text-gray-900">${parseFloat(product.price).toFixed(2)}</span>
              </div>
              {product.costPrice && (
                <div className="flex justify-between border-b border-gray-100 pb-2">
                  <span className="text-sm text-gray-500">Cost Price</span>
                  <span className="text-sm font-medium text-gray-900">${parseFloat(product.costPrice).toFixed(2)}</span>
                </div>
              )}
              {product.supplier && (
                <div className="flex justify-between border-b border-gray-100 pb-2">
                  <span className="text-sm text-gray-500">Supplier</span>
                  <span className="text-sm font-medium text-gray-900">{product.supplier}</span>
                </div>
              )}
              <div className="flex justify-between">
                <span className="text-sm text-gray-500">Last Updated</span>
                <span className="text-sm font-medium text-gray-900">
                  {product.updatedAt ? new Date(product.updatedAt.toDate()).toLocaleString() : 'N/A'}
                </span>
              </div>
            </div>
            
            {product.description && (
              <div className="mt-6">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Description</h4>
                <p className="text-sm text-gray-600">{product.description}</p>
              </div>
            )}
          </div>
          
          {/* Stock Information */}
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4">Stock Information</h3>
            <div className="bg-gray-50 p-4 rounded-md">
              <div className="flex justify-between items-center mb-4">
                <div>
                  <p className="text-sm text-gray-500">Current Stock</p>
                  <p className="text-2xl font-bold text-gray-900">{product.stock}</p>
                </div>
                <div className={`px-3 py-1 rounded-full text-xs font-medium
                  ${product.stock <= 0 
                    ? 'bg-red-100 text-red-800' 
                    : product.stock <= (product.reorderPoint || 10) 
                      ? 'bg-yellow-100 text-yellow-800' 
                      : 'bg-green-100 text-green-800'
                  }`}>
                  {product.stock <= 0 
                    ? 'Out of Stock' 
                    : product.stock <= (product.reorderPoint || 10) 
                      ? 'Low Stock' 
                      : 'In Stock'}
                </div>
              </div>
              
              {product.reorderPoint && (
                <div className="mb-4">
                  <p className="text-sm text-gray-500">Reorder Point</p>
                  <p className="text-lg font-medium text-gray-900">{product.reorderPoint}</p>
                </div>
              )}
              
              <div className="mt-6">
                <label htmlFor="stock-adjustment" className="block text-sm font-medium text-gray-700 mb-2">
                  Adjust Stock
                </label>
                <div className="flex space-x-2">
                  <div className="flex rounded-md shadow-sm flex-1">
                    <button
                      type="button"
                      onClick={() => setStockAdjustment(prev => Math.max(-product.stock, prev - 1))}
                      className="relative inline-flex items-center px-3 py-2 rounded-l-md border border-gray-300 bg-gray-50 text-gray-500 hover:bg-gray-100"
                    >
                      <span className="sr-only">Decrease</span>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 12H6" />
                      </svg>
                    </button>
                    <input
                      type="number"
                      id="stock-adjustment"
                      value={stockAdjustment}
                      onChange={(e) => {
                        const value = parseInt(e.target.value, 10);
                        if (!isNaN(value)) {
                          // Prevent going below -current stock (which would make total stock negative)
                          if (value >= -product.stock) {
                            setStockAdjustment(value);
                          }
                        }
                      }}
                      className="focus:ring-indigo-500 focus:border-indigo-500 block w-full flex-1 rounded-none sm:text-sm border-gray-300 text-center"
                    />
                    <button
                      type="button"
                      onClick={() => setStockAdjustment(prev => prev + 1)}
                      className="relative inline-flex items-center px-3 py-2 rounded-r-md border border-gray-300 bg-gray-50 text-gray-500 hover:bg-gray-100"
                    >
                      <span className="sr-only">Increase</span>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                      </svg>
                    </button>
                  </div>
                  <button
                    onClick={handleStockUpdate}
                    disabled={stockAdjustment === 0}
                    className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${
                      stockAdjustment === 0 
                        ? 'bg-gray-300 cursor-not-allowed' 
                        : stockAdjustment > 0 
                          ? 'bg-green-600 hover:bg-green-700' 
                          : 'bg-red-600 hover:bg-red-700'
                    } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
                  >
                    {stockAdjustment === 0 
                      ? 'No Change' 
                      : stockAdjustment > 0 
                        ? `Add ${stockAdjustment}` 
                        : `Remove ${Math.abs(stockAdjustment)}`}
                  </button>
                </div>
                <div className="mt-2 text-sm text-gray-500">
                  {stockAdjustment !== 0 && (
                    <div>
                      New stock will be: <span className="font-medium">{product.stock + stockAdjustment}</span>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="mt-6 border-t border-gray-200 pt-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Stock History</h4>
                <p className="text-xs text-gray-500">Stock history functionality coming soon...</p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Delete Confirmation Modal */}
      {confirmDelete && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            
            <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
            
            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="sm:flex sm:items-start">
                  <div className="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                    <svg className="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                  </div>
                  <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                    <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                      Delete Product
                    </h3>
                    <div className="mt-2">
                      <p className="text-sm text-gray-500">
                        Are you sure you want to delete this product? This action cannot be undone.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button 
                  type="button" 
                  onClick={handleDeleteProduct}
                  className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
                >
                  Delete
                </button>
                <button 
                  type="button" 
                  onClick={() => setConfirmDelete(false)}
                  className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductDetails;
</file>

<file path="src/components/inventory/ProductImageUpload.jsx">
// src/components/inventory/ProductImageUpload.jsx
import { useState, useEffect } from 'react';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { storage } from '../../firebase/config';

/**
 * Product image upload component specifically for product management
 * Has optimizations for product images and maintains consistent aspect ratios
 */
const ProductImageUpload = ({ 
  initialImage = '',
  onImageUploaded,
  productId = null,
  darkMode = false 
}) => {
  const [imagePreview, setImagePreview] = useState(initialImage);
  const [imageFile, setImageFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState('');
  
  // Update preview if initialImage changes externally
  useEffect(() => {
    if (initialImage) {
      setImagePreview(initialImage);
    }
  }, [initialImage]);

  // Handle file selection
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    // Validate file type
    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!validTypes.includes(file.type)) {
      setError('Please select a valid image file (JPEG, PNG, GIF, or WEBP)');
      return;
    }

    // Validate file size (max 2MB)
    if (file.size > 2 * 1024 * 1024) {
      setError('Image size must be less than 2MB');
      return;
    }

    // Reset error
    setError('');
    setImageFile(file);
    
    // Create preview
    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result);
    };
    reader.readAsDataURL(file);
  };

  // Upload image to Firebase Storage
  const uploadImage = async () => {
    if (!imageFile) {
      if (imagePreview) {
        // If we have a preview but no file, it means we're keeping the existing image
        return initialImage;
      }
      return '';
    }
    
    try {
      setUploading(true);
      setError('');
      
      // Create a unique storage path using product ID if available
      const storagePath = productId 
        ? `product-images/${productId}/${Date.now()}_${imageFile.name}`
        : `product-images/${Date.now()}_${imageFile.name}`;
      
      const storageRef = ref(storage, storagePath);
      
      // Upload the file
      await uploadBytes(storageRef, imageFile);
      
      // Get download URL
      const downloadURL = await getDownloadURL(storageRef);
      
      setUploading(false);
      
      // Call callback
      if (onImageUploaded) {
        onImageUploaded(downloadURL);
      }
      
      return downloadURL;
    } catch (err) {
      console.error('Error uploading image:', err);
      setError('Failed to upload image. Please try again.');
      setUploading(false);
      return null;
    }
  };

  // Remove the image
  const handleRemoveImage = () => {
    setImagePreview('');
    setImageFile(null);
    
    // Call callback
    if (onImageUploaded) {
      onImageUploaded('');
    }
  };

  return (
    <div>
      <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
        Product Image
      </label>
      
      <div className="mt-1 flex items-center space-x-4">
        {/* Image Preview */}
        <div className={`flex-shrink-0 h-20 w-20 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-md overflow-hidden flex items-center justify-center relative`}>
          {imagePreview ? (
            <img src={imagePreview} alt="Preview" className="h-20 w-20 object-cover" />
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className={`h-8 w-8 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          )}
          
          {/* Remove button (shows only when image exists) */}
          {imagePreview && (
            <button
              type="button"
              onClick={handleRemoveImage}
              className={`absolute top-0 right-0 p-1 ${
                darkMode ? 'bg-gray-800 text-gray-200' : 'bg-white text-gray-700'
              } rounded-bl-md hover:bg-red-500 hover:text-white transition-colors`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </button>
          )}
        </div>
        
        {/* Upload Controls */}
        <div className="flex flex-col flex-1">
          {/* File Input */}
          <div className="flex flex-wrap gap-2">
            <input
              type="file"
              accept="image/*"
              id="product-image"
              onChange={handleFileChange}
              className="hidden"
            />
            <label
              htmlFor="product-image"
              className={`inline-flex items-center px-3 py-1.5 ${
                darkMode 
                  ? 'bg-gray-700 border-gray-600 text-gray-200 hover:bg-gray-600'
                  : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
              } border rounded-md text-sm font-medium cursor-pointer transition-colors`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12" />
              </svg>
              {imagePreview ? 'Change' : 'Select Image'}
            </label>
            
            {/* Status indicator */}
            {uploading && (
              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                darkMode ? 'bg-indigo-900/30 text-indigo-400' : 'bg-indigo-100 text-indigo-800'
              }`}>
                <svg className="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Uploading...
              </span>
            )}
          </div>
          
          {/* Error message */}
          {error && (
            <p className={`text-xs mt-1 ${darkMode ? 'text-red-400' : 'text-red-600'}`}>
              {error}
            </p>
          )}
          
          {/* Description */}
          <p className={`text-xs mt-1 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            Recommended: 600√ó600px or larger, JPEG or PNG, under 2MB
          </p>
        </div>
      </div>
    </div>
  );
};

export default ProductImageUpload;
</file>

<file path="src/components/inventory/productService.js">
// src/services/productService.js
import { 
  collection, 
  getDocs, 
  getDoc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  doc, 
  query, 
  where, 
  orderBy, 
  limit 
} from 'firebase/firestore';
import { db } from '../firebase/config';

const COLLECTION_NAME = 'products';

/**
 * Fetch all products from Firestore
 * @returns {Promise<Array>} - Array of product objects with id
 */
export const getAllProducts = async () => {
  try {
    const productsRef = collection(db, COLLECTION_NAME);
    const productsSnapshot = await getDocs(productsRef);
    
    return productsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error('Error fetching products:', error);
    throw error;
  }
};

/**
 * Fetch products with low stock levels
 * @param {number} threshold - The stock threshold to use (default: 10)
 * @returns {Promise<Array>} - Array of low stock product objects
 */
export const getLowStockProducts = async (threshold = 10) => {
  try {
    const productsRef = collection(db, COLLECTION_NAME);
    const q = query(
      productsRef,
      where('stock', '<=', threshold),
      orderBy('stock')
    );
    
    const productsSnapshot = await getDocs(q);
    
    return productsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error('Error fetching low stock products:', error);
    throw error;
  }
};

/**
 * Fetch a single product by ID
 * @param {string} id - The product ID to fetch
 * @returns {Promise<Object|null>} - The product object or null if not found
 */
export const getProductById = async (id) => {
  try {
    const productRef = doc(db, COLLECTION_NAME, id);
    const productSnap = await getDoc(productRef);
    
    if (productSnap.exists()) {
      return {
        id: productSnap.id,
        ...productSnap.data()
      };
    } else {
      return null;
    }
  } catch (error) {
    console.error(`Error fetching product with ID ${id}:`, error);
    throw error;
  }
};

/**
 * Search for products by name or SKU
 * @param {string} searchTerm - The search term to use
 * @returns {Promise<Array>} - Array of matching product objects
 */
export const searchProducts = async (searchTerm) => {
  try {
    // Firebase doesn't support direct text search, so we need to get all products
    // and filter on the client side
    const products = await getAllProducts();
    
    return products.filter(product => 
      product.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
      (product.sku && product.sku.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (product.description && product.description.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  } catch (error) {
    console.error('Error searching products:', error);
    throw error;
  }
};

/**
 * Create a new product
 * @param {Object} productData - The product data to add
 * @returns {Promise<string>} - The ID of the newly created product
 */
export const createProduct = async (productData) => {
  try {
    // Add timestamps
    const dataWithTimestamps = {
      ...productData,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    const docRef = await addDoc(collection(db, COLLECTION_NAME), dataWithTimestamps);
    return docRef.id;
  } catch (error) {
    console.error('Error creating product:', error);
    throw error;
  }
};

/**
 * Update an existing product
 * @param {string} id - The ID of the product to update
 * @param {Object} productData - The updated product data
 * @returns {Promise<void>}
 */
export const updateProduct = async (id, productData) => {
  try {
    const productRef = doc(db, COLLECTION_NAME, id);
    
    // Add updated timestamp
    const dataWithTimestamp = {
      ...productData,
      updatedAt: new Date()
    };
    
    await updateDoc(productRef, dataWithTimestamp);
  } catch (error) {
    console.error(`Error updating product with ID ${id}:`, error);
    throw error;
  }
};

/**
 * Update only the stock of a product
 * @param {string} id - The ID of the product
 * @param {number} newStock - The new stock level
 * @returns {Promise<void>}
 */
export const updateProductStock = async (id, newStock) => {
  try {
    const productRef = doc(db, COLLECTION_NAME, id);
    
    await updateDoc(productRef, {
      stock: newStock,
      updatedAt: new Date()
    });
  } catch (error) {
    console.error(`Error updating stock for product with ID ${id}:`, error);
    throw error;
  }
};

/**
 * Delete a product
 * @param {string} id - The ID of the product to delete
 * @returns {Promise<void>}
 */
export const deleteProduct = async (id) => {
  try {
    const productRef = doc(db, COLLECTION_NAME, id);
    await deleteDoc(productRef);
  } catch (error) {
    console.error(`Error deleting product with ID ${id}:`, error);
    throw error;
  }
};

/**
 * Get products by category
 * @param {string} category - The category to filter by
 * @returns {Promise<Array>} - Array of products in the specified category
 */
export const getProductsByCategory = async (category) => {
  try {
    const productsRef = collection(db, COLLECTION_NAME);
    const q = query(
      productsRef,
      where('category', '==', category)
    );
    
    const productsSnapshot = await getDocs(q);
    
    return productsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error(`Error fetching products in category ${category}:`, error);
    throw error;
  }
};

// Export all functions as a service object
const productService = {
  getAllProducts,
  getLowStockProducts,
  getProductById,
  searchProducts,
  createProduct,
  updateProduct,
  updateProductStock,
  deleteProduct,
  getProductsByCategory
};

export default productService;
</file>

<file path="src/context/ThemeContext.jsx">
// src/context/ThemeContext.jsx
import { createContext, useState, useEffect, useContext } from 'react';

export const ThemeContext = createContext(null);

export const ThemeProvider = ({ children }) => {
  // Check local storage for user's theme preference or fallback to system preference
  const [darkMode, setDarkMode] = useState(() => {
    // First try to get from localStorage
    const savedTheme = localStorage.getItem('wholesaler-theme');
    if (savedTheme) {
      return savedTheme === 'dark';
    }
    // Otherwise check system preference
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return true;
    }
    // Default to light mode
    return false;
  });

  // Toggle between light and dark mode
  const toggleDarkMode = () => {
    setDarkMode(prevMode => !prevMode);
  };

  // Update localStorage and document class when darkMode changes
  useEffect(() => {
    // Update localStorage
    localStorage.setItem('wholesaler-theme', darkMode ? 'dark' : 'light');
    
    // Update document class for global styling
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }, [darkMode]);

  // Listen for system preference changes
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = (e) => {
      // Only apply if user hasn't manually set a preference
      if (!localStorage.getItem('wholesaler-theme')) {
        setDarkMode(e.matches);
      }
    };
    
    // Add listener
    if (mediaQuery.addEventListener) {
      mediaQuery.addEventListener('change', handleChange);
    } else {
      // For older browsers
      mediaQuery.addListener(handleChange);
    }
    
    // Clean up
    return () => {
      if (mediaQuery.removeEventListener) {
        mediaQuery.removeEventListener('change', handleChange);
      } else {
        mediaQuery.removeListener(handleChange);
      }
    };
  }, []);

  return (
    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>
      {children}
    </ThemeContext.Provider>
  );
};

// Custom hook to use the theme context
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === null) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

export default ThemeProvider;
</file>

<file path="src/utils/fakerData.js">
// src/utils/fakerData.js - Enhanced version
import { collection, addDoc, writeBatch, serverTimestamp, doc, setDoc, getDocs, deleteDoc, Timestamp } from 'firebase/firestore';
import { db } from '../firebase/config';

/**
 * Generate random data for the dashboard with enhanced support for all components
 */
export const generateFakerData = async (options = {}) => {
  try {
    const { 
      productsCount = 25, 
      ordersCount = 30, 
      activitiesCount = 20,
      clearExisting = true,
      lowStockThreshold = 5
    } = options;
    
    // Clear existing data if requested
    if (clearExisting) {
      await clearCollections(['products', 'orders', 'activities', 'metrics']);
    }
    
    // Generate and add products
    const products = generateProducts(productsCount, lowStockThreshold);
    await addProductsToFirestore(products);
    
    // Generate and add orders
    const orders = generateOrders(ordersCount, products);
    await addOrdersToFirestore(orders);
    
    // Generate and add activities
    const activities = generateActivities(activitiesCount, products, orders);
    await addActivitiesToFirestore(activities);
    
    // Generate and add metrics
    const metrics = generateMetrics(orders, products);
    await addMetricsToFirestore(metrics);
    
    return {
      productsCount: products.length,
      ordersCount: orders.length,
      activitiesCount: activities.length,
      metricsAdded: true,
      lowStockCount: products.filter(p => p.stock <= lowStockThreshold).length
    };
  } catch (error) {
    console.error('Error generating random data:', error);
    throw error;
  }
};

/**
 * Clear collections for fresh data
 */
const clearCollections = async (collectionNames) => {
  try {
    for (const collectionName of collectionNames) {
      console.log(`Clearing ${collectionName} collection...`);
      const snapshot = await getDocs(collection(db, collectionName));
      
      const batch = writeBatch(db);
      let count = 0;
      const batchSize = 500; // Firestore batch limit
      
      snapshot.docs.forEach((doc) => {
        batch.delete(doc.ref);
        count++;
        
        // Commit batch when reaching limit
        if (count >= batchSize) {
          batch.commit();
          count = 0;
        }
      });
      
      // Commit any remaining deletes
      if (count > 0) {
        await batch.commit();
      }
      
      console.log(`Cleared ${snapshot.size} documents from ${collectionName}`);
    }
  } catch (error) {
    console.error('Error clearing collections:', error);
    throw error;
  }
};

/**
 * Generate random products with diverse stock levels
 */
const generateProducts = (count, lowStockThreshold) => {
  const categories = ['Electronics', 'Office Supplies', 'Furniture', 'Clothing', 'Kitchen'];
  const products = [];
  
  // Product name templates
  const productTemplates = {
    'Electronics': ['Laptop', 'Smartphone', 'Tablet', 'Monitor', 'Keyboard', 'Mouse', 'Headphones', 'Speaker'],
    'Office Supplies': ['Pen Set', 'Notebook', 'Stapler', 'Paper Clips', 'Binder', 'Desk Organizer'],
    'Furniture': ['Desk', 'Chair', 'Bookshelf', 'Filing Cabinet', 'Coffee Table', 'Sofa'],
    'Clothing': ['T-Shirt', 'Jeans', 'Sweater', 'Jacket', 'Socks', 'Hat', 'Scarf'],
    'Kitchen': ['Blender', 'Toaster', 'Coffee Maker', 'Knife Set', 'Cutting Board', 'Plate Set']
  };
  
  // Brands
  const brands = ['TechPro', 'OfficeMate', 'HomeStyle', 'FashionPlus', 'KitchenWare'];
  
  // Generate diverse products
  for (let i = 0; i < count; i++) {
    // Select a random category
    const category = categories[Math.floor(Math.random() * categories.length)];
    
    // Select a random product template for the category
    const templates = productTemplates[category] || productTemplates['Electronics'];
    const productType = templates[Math.floor(Math.random() * templates.length)];
    
    // Select a random brand
    const brand = brands[Math.floor(Math.random() * brands.length)];
    
    // Generate stock - ensure some products have low stock for dashboard alerts
    let stock;
    if (i < count * 0.2) { // 20% of products have low stock
      stock = Math.max(0, Math.floor(Math.random() * lowStockThreshold));
    } else {
      stock = Math.floor(10 + Math.random() * 90); // Normal stock: 10-100
    }
    
    // Generate price based on category
    let basePrice;
    switch(category) {
      case 'Electronics':
        basePrice = 100 + Math.random() * 900;
        break;
      case 'Office Supplies':
        basePrice = 5 + Math.random() * 95;
        break;
      case 'Furniture':
        basePrice = 150 + Math.random() * 850;
        break;
      case 'Clothing':
        basePrice = 20 + Math.random() * 180;
        break;
      case 'Kitchen':
        basePrice = 30 + Math.random() * 270;
        break;
      default:
        basePrice = 25 + Math.random() * 75;
    }
    
    // Format price to 2 decimal places
    const price = parseFloat(basePrice.toFixed(2));
    
    // Calculate cost price (60-80% of selling price)
    const costPercent = 0.6 + Math.random() * 0.2;
    const costPrice = parseFloat((price * costPercent).toFixed(2));
    
    // Generate product
    const product = {
      name: `${brand} ${productType} ${100 + i}`,
      description: `High-quality ${productType.toLowerCase()} for your everyday needs.`,
      category,
      price,
      costPrice,
      stock,
      sku: `SKU-${100000 + i}`,
      supplier: brand + ' Supplies Inc.',
      reorderPoint: Math.floor(lowStockThreshold * (1 + Math.random())), // Slightly above threshold
      imageUrl: `https://source.unsplash.com/300x300/?${productType.toLowerCase()}`,
      createdAt: new Date(Date.now() - Math.floor(Math.random() * 30 * 24 * 60 * 60 * 1000)) // Random date in the past
    };
    
    products.push(product);
  }
  
  return products;
};

/**
 * Add products to Firestore
 */
const addProductsToFirestore = async (products) => {
  try {
    const productIds = [];
    
    for (const product of products) {
      const docRef = await addDoc(collection(db, 'products'), {
        ...product,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      });
      
      // Store the document ID for reference
      productIds.push({id: docRef.id, ...product});
    }
    
    console.log(`${products.length} products added successfully`);
    return productIds;
  } catch (error) {
    console.error('Error adding products:', error);
    throw error;
  }
};

/**
 * Generate random orders with references to products
 */
const generateOrders = (count, products) => {
  const statuses = ['pending', 'processing', 'shipped', 'completed', 'cancelled'];
  const customerNames = [
    'John Smith', 'Jane Doe', 'Mike Johnson', 'Sarah Williams', 'David Brown', 
    'Emily Davis', 'Robert Wilson', 'Jennifer Taylor', 'Michael Miller', 'Lisa Anderson'
  ];
  
  const orders = [];
  
  // Generate orders with proper distribution of dates for trends
  for (let i = 0; i < count; i++) {
    // Generate date - distribute over the last 6 months for trend data
    const monthOffset = Math.floor(Math.random() * 6); // 0-5 months ago
    const dayOffset = Math.floor(Math.random() * 30); // 0-29 days
    
    const date = new Date();
    date.setMonth(date.getMonth() - monthOffset);
    date.setDate(date.getDate() - dayOffset);
    
    // Generate customer
    const customerName = customerNames[Math.floor(Math.random() * customerNames.length)];
    
    // Generate status - make newer orders more likely to be pending/processing
    let status;
    if (monthOffset === 0 && dayOffset < 7) { // Within the last week
      // 70% chance of pending/processing for recent orders
      status = Math.random() < 0.7 
        ? (Math.random() < 0.5 ? 'pending' : 'processing') 
        : statuses[Math.floor(Math.random() * statuses.length)];
    } else {
      // Older orders more likely to be completed
      status = Math.random() < 0.6 
        ? 'completed' 
        : statuses[Math.floor(Math.random() * statuses.length)];
    }
    
    // Generate order items (1-5 items)
    const itemCount = 1 + Math.floor(Math.random() * 5);
    const items = [];
    let total = 0;
    
    // Add random products
    const usedProductIndices = new Set();
    for (let j = 0; j < itemCount; j++) {
      let productIndex;
      
      // Make sure we don't use the same product twice
      do {
        productIndex = Math.floor(Math.random() * products.length);
      } while (usedProductIndices.has(productIndex) && usedProductIndices.size < products.length);
      
      if (usedProductIndices.size >= products.length) break;
      
      usedProductIndices.add(productIndex);
      const product = products[productIndex];
      
      // Random quantity (1-5)
      const quantity = 1 + Math.floor(Math.random() * 5);
      const itemTotal = product.price * quantity;
      
      items.push({
        productId: product.id || `product-${Math.floor(Math.random() * 1000)}`, // Use ID if available or generate mock ID
        productName: product.name,
        productSku: product.sku,
        category: product.category,
        price: product.price,
        quantity,
        total: parseFloat(itemTotal.toFixed(2))
      });
      
      total += itemTotal;
    }
    
    // Format total to 2 decimal places
    total = parseFloat(total.toFixed(2));
    
    // Generate shipping address
    const shippingAddress = {
      street: `${1000 + Math.floor(Math.random() * 9000)} Main Street`,
      city: ['Springfield', 'Riverdale', 'Oakville', 'Franklin', 'Millfield'][Math.floor(Math.random() * 5)],
      state: ['CA', 'NY', 'TX', 'IL', 'FL'][Math.floor(Math.random() * 5)],
      zipCode: `${10000 + Math.floor(Math.random() * 90000)}`,
      country: 'USA'
    };
    
    // Create order object
    const order = {
      customerName,
      customerEmail: customerName.toLowerCase().replace(' ', '.') + '@example.com',
      status,
      items,
      itemCount,
      total,
      tax: parseFloat((total * 0.08).toFixed(2)),
      shippingCost: parseFloat((5.99 + Math.random() * 10).toFixed(2)),
      shippingAddress,
      paymentMethod: Math.random() < 0.7 ? 'Credit Card' : 'PayPal',
      notes: Math.random() < 0.3 ? 'Please deliver after 5pm' : '',
      createdAt: date
    };
    
    // Calculate grand total
    order.grandTotal = parseFloat((order.total + order.tax + order.shippingCost).toFixed(2));
    
    orders.push(order);
  }
  
  return orders;
};

/**
 * Add orders to Firestore
 */
const addOrdersToFirestore = async (orders) => {
  try {
    const orderIds = [];
    
    for (const order of orders) {
      // Extract items for subcollection
      const { items, ...orderDetails } = order;
      
      // Create order document
      const orderRef = await addDoc(collection(db, 'orders'), {
        ...orderDetails,
        createdAt: Timestamp.fromDate(order.createdAt), // Use Firestore Timestamp
        updatedAt: serverTimestamp()
      });
      
      // Add order items as a subcollection
      for (const item of items) {
        await addDoc(collection(db, 'orders', orderRef.id, 'orderItems'), item);
      }
      
      // Store the document ID for reference
      orderIds.push({id: orderRef.id, ...order});
    }
    
    console.log(`${orders.length} orders added successfully`);
    return orderIds;
  } catch (error) {
    console.error('Error adding orders:', error);
    throw error;
  }
};

/**
 * Generate diverse activities for dashboard timeline
 */
const generateActivities = (count, products, orders) => {
  const activities = [];
  const types = ['order', 'inventory', 'user', 'system'];
  
  // Ensure we have enough recent activities for the dashboard
  const recentActivitiesCount = Math.min(10, Math.ceil(count * 0.4)); // At least 40% of activities are recent
  
  // Activity templates
  const templates = {
    order: [
      { template: 'New order placed by {customerName}', recent: true },
      { template: 'Order status updated to {status}', recent: false },
      { template: 'Order shipped to {customerName}', recent: false },
      { template: 'Order completed for {customerName}', recent: false }
    ],
    inventory: [
      { template: 'Product "{productName}" is low on stock ({stock} remaining)', recent: true },
      { template: 'Stock updated for {productName} (+{quantity} units)', recent: false },
      { template: 'New product added: {productName}', recent: false },
      { template: 'Price updated for {productName}', recent: false }
    ],
    user: [
      { template: 'User {userName} logged in', recent: true },
      { template: 'User {userName} updated profile', recent: false },
      { template: 'New user account created: {userName}', recent: false }
    ],
    system: [
      { template: 'System update completed successfully', recent: true },
      { template: 'Database backup completed', recent: false },
      { template: 'Daily report generated', recent: false }
    ]
  };
  
  // Generate activities
  for (let i = 0; i < count; i++) {
    // Determine if this should be a recent activity
    const isRecent = i < recentActivitiesCount;
    
    // Select activity type with weighting
    let activityType;
    const typeRoll = Math.random();
    
    if (typeRoll < 0.4) {
      activityType = 'order';
    } else if (typeRoll < 0.7) {
      activityType = 'inventory';
    } else if (typeRoll < 0.9) {
      activityType = 'user';
    } else {
      activityType = 'system';
    }
    
    // Select template
    const eligibleTemplates = isRecent 
      ? templates[activityType].filter(t => t.recent) 
      : templates[activityType];
    
    const templateObj = eligibleTemplates.length > 0 
      ? eligibleTemplates[Math.floor(Math.random() * eligibleTemplates.length)]
      : templates[activityType][Math.floor(Math.random() * templates[activityType].length)];
    
    let description = templateObj.template;
    
    // Fill in template variables
    if (activityType === 'order' && orders.length > 0) {
      const order = orders[Math.floor(Math.random() * orders.length)];
      description = description
        .replace('{customerName}', order.customerName)
        .replace('{status}', order.status);
    } else if (activityType === 'inventory' && products.length > 0) {
      const product = products[Math.floor(Math.random() * products.length)];
      description = description
        .replace('{productName}', product.name)
        .replace('{stock}', product.stock)
        .replace('{quantity}', Math.floor(5 + Math.random() * 20));
    } else if (activityType === 'user') {
      const users = ['admin', 'manager', 'sales', 'support', 'warehouse'];
      description = description.replace('{userName}', users[Math.floor(Math.random() * users.length)]);
    }
    
    // Generate time - recent activities within the last day, others older
    let activityDate;
    if (isRecent) {
      // Recent activities (last 24 hours)
      const minutesAgo = Math.floor(Math.random() * 24 * 60);
      activityDate = new Date(Date.now() - minutesAgo * 60 * 1000);
    } else {
      // Older activities (last 30 days)
      const daysAgo = 1 + Math.floor(Math.random() * 29);
      activityDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);
    }
    
    // Create activity
    const activity = {
      type: activityType,
      description,
      createdAt: activityDate
    };
    
    // Add reference IDs for linking
    if (activityType === 'order' && orders.length > 0) {
      const order = orders[Math.floor(Math.random() * orders.length)];
      activity.orderId = order.id;
    } else if (activityType === 'inventory' && products.length > 0) {
      const product = products[Math.floor(Math.random() * products.length)];
      activity.productId = product.id;
    }
    
    activities.push(activity);
  }
  
  return activities;
};

/**
 * Add activities to Firestore
 */
const addActivitiesToFirestore = async (activities) => {
  try {
    for (const activity of activities) {
      await addDoc(collection(db, 'activities'), {
        ...activity,
        createdAt: Timestamp.fromDate(activity.createdAt) // Use Firestore Timestamp
      });
    }
    console.log(`${activities.length} activities added successfully`);
  } catch (error) {
    console.error('Error adding activities:', error);
    throw error;
  }
};

/**
 * Generate metrics with monthly data for charts
 */
const generateMetrics = (orders, products) => {
  // Calculate monthly revenue data
  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  const today = new Date();
  const monthlyRevenue = [];
  
  // Generate data for the last 6 months
  for (let i = 5; i >= 0; i--) {
    const month = new Date();
    month.setMonth(today.getMonth() - i);
    
    const monthName = monthNames[month.getMonth()];
    const monthYear = month.getFullYear();
    const monthStart = new Date(monthYear, month.getMonth(), 1);
    const monthEnd = new Date(monthYear, month.getMonth() + 1, 0);
    
    // Sum revenue for this month
    const monthRevenue = orders
      .filter(order => order.createdAt >= monthStart && order.createdAt <= monthEnd)
      .reduce((sum, order) => sum + order.total, 0);
    
    // Add some randomness for smoother trends
    const adjustedRevenue = Math.max(
      2000, // Minimum value
      monthRevenue + (monthRevenue * (Math.random() * 0.2 - 0.1)) // +/- 10%
    );
    
    monthlyRevenue.push({
      month: monthName,
      revenue: parseFloat(adjustedRevenue.toFixed(2))
    });
  }
  
  // Calculate inventory by category
  const inventoryByCategory = {};
  products.forEach(product => {
    if (!inventoryByCategory[product.category]) {
      inventoryByCategory[product.category] = {
        count: 0,
        value: 0
      };
    }
    
    inventoryByCategory[product.category].count++;
    inventoryByCategory[product.category].value += product.price * product.stock;
  });
  
  // Format inventory data for charts
  const categoryData = Object.keys(inventoryByCategory).map(category => ({
    category,
    count: inventoryByCategory[category].count,
    value: parseFloat(inventoryByCategory[category].value.toFixed(2))
  }));
  
  // Calculate total revenue
  const totalRevenue = orders.reduce((sum, order) => sum + order.total, 0);
  
  // Calculate comparison data (current vs previous period)
  const now = new Date();
  const thisMonth = now.getMonth();
  const lastMonth = (thisMonth - 1 + 12) % 12; // Handle January correctly
  
  const thisMonthRevenue = orders
    .filter(order => order.createdAt.getMonth() === thisMonth)
    .reduce((sum, order) => sum + order.total, 0);
    
  const lastMonthRevenue = orders
    .filter(order => order.createdAt.getMonth() === lastMonth)
    .reduce((sum, order) => sum + order.total, 0);
  
  // Calculate percent change
  const percentChange = lastMonthRevenue === 0 
    ? 100 
    : Math.round(((thisMonthRevenue - lastMonthRevenue) / lastMonthRevenue) * 100);
  
  // Create metrics object
  return {
    revenue: {
      total: parseFloat(totalRevenue.toFixed(2)),
      percentChange,
      monthly: monthlyRevenue,
      lastUpdated: new Date()
    },
    inventory: {
      categories: categoryData,
      usagePercent: 32, // Mock percentage
      percentChange: -4, // Mock change
      lastUpdated: new Date()
    },
    orders: {
      total: orders.length,
      percentChange: 8, // Mock change
      lastUpdated: new Date()
    }
  };
};

/**
 * Add metrics to Firestore
 */
const addMetricsToFirestore = async (metrics) => {
  try {
    await setDoc(doc(db, 'metrics', 'current'), {
      ...metrics,
      lastUpdated: serverTimestamp()
    });
    console.log('Metrics added successfully');
  } catch (error) {
    console.error('Error adding metrics:', error);
    throw error;
  }
};

export default generateFakerData;
</file>

<file path="src/utils/imageUtils.js">
// src/utils/imageUtils.js

/**
 * Generates a consistent placeholder image URL based on product attributes
 * 
 * @param {Object} product - Product data
 * @param {string} product.name - Product name
 * @param {string} product.category - Product category (optional)
 * @returns {string} Image URL
 */
export const generateProductImageUrl = (product) => {
  // Create a seed based on product name and category for consistency
  const seed = `${product.category || ''}-${product.name}`.replace(/\s+/g, '-').toLowerCase();
  
  // Different image styles based on category
  let imageService = 'https://picsum.photos';
  let width = 400;
  let height = 300;
  
  if (product.category) {
    // Customize dimensions or style based on category
    switch(product.category.toLowerCase()) {
      case 'electronics':
        width = 500; 
        height = 400;
        break;
      case 'furniture':
        width = 450;
        height = 350;
        break;
      case 'office supplies':
        width = 400;
        height = 300;
        break;
      case 'stationery':
        width = 350;
        height = 250;
        break;
      // Add more categories as needed
    }
  }
  
  // Return URL with seed for consistent image
  return `${imageService}/seed/${seed}/${width}/${height}`;
};
</file>

<file path="src/utils/seedFirebase.js">
// src/utils/seedFirebase.js - Smaller, more reliable seeder
import { collection, addDoc, getDocs, doc, setDoc, serverTimestamp, deleteDoc, writeBatch } from 'firebase/firestore';
import { db } from '../firebase/config';

/**
 * Function to seed the database with sample data
 * This version is smaller and more reliable
 */
export const seedFirebaseData = async (forceReseed = false) => {
  try {
    console.log('Starting Firebase data seeding process...');
    
    // Check if data already exists first
    const productsRef = collection(db, 'products');
    const productsSnapshot = await getDocs(productsRef);
    
    // If we already have products and not forcing reseed, just return
    if (!productsSnapshot.empty && !forceReseed) {
      console.log(`Using ${productsSnapshot.size} existing products. Set forceReseed to true to recreate data.`);
      return true;
    }
    
    // If we're here, we need to seed data
    if (forceReseed) {
      console.log('Force reseed enabled - clearing existing data...');
      await clearCollection('products');
      await clearCollection('orders');
      await clearCollection('activities');
    }
    
    // Generate small dataset to prevent timeouts
    console.log('Creating sample data...');
    
    // Create products
    const products = await seedProducts(8); // Smaller number
    
    // Create orders
    const orders = await seedOrders(5, products); // Smaller number
    
    // Create activities
    await seedActivities(5, products, orders); // Smaller number
    
    // Create metrics
    await seedMetrics();
    
    console.log('Seeding process completed successfully!');
    
    return true;
  } catch (error) {
    console.error('Error seeding Firebase data:', error);
    throw error; // Rethrow to handle in the UI
  }
};

/**
 * Clear a collection to start fresh
 */
const clearCollection = async (collectionName) => {
  try {
    const collectionRef = collection(db, collectionName);
    const snapshot = await getDocs(collectionRef);
    
    // Use batched writes for efficiency
    const batchSize = 100;
    let batch = writeBatch(db);
    let count = 0;
    
    snapshot.docs.forEach((doc) => {
      batch.delete(doc.ref);
      count++;
      
      // Commit batch when it reaches batchSize
      if (count === batchSize) {
        batch.commit();
        batch = writeBatch(db);
        count = 0;
      }
    });
    
    // Commit any remaining deletes
    if (count > 0) {
      await batch.commit();
    }
    
    console.log(`Cleared ${snapshot.size} documents from ${collectionName}`);
  } catch (error) {
    console.error(`Error clearing ${collectionName}:`, error);
    throw error;
  }
};

/**
 * Seed products with realistic data
 */
const seedProducts = async (count) => {
  const categories = ['Electronics', 'Office Supplies', 'Furniture'];
  const suppliers = ['Office Essentials Inc.', 'TechGear Supplies'];
  
  const productNames = [
    "Wireless Keyboard",
    "Ergonomic Mouse",
    "27-inch Monitor",
    "Desk Lamp",
    "Office Chair",
    "Standing Desk",
    "USB Hub",
    "Laptop Stand",
    "Webcam HD",
    "Noise-Cancelling Headphones"
  ];
  
  const products = [];
  
  for (let i = 0; i < count; i++) {
    const category = categories[i % categories.length];
    const name = productNames[i % productNames.length] + " " + (i + 1);
    const price = 20 + (i * 15); // Simple price formula
    const stock = Math.max(3, (i * 5) % 25); // Simple stock formula
    
    const product = {
      name,
      sku: `SKU-${100 + i}`,
      category,
      price,
      stock,
      description: `High-quality ${name.toLowerCase()} for office and home use.`,
      imageUrl: `https://source.unsplash.com/400x300/?${category.toLowerCase().replace(' ', '-')},product`,
      costPrice: price * 0.6, // 60% of selling price
      supplier: suppliers[i % suppliers.length],
      reorderPoint: 5,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    };
    
    const docRef = await addDoc(collection(db, 'products'), product);
    
    products.push({
      id: docRef.id,
      ...product
    });
  }
  
  console.log(`Created ${products.length} products`);
  return products;
};

/**
 * Seed orders with realistic data
 */
const seedOrders = async (count, products) => {
  const statuses = ['pending', 'completed', 'shipped'];
  const customers = [
    "John Smith",
    "Sarah Johnson",
    "Michael Brown",
    "Emily Wilson",
    "David Clark"
  ];
  
  const orders = [];
  
  for (let i = 0; i < count; i++) {
    // Create 1-3 items per order
    const itemCount = 1 + (i % 3);
    const items = [];
    let totalAmount = 0;
    
    // Select products for order items
    for (let j = 0; j < itemCount; j++) {
      const prodIndex = (i + j) % products.length;
      const product = products[prodIndex];
      const quantity = 1 + (j % 3);
      const itemTotal = product.price * quantity;
      totalAmount += itemTotal;
      
      items.push({
        productId: product.id,
        productName: product.name,
        price: product.price,
        quantity
      });
    }
    
    // Determine date (simple formula for different dates)
    const orderDate = new Date();
    orderDate.setDate(orderDate.getDate() - (i * 2)); // Each order 2 days apart
    
    // Create the order
    const order = {
      customerName: customers[i % customers.length],
      customerEmail: `customer${i+1}@example.com`,
      status: statuses[i % statuses.length],
      total: parseFloat(totalAmount.toFixed(2)),
      itemCount,
      shippingAddress: {
        street: `${100 + i} Main St`,
        city: "Anytown",
        state: "ST",
        zipCode: "12345"
      },
      createdAt: orderDate,
      updatedAt: orderDate
    };
    
    // Add to Firestore
    const orderRef = await addDoc(collection(db, 'orders'), {
      ...order,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    });
    
    // Add order items as a subcollection
    for (const item of items) {
      await addDoc(collection(db, 'orders', orderRef.id, 'orderItems'), item);
    }
    
    orders.push({
      id: orderRef.id,
      ...order,
      items
    });
  }
  
  console.log(`Created ${orders.length} orders`);
  return orders;
};

/**
 * Seed simple activity log
 */
const seedActivities = async (count, products, orders) => {
  const activityTypes = ['order', 'inventory'];
  
  for (let i = 0; i < count; i++) {
    const activityType = activityTypes[i % activityTypes.length];
    let description = '';
    
    // Randomize timestamp within last 7 days
    const activityDate = new Date();
    activityDate.setDate(activityDate.getDate() - (i % 7));
    activityDate.setHours(9 + (i % 8)); // Business hours
    
    // Create description and details based on activity type
    if (activityType === 'order') {
      const orderIndex = i % orders.length;
      const order = orders[orderIndex];
      const actions = ['placed', 'completed', 'shipped'];
      const action = actions[i % actions.length];
      
      description = `Order #${order.id.slice(0, 6)} ${action} for ${order.customerName}`;
    } else {
      const productIndex = i % products.length;
      const product = products[productIndex];
      const actions = ['added', 'updated', 'restocked'];
      const action = actions[i % actions.length];
      const quantity = 5 + (i * 2);
      
      description = `${product.name} ${action} (${quantity} units)`;
    }
    
    // Add to Firestore
    await addDoc(collection(db, 'activities'), {
      type: activityType,
      description,
      createdAt: activityDate,
      timestamp: serverTimestamp()
    });
  }
  
  console.log(`Created ${count} activities`);
};

/**
 * Seed metrics for dashboard
 */
const seedMetrics = async () => {
  const metrics = {
    revenue: {
      total: 7320.80,
      percentChange: 16,
      lastUpdated: serverTimestamp()
    },
    orders: {
      total: 18,
      percentChange: 8,
      lastUpdated: serverTimestamp()
    },
    inventory: {
      usagePercent: 32,
      percentChange: -4,
      lastUpdated: serverTimestamp()
    }
  };
  
  await setDoc(doc(db, 'metrics', 'current'), metrics);
  console.log('Created metrics');
};

export default seedFirebaseData;
</file>

<file path="src/components/common/ProtectedRoute.jsx">
// src/components/common/ProtectedRoute.jsx

import { Navigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth'; // Custom hook to access authentication state

// This component protects routes by allowing only authenticated users to access them
const ProtectedRoute = ({ children }) => {
  // Destructure the currentUser and loading state from the custom auth hook
  const { currentUser, loading } = useAuth();
  
  // While the authentication status is being determined, show a loading spinner
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        {/* Spinner animation */}
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
      </div>
    );
  }
  
  // If no user is authenticated, redirect to the login page
  if (!currentUser) {
    return <Navigate to="/login" />;
  }
  
  // If the user is authenticated, render the protected child components
  return children;
};

export default ProtectedRoute;
</file>

<file path="src/components/DashboardSelector.jsx">
// src/components/DashboardSelector.jsx - Updated with GuestDashboard
import { useAuth } from '../hooks/useAuth';
import Dashboard from '../pages/Dashboard';
import EnhancedDashboard from '../pages/EnhancedDashboard';
import GuestDashboard from '../pages/GuestDashboard';
import { useState, useEffect } from 'react';

const DashboardSelector = () => {
  const { user } = useAuth();
  const [dashboardType, setDashboardType] = useState('guest'); // Default to guest view

  // Determine dashboard based on user role
  useEffect(() => {
    if (!user) {
      // No user logged in, show guest dashboard
      setDashboardType('guest');
    } else if (user?.role === 'admin' || user?.role === 'manager') {
      // Admin or manager gets enhanced dashboard
      setDashboardType('enhanced');
    } else {
      // Regular users get the original dashboard
      setDashboardType('regular');
    }

    // Check for URL param override for testing purposes
    const urlParams = new URLSearchParams(window.location.search);
    const dashboardParam = urlParams.get('dashboard');
    if (dashboardParam === 'enhanced' || dashboardParam === 'regular' || dashboardParam === 'guest') {
      setDashboardType(dashboardParam);
    }
  }, [user]);

  // Manual dashboard switcher for development/testing purposes
  const toggleDashboard = () => {
    if (dashboardType === 'enhanced') {
      setDashboardType('regular');
    } else if (dashboardType === 'regular') {
      setDashboardType('guest');
    } else {
      setDashboardType('enhanced');
    }
  };

  return (
    <div>
      {/* Optional dashboard switcher button (can be removed in production) */}
      <div className="flex justify-end mb-4">
        <div className="px-4 py-2 bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
          <div className="flex items-center">
            <span className="mr-2 text-sm text-gray-500 dark:text-gray-400">Current view:</span>
            <span className="text-sm font-medium text-indigo-600 dark:text-indigo-400 mr-2">
              {dashboardType === 'enhanced' 
                ? 'Admin Dashboard' 
                : dashboardType === 'regular' 
                  ? 'User Dashboard' 
                  : 'Guest View'}
            </span>
            <button
              onClick={toggleDashboard}
              className="ml-2 px-3 py-1 text-xs text-white bg-indigo-600 rounded-full shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Switch View
            </button>
          </div>
        </div>
      </div>

      {/* Render the appropriate dashboard */}
      {dashboardType === 'enhanced' && <EnhancedDashboard />}
      {dashboardType === 'regular' && <Dashboard />}
      {dashboardType === 'guest' && <GuestDashboard />}
    </div>
  );
};

export default DashboardSelector;
</file>

<file path="src/components/inventory/ProductModal.jsx">
// src/components/inventory/ProductModal.jsx
import { useState, useEffect } from 'react';
import { collection, addDoc, doc, updateDoc } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db, storage } from '../../firebase/config';

const ProductModal = ({ product, onClose, categories, darkMode }) => {
  const isEditing = !!product;
  const [formData, setFormData] = useState({
    name: '',
    sku: '',
    category: '',
    price: '',
    stock: '',
    description: '',
    imageUrl: '',
    costPrice: '',
    supplier: '',
    reorderPoint: ''
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const [imageFile, setImageFile] = useState(null);
  const [imagePreview, setImagePreview] = useState('');
  const [uploadingImage, setUploadingImage] = useState(false);

  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || '',
        sku: product.sku || '',
        category: product.category || '',
        price: product.price || '',
        stock: product.stock || '',
        description: product.description || '',
        imageUrl: product.imageUrl || '',
        costPrice: product.costPrice || '',
        supplier: product.supplier || '',
        reorderPoint: product.reorderPoint || ''
      });
      
      if (product.imageUrl) {
        setImagePreview(product.imageUrl);
      }
    }
  }, [product]);

  const validate = () => {
    const newErrors = {};
    if (!formData.name.trim()) newErrors.name = 'Product name is required';
    if (!formData.category) newErrors.category = 'Category is required';
    if (!formData.price) {
      newErrors.price = 'Price is required';
    } else if (isNaN(formData.price) || Number(formData.price) <= 0) {
      newErrors.price = 'Price must be a positive number';
    }
    if (!formData.stock) {
      newErrors.stock = 'Stock quantity is required';
    } else if (isNaN(formData.stock) || Number(formData.stock) < 0 || !Number.isInteger(Number(formData.stock))) {
      newErrors.stock = 'Stock must be a non-negative integer';
    }
    if (formData.costPrice && (isNaN(formData.costPrice) || Number(formData.costPrice) <= 0)) {
      newErrors.costPrice = 'Cost price must be a positive number';
    }
    if (formData.reorderPoint && (isNaN(formData.reorderPoint) || Number(formData.reorderPoint) < 0 || !Number.isInteger(Number(formData.reorderPoint)))) {
      newErrors.reorderPoint = 'Reorder point must be a non-negative integer';
    }
    return newErrors;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear error when field is edited
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };
  
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    
    // Preview the image
    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result);
    };
    reader.readAsDataURL(file);
    
    setImageFile(file);
  };
  
  const uploadImage = async () => {
    if (!imageFile) return formData.imageUrl;
    
    try {
      setUploadingImage(true);
      
      // Create a reference to the file in Firebase Storage
      const storageRef = ref(storage, `product-images/${Date.now()}_${imageFile.name}`);
      
      // Upload the file
      await uploadBytes(storageRef, imageFile);
      
      // Get the download URL
      const downloadURL = await getDownloadURL(storageRef);
      
      setUploadingImage(false);
      return downloadURL;
    } catch (error) {
      console.error("Error uploading image:", error);
      setUploadingImage(false);
      throw error;
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const validationErrors = validate();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      return;
    }
    
    try {
      setLoading(true);
      
      // Upload image if a new one was selected
      let imageUrl = formData.imageUrl;
      if (imageFile) {
        imageUrl = await uploadImage();
      }
      
      // Format data for Firestore
      const productData = {
        name: formData.name,
        sku: formData.sku,
        category: formData.category,
        price: Number(formData.price),
        stock: Number(formData.stock),
        description: formData.description,
        imageUrl,
        costPrice: formData.costPrice ? Number(formData.costPrice) : null,
        supplier: formData.supplier,
        reorderPoint: formData.reorderPoint ? Number(formData.reorderPoint) : null,
        updatedAt: new Date()
      };
      
      if (isEditing) {
        // Update existing product
        await updateDoc(doc(db, 'products', product.id), productData);
      } else {
        // Add new product
        productData.createdAt = new Date();
        await addDoc(collection(db, 'products'), productData);
      }
      
      setLoading(false);
      onClose(true); // Close modal and refresh data
    } catch (err) {
      console.error('Error saving product:', err);
      setLoading(false);
      setErrors({
        submit: 'Failed to save product. Please try again.'
      });
    }
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full z-50 flex items-center justify-center">
      <div className={`relative ${darkMode ? 'bg-gray-800 text-gray-200' : 'bg-white text-gray-900'} rounded-lg shadow-xl mx-auto max-w-2xl w-full`}>
        {/* Header */}
        <div className={`${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200'} py-4 px-6 rounded-t-lg border-b`}>
          <div className="flex items-center justify-between">
            <h3 className={`text-lg font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>
              {isEditing ? 'Edit Product' : 'Add New Product'}
            </h3>
            <button
              type="button"
              onClick={() => onClose(false)}
              className={`${darkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-400 hover:text-gray-500'} focus:outline-none`}
            >
              <svg className="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
        
        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6">
          {errors.submit && (
            <div className={`mb-4 ${darkMode ? 'bg-red-900/30 border-red-800' : 'bg-red-50 border-red-400'} border-l-4 p-4 rounded-md`}>
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className={`h-5 w-5 ${darkMode ? 'text-red-400' : 'text-red-400'}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className={`text-sm ${darkMode ? 'text-red-400' : 'text-red-700'}`}>{errors.submit}</p>
                </div>
              </div>
            </div>
          )}
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Basic Information */}
            <div className="space-y-4">
              <div>
                <label htmlFor="name" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Product Name <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  name="name"
                  id="name"
                  value={formData.name}
                  onChange={handleChange}
                  className={`mt-1 block w-full shadow-sm sm:text-sm rounded-md ${
                    errors.name 
                      ? `${darkMode ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-red-300 focus:ring-red-500 focus:border-red-500'}`
                      : `${darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'}`
                  }`}
                  placeholder="Enter product name"
                />
                {errors.name && <p className={`mt-1 text-sm ${darkMode ? 'text-red-400' : 'text-red-600'}`}>{errors.name}</p>}
              </div>
              
              <div>
                <label htmlFor="sku" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  SKU
                </label>
                <input
                  type="text"
                  name="sku"
                  id="sku"
                  value={formData.sku}
                  onChange={handleChange}
                  className={`mt-1 block w-full shadow-sm sm:text-sm rounded-md ${
                    darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'
                  }`}
                  placeholder="Enter SKU (optional)"
                />
              </div>
              
              <div>
                <label htmlFor="category" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Category <span className="text-red-500">*</span>
                </label>
                <select
                  id="category"
                  name="category"
                  value={formData.category}
                  onChange={handleChange}
                  className={`mt-1 block w-full pl-3 pr-10 py-2 text-base shadow-sm sm:text-sm rounded-md ${
                    errors.category 
                      ? `${darkMode ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-red-300 focus:ring-red-500 focus:border-red-500'}`
                      : `${darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'}`
                  }`}
                >
                  <option value="">Select a category</option>
                  {categories.map((category) => (
                    <option key={category} value={category}>
                      {category}
                    </option>
                  ))}
                </select>
                {errors.category && <p className={`mt-1 text-sm ${darkMode ? 'text-red-400' : 'text-red-600'}`}>{errors.category}</p>}
              </div>
              
              <div>
                <label htmlFor="price" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Selling Price <span className="text-red-500">*</span>
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className={`${darkMode ? 'text-gray-400' : 'text-gray-500'} sm:text-sm`}>$</span>
                  </div>
                  <input
                    type="number"
                    name="price"
                    id="price"
                    value={formData.price}
                    onChange={handleChange}
                    step="0.01"
                    min="0"
                    className={`block w-full pl-7 pr-12 sm:text-sm rounded-md ${
                      errors.price 
                        ? `${darkMode ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-red-300 focus:ring-red-500 focus:border-red-500'}`
                        : `${darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'}`
                    }`}
                    placeholder="0.00"
                  />
                </div>
                {errors.price && <p className={`mt-1 text-sm ${darkMode ? 'text-red-400' : 'text-red-600'}`}>{errors.price}</p>}
              </div>
              
              <div>
                <label htmlFor="stock" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Stock Quantity <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  name="stock"
                  id="stock"
                  value={formData.stock}
                  onChange={handleChange}
                  min="0"
                  step="1"
                  className={`mt-1 block w-full shadow-sm sm:text-sm rounded-md ${
                    errors.stock 
                      ? `${darkMode ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-red-300 focus:ring-red-500 focus:border-red-500'}`
                      : `${darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'}`
                  }`}
                  placeholder="0"
                />
                {errors.stock && <p className={`mt-1 text-sm ${darkMode ? 'text-red-400' : 'text-red-600'}`}>{errors.stock}</p>}
              </div>

              {/* Image Upload Section */}
              <div>
                <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Product Image
                </label>
                <div className="mt-1 flex items-center space-x-4">
                  <div className={`flex-shrink-0 h-20 w-20 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-md flex items-center justify-center`}>
                    {imagePreview ? (
                      <img src={imagePreview} alt="Preview" className="h-20 w-20 object-cover rounded-md" />
                    ) : (
                      <svg xmlns="http://www.w3.org/2000/svg" className={`h-8 w-8 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    )}
                  </div>
                  <div className="flex flex-col">
                    <input
                      type="file"
                      accept="image/*"
                      id="image-upload"
                      className="hidden"
                      onChange={handleImageChange}
                    />
                    <label
                      htmlFor="image-upload"
                      className={`inline-flex items-center px-3 py-1 ${
                        darkMode 
                          ? 'bg-gray-700 hover:bg-gray-600 border-gray-600 text-gray-200'
                          : 'bg-white hover:bg-gray-50 border-gray-300 text-gray-700'
                      } border rounded-md text-sm font-medium cursor-pointer`}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12" />
                      </svg>
                      {uploadingImage ? 'Uploading...' : 'Upload Image'}
                    </label>
                    {imagePreview && (
                      <button
                        type="button"
                        onClick={() => {
                          setImagePreview('');
                          setImageFile(null);
                          setFormData(prev => ({ ...prev, imageUrl: '' }));
                        }}
                        className={`mt-2 text-sm ${darkMode ? 'text-red-400 hover:text-red-300' : 'text-red-600 hover:text-red-500'}`}
                      >
                        Remove Image
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            {/* Additional Information */}
            <div className="space-y-4">
              <div>
                <label htmlFor="costPrice" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Cost Price
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span className={`${darkMode ? 'text-gray-400' : 'text-gray-500'} sm:text-sm`}>$</span>
                  </div>
                  <input
                    type="number"
                    name="costPrice"
                    id="costPrice"
                    value={formData.costPrice}
                    onChange={handleChange}
                    step="0.01"
                    min="0"
                    className={`block w-full pl-7 pr-12 sm:text-sm rounded-md ${
                      errors.costPrice 
                        ? `${darkMode ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-red-300 focus:ring-red-500 focus:border-red-500'}`
                        : `${darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'}`
                    }`}
                    placeholder="0.00"
                  />
                </div>
                {errors.costPrice && <p className={`mt-1 text-sm ${darkMode ? 'text-red-400' : 'text-red-600'}`}>{errors.costPrice}</p>}
              </div>
              
              <div>
                <label htmlFor="supplier" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Supplier
                </label>
                <input
                  type="text"
                  name="supplier"
                  id="supplier"
                  value={formData.supplier}
                  onChange={handleChange}
                  className={`mt-1 block w-full shadow-sm sm:text-sm rounded-md ${
                    darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'
                  }`}
                  placeholder="Enter supplier name (optional)"
                />
              </div>
              
              <div>
                <label htmlFor="reorderPoint" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Reorder Point
                </label>
                <input
                  type="number"
                  name="reorderPoint"
                  id="reorderPoint"
                  value={formData.reorderPoint}
                  onChange={handleChange}
                  min="0"
                  step="1"
                  className={`mt-1 block w-full shadow-sm sm:text-sm rounded-md ${
                    errors.reorderPoint 
                      ? `${darkMode ? 'border-red-500 focus:ring-red-500 focus:border-red-500' : 'border-red-300 focus:ring-red-500 focus:border-red-500'}`
                      : `${darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'}`
                  }`}
                  placeholder="0"
                />
                {errors.reorderPoint && <p className={`mt-1 text-sm ${darkMode ? 'text-red-400' : 'text-red-600'}`}>{errors.reorderPoint}</p>}
                <p className={`mt-1 text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Minimum inventory level before reordering</p>
              </div>
              
              <div>
                <label htmlFor="description" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Description
                </label>
                <textarea
                  id="description"
                  name="description"
                  rows="5"
                  value={formData.description}
                  onChange={handleChange}
                  className={`mt-1 block w-full shadow-sm sm:text-sm rounded-md ${
                    darkMode ? 'border-gray-600 bg-gray-700 focus:ring-indigo-500 focus:border-indigo-500' : 'border-gray-300 focus:ring-indigo-500 focus:border-indigo-500'
                  }`}
                  placeholder="Enter product description (optional)"
                ></textarea>
              </div>
            </div>
          </div>
          
          {/* Actions */}
          <div className="mt-8 flex justify-end space-x-3">
            <button
              type="button"
              onClick={() => onClose(false)}
              className={`inline-flex justify-center py-2 px-4 border ${
                darkMode ? 'border-gray-600 text-gray-300 bg-gray-700 hover:bg-gray-600' : 'border-gray-300 text-gray-700 bg-white hover:bg-gray-50'
              } shadow-sm text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading || uploadingImage}
              className={`inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white ${
                loading || uploadingImage 
                ? `${darkMode ? 'bg-indigo-500 opacity-70' : 'bg-indigo-400'}`
                : `${darkMode ? 'bg-indigo-600 hover:bg-indigo-700' : 'bg-indigo-600 hover:bg-indigo-700'}`
              } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
            >
              {loading || uploadingImage ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  {uploadingImage ? 'Uploading...' : 'Saving...'}
                </>
              ) : (
                'Save Product'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ProductModal;
</file>

<file path="src/firebase/auth.js">
// Import Firebase Authentication and Firestore methods
import { 
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  sendPasswordResetEmail,
  updateProfile,
  onAuthStateChanged
} from 'firebase/auth';

import { 
  doc, 
  setDoc, 
  getDoc 
} from 'firebase/firestore';

import { auth, db } from './config'; // Firebase initialized config

// -------------------------
// Sign in a user
// -------------------------
export const signIn = async (email, password) => {
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    return userCredential.user;
  } catch (error) {
    console.error('Error signing in:', error);
    throw error;
  }
};

// -------------------------
// Register a new user and store additional data in Firestore
// -------------------------
export const registerUser = async (email, password, userData = {}) => {
  try {
    // Create user with Firebase Auth
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    
    // Update display name in the user's Firebase profile
    if (userData.displayName) {
      await updateProfile(user, {
        displayName: userData.displayName
      });
    }
    
    // Store user data in Firestore under 'users/{uid}'
    await setDoc(doc(db, 'users', user.uid), {
      email: user.email,
      displayName: userData.displayName || null,
      role: userData.role || 'user', // Default role is 'user'
      createdAt: new Date()
    });
    
    return user;
  } catch (error) {
    console.error('Error registering user:', error);
    throw error;
  }
};

// -------------------------
// Log out the current
</file>

<file path="src/firebase/productService.js">
// src/firebase/productService.js
import { 
  collection, 
  doc, 
  addDoc, 
  getDoc, 
  getDocs, 
  updateDoc, 
  deleteDoc, 
  query, 
  where, 
  orderBy, 
  limit,
  serverTimestamp 
} from 'firebase/firestore';
import { db } from './config';
import { generateProductImageUrl } from '../utils/imageUtils';

const PRODUCTS_COLLECTION = 'products';

// Create a new product in Firestore
export const createProduct = async (productData) => {
  try {
    // Generate image URL if not provided
    if (!productData.imageUrl) {
      productData.imageUrl = generateProductImageUrl(productData);
    }

    // Add product to Firestore with timestamps
    const productRef = await addDoc(collection(db, PRODUCTS_COLLECTION), {
      ...productData,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp()
    });

    return productRef.id;
  } catch (error) {
    console.error('Error creating product:', error);
    throw error;
  }
};

// Fetch a product by ID from Firestore
export const getProduct = async (productId) => {
  try {
    const productDoc = await getDoc(doc(db, PRODUCTS_COLLECTION, productId));

    if (!productDoc.exists()) {
      throw new Error(`Product with ID ${productId} not found`);
    }

    return {
      id: productDoc.id,
      ...productDoc.data()
    };
  } catch (error) {
    console.error('Error getting product:', error);
    throw error;
  }
};

// Update an existing product in Firestore
export const updateProduct = async (productId, productData) => {
  try {
    // Re-generate image URL if product name or category changed and image is not provided
    if (productData.name || productData.category) {
      const currentProduct = await getProduct(productId);
      const newProduct = { ...currentProduct, ...productData };

      if (!productData.imageUrl) {
        productData.imageUrl = generateProductImageUrl(newProduct);
      }
    }

    // Update product document
    await updateDoc(doc(db, PRODUCTS_COLLECTION, productId), {
      ...productData,
      updatedAt: serverTimestamp()
    });

    return productId;
  } catch (error) {
    console.error('Error updating product:', error);
    throw error;
  }
};

// Delete a product by ID from Firestore
export const deleteProduct = async (productId) => {
  try {
    await deleteDoc(doc(db, PRODUCTS_COLLECTION, productId));
  } catch (error) {
    console.error('Error deleting product:', error);
    throw error;
  }
};

// Retrieve all products with optional filters, sorting, and pagination
export const getProducts = async (options = {}) => {
  try {
    let productsQuery = collection(db, PRODUCTS_COLLECTION);
    const constraints = [];

    // Apply category filter
    if (options.category) {
      constraints.push(where('category', '==', options.category));
    }

    // Apply price range filters
    if (options.minPrice !== undefined) {
      constraints.push(where('price', '>=', options.minPrice));
    }

    if (options.maxPrice !== undefined) {
      constraints.push(where('price', '<=', options.maxPrice));
    }

    // Filter in-stock products
    if (options.inStock === true) {
      constraints.push(where('stockQuantity', '>', 0));
    }

    // Apply sorting by specified field and direction
    const sortField = options.sortBy || 'createdAt';
    const sortDirection = options.sortDirection || 'desc';
    constraints.push(orderBy(sortField, sortDirection));

    // Apply result limit for pagination
    if (options.limit) {
      constraints.push(limit(options.limit));
    }

    // Construct Firestore query with constraints
    if (constraints.length > 0) {
      productsQuery = query(productsQuery, ...constraints);
    }

    // Execute query and collect results
    const querySnapshot = await getDocs(productsQuery);
    const products = [];

    querySnapshot.forEach((doc) => {
      products.push({
        id: doc.id,
        ...doc.data()
      });
    });

    return products;
  } catch (error) {
    console.error('Error getting products:', error);
    throw error;
  }
};

// Retrieve low-stock products under a threshold (default: 5)
export const getLowStockProducts = async (threshold = 5) => {
  try {
    const q = query(
      collection(db, PRODUCTS_COLLECTION),
      where('stockQuantity', '<=', threshold),
      where('stockQuantity', '>', 0),
      orderBy('stockQuantity')
    );

    const querySnapshot = await getDocs(q);
    const products = [];

    querySnapshot.forEach((doc) => {
      products.push({
        id: doc.id,
        ...doc.data()
      });
    });

    return products;
  } catch (error) {
    console.error('Error getting low stock products:', error);
    throw error;
  }
};
</file>

<file path="src/components/common/Layout.jsx">
// src/components/common/Layout.jsx - Enhanced with dark mode support and user login state
import { useState, useEffect } from 'react';
import Navbar from './Navbar';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import { useTheme } from '../../context/ThemeContext';
import ThemeToggle from './ThemeToggle';

const Layout = ({ children }) => {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const { user, logout, userRole } = useAuth();
  const [scrolled, setScrolled] = useState(false);
  const { darkMode } = useTheme();
  
  const isActive = (path) => location.pathname === path;

  // Detect scrolling for shadow effect
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 10) {
        setScrolled(true);
      } else {
        setScrolled(false);
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  // Handle sign out
  const handleSignOut = async () => {
    try {
      await logout();
      setSidebarOpen(false);
      navigate('/login');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  // Determine if we should show the full layout or just the main content
  // For login page, we only want to show content without the navbar and sidebar
  const isLoginPage = location.pathname === '/login' || location.pathname === '/signup' || location.pathname === '/forgot-password';

  // If on a login/auth page, just render the content without the layout
  if (isLoginPage) {
    return <main>{children}</main>;
  }

  return (
    <div className={`min-h-screen flex flex-col ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50 text-gray-800'}`}>
      <div className={`sticky top-0 z-40 transition-shadow duration-300 ${scrolled ? 'shadow-md' : ''}`}>
        <Navbar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
      </div>
      
      {/* Mobile sidebar backdrop */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 z-20 bg-black bg-opacity-50 lg:hidden"
          onClick={() => setSidebarOpen(false)}
        ></div>
      )}
      
      {/* Mobile sidebar button */}
      <button
        className={`fixed bottom-4 right-4 p-3 rounded-full ${darkMode ? 'bg-indigo-700 text-white' : 'bg-indigo-600 text-white'} shadow-lg z-30 lg:hidden focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
        onClick={() => setSidebarOpen(!sidebarOpen)}
        aria-label="Toggle sidebar"
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16m-7 6h7" />
        </svg>
      </button>
      
      {/* Sidebar for mobile */}
      <div className={`fixed inset-y-0 left-0 transform ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:hidden z-30 w-64 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} shadow-2xl transition-transform duration-300 ease-in-out`}>
        <div className="p-6">
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center">
              <div className={`h-8 w-8 ${darkMode ? 'bg-indigo-600' : 'bg-indigo-600'} rounded-md flex items-center justify-center text-white`}>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path d="M8 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM15 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0z" />
                  <path d="M3 4a1 1 0 00-1 1v10a1 1 0 001 1h1.05a2.5 2.5 0 014.9 0H14a1 1 0 001-1V5a1 1 0 00-1-1H3zM14 7h-4v4h4V7zm1-2a2 2 0 012 2v10a2 2 0 01-2 2H3a2 2 0 01-2-2V5a2 2 0 012-2h12z" />
                </svg>
              </div>
              <h2 className={`ml-2 text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Wholesaler</h2>
            </div>
            <button
              className={`text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-white focus:outline-none focus:ring-2 focus:ring-indigo-500 p-1 rounded`}
              onClick={() => setSidebarOpen(false)}
              aria-label="Close sidebar"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          {/* User info */}
          {user ? (
            <div className="mb-8">
              <div className={`flex items-center p-4 ${darkMode ? 'bg-gray-700' : 'bg-indigo-50'} rounded-lg`}>
                <div className={`h-10 w-10 rounded-full ${darkMode ? 'bg-indigo-600' : 'bg-indigo-200'} flex items-center justify-center ${darkMode ? 'text-white' : 'text-indigo-800'} font-bold`}>
                  {user.displayName ? user.displayName.charAt(0).toUpperCase() : 'U'}
                </div>
                <div className="ml-3">
                  <p className={`text-sm font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>{user.displayName || 'User'}</p>
                  <p className={`text-xs ${darkMode ? 'text-gray-300' : 'text-gray-500'}`}>{user.email}</p>
                </div>
              </div>
            </div>
          ) : (
            <div className="mb-8 flex justify-center">
              <Link to="/login" className={`inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${darkMode ? 'bg-indigo-600 hover:bg-indigo-700' : 'bg-indigo-600 hover:bg-indigo-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}>
                Sign In
              </Link>
            </div>
          )}
          
          {/* Navigation links */}
          <nav className="space-y-1">
            <Link
              to="/"
              className={`flex items-center px-4 py-3 rounded-lg ${
                isActive('/') 
                  ? darkMode ? 'bg-gray-700 text-indigo-400' : 'bg-indigo-50 text-indigo-700' 
                  : darkMode ? 'text-gray-300 hover:bg-gray-700 hover:text-white' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
              }`}
              onClick={() => setSidebarOpen(false)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-3 ${isActive('/') ? (darkMode ? 'text-indigo-400' : 'text-indigo-500') : (darkMode ? 'text-gray-400' : 'text-gray-400')}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
              Dashboard
            </Link>
            <Link
              to="/inventory"
              className={`flex items-center px-4 py-3 rounded-lg ${
                isActive('/inventory') 
                  ? darkMode ? 'bg-gray-700 text-indigo-400' : 'bg-indigo-50 text-indigo-700' 
                  : darkMode ? 'text-gray-300 hover:bg-gray-700 hover:text-white' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
              }`}
              onClick={() => setSidebarOpen(false)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-3 ${isActive('/inventory') ? (darkMode ? 'text-indigo-400' : 'text-indigo-500') : (darkMode ? 'text-gray-400' : 'text-gray-400')}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
              </svg>
              Inventory
            </Link>
            <Link
              to="/orders"
              className={`flex items-center px-4 py-3 rounded-lg ${
                isActive('/orders') 
                  ? darkMode ? 'bg-gray-700 text-indigo-400' : 'bg-indigo-50 text-indigo-700' 
                  : darkMode ? 'text-gray-300 hover:bg-gray-700 hover:text-white' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
              }`}
              onClick={() => setSidebarOpen(false)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-3 ${isActive('/orders') ? (darkMode ? 'text-indigo-400' : 'text-indigo-500') : (darkMode ? 'text-gray-400' : 'text-gray-400')}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
              Orders
            </Link>
            <Link
              to="/create-order"
              className={`flex items-center px-4 py-3 rounded-lg ${
                isActive('/create-order') 
                  ? darkMode ? 'bg-gray-700 text-indigo-400' : 'bg-indigo-50 text-indigo-700' 
                  : darkMode ? 'text-gray-300 hover:bg-gray-700 hover:text-white' : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
              }`}
              onClick={() => setSidebarOpen(false)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-3 ${isActive('/create-order') ? (darkMode ? 'text-indigo-400' : 'text-indigo-500') : (darkMode ? 'text-gray-400' : 'text-gray-400')}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              New Order
            </Link>
          </nav>
          
          {/* Theme toggle and sign out */}
          <div className="mt-10 pt-6 border-t border-gray-200 dark:border-gray-700">
            <div className="flex items-center justify-between">
              <h3 className={`text-xs font-semibold ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Theme</h3>
              <ThemeToggle />
            </div>
            
            {user && (
              <button
                onClick={handleSignOut}
                className={`mt-6 w-full flex items-center px-4 py-3 ${darkMode ? 'text-red-400 hover:bg-red-900/20' : 'text-red-600 hover:bg-red-50'} rounded-lg transition-colors`}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-3 ${darkMode ? 'text-red-400' : 'text-red-600'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                Sign Out
              </button>
            )}
          </div>
        </div>
      </div>
      
      <main className="flex-grow py-6 px-4">
        {children}
      </main>
      
      <footer className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-t py-6 mt-auto`}>
        <div className="container mx-auto px-4 md:px-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <h3 className={`text-sm font-semibold ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider mb-4`}>Company</h3>
              <ul className="space-y-3">
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>About Us</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Careers</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Privacy Policy</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Terms of Service</a></li>
              </ul>
            </div>
            <div>
              <h3 className={`text-sm font-semibold ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider mb-4`}>Resources</h3>
              <ul className="space-y-3">
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Documentation</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Guides</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>API Reference</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Support Center</a></li>
              </ul>
            </div>
            <div>
              <h3 className={`text-sm font-semibold ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider mb-4`}>Features</h3>
              <ul className="space-y-3">
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Inventory Management</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Order Processing</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Analytics</a></li>
                <li><a href="#" className={`text-sm ${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-600 hover:text-indigo-600'}`}>Integrations</a></li>
              </ul>
            </div>
            <div>
              <h3 className={`text-sm font-semibold ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider mb-4`}>Contact</h3>
              <ul className="space-y-3">
                <li className={`flex items-center text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-2 ${darkMode ? 'text-gray-500' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  (123) 456-7890
                </li>
                <li className={`flex items-center text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 mr-2 ${darkMode ? 'text-gray-500' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  support@wholesaler.com
                </li>
              </ul>
              <div className="mt-6">
                <h3 className={`text-sm font-semibold ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider mb-4`}>Connect</h3>
                <div className="flex space-x-4">
                  <a href="#" className={`${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-400 hover:text-indigo-600'}`}>
                    <span className="sr-only">Facebook</span>
                    <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path fillRule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clipRule="evenodd" />
                    </svg>
                  </a>
                  <a href="#" className={`${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-400 hover:text-indigo-600'}`}>
                    <span className="sr-only">Twitter</span>
                    <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                    </svg>
                  </a>
                  <a href="#" className={`${darkMode ? 'text-gray-400 hover:text-indigo-400' : 'text-gray-400 hover:text-indigo-600'}`}>
                    <span className="sr-only">LinkedIn</span>
                    <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path fillRule="evenodd" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" clipRule="evenodd" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </div>
          <div className={`mt-8 border-t ${darkMode ? 'border-gray-700' : 'border-gray-200'} pt-6 flex flex-col md:flex-row justify-between items-center`}>
            <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>&copy; {new Date().getFullYear()} Wholesaler App. All rights reserved.</p>
            <div className="mt-4 md:mt-0">
              <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Made with ‚ù§Ô∏è by the Wholesaler Team</p>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Layout;
</file>

<file path="src/pages/Orders/OrderFilters.jsx">
import React from 'react';

// Reusable filter component for order status, date, and customer name
const OrderFilters = ({ filters, onFilterChange }) => {
  // Update filters on input/select change
  const handleChange = (e) => {
    const { name, value } = e.target;
    onFilterChange({
      ...filters,
      [name]: value
    });
  };

  return (
    <div className="bg-white p-4 rounded-lg shadow mb-6 flex flex-wrap gap-4">
      {/* Status Dropdown */}
      <div className="flex items-center">
        <label htmlFor="status" className="mr-2 text-sm font-medium text-gray-700">Status:</label>
        <select
          id="status"
          name="status"
          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
          value={filters.status}
          onChange={handleChange}
        >
          <option value="all">All</option>
          <option value="Completed">Completed</option>
          <option value="Processing">Processing</option>
          <option value="Pending">Pending</option>
          <option value="Cancelled">Cancelled</option>
        </select>
      </div>

      {/* Date Filter */}
      <div className="flex items-center">
        <label htmlFor="date" className="mr-2 text-sm font-medium text-gray-700">Date:</label>
        <select
          id="date"
          name="date"
          className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
          value={filters.date}
          onChange={handleChange}
        >
          <option value="all">All Time</option>
          <option value="today">Today</option>
          <option value="yesterday">Yesterday</option>
          <option value="week">This Week</option>
          <option value="month">This Month</option>
        </select>
      </div>

      {/* Customer Search Input */}
      <div className="flex items-center">
        <label htmlFor="customer" className="mr-2 text-sm font-medium text-gray-700">Customer:</label>
        <input
          type="text"
          id="customer"
          name="customer"
          className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-3 pr-12 sm:text-sm border-gray-300 rounded-md"
          placeholder="Search customer..."
          value={filters.customer}
          onChange={handleChange}
        />
      </div>

      {/* Export Button */}
      <div className="ml-auto">
        <button
          type="button"
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          onClick={() => {/* Add export functionality */}}
        >
          Export
        </button>
      </div>
    </div>
  );
};

export default OrderFilters;
</file>

<file path="src/pages/Orders/OrdersPage.jsx">
import React, { useState, useEffect } from 'react';
import { collection, query, where, orderBy, limit, startAfter, getDocs, Timestamp } from 'firebase/firestore';
import { db } from '../../firebase/config';
import OrderTable from './OrderTable';
import OrderFilters from './OrderFilters';

const OrdersPage = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    status: 'all',
    date: 'all',
    customer: ''
  });
  const [lastVisible, setLastVisible] = useState(null);
  const [page, setPage] = useState(1);
  const [totalOrders, setTotalOrders] = useState(0);
  const ordersPerPage = 10;

  useEffect(() => {
    const fetchOrders = async () => {
      setLoading(true);
      try {
        // Create reference to orders collection
        const ordersRef = collection(db, 'orders');
        
        // Build filter constraints
        let constraints = [];
        
        // Add status filter if not 'all'
        if (filters.status !== 'all') {
          constraints.push(where('status', '==', filters.status));
        }
        
        // Add date filter if not 'all'
        if (filters.date !== 'all') {
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          
          let dateConstraint;
          switch (filters.date) {
            case 'today':
              dateConstraint = where('dateCreated', '>=', Timestamp.fromDate(today));
              break;
            case 'yesterday':
              const yesterday = new Date(today);
              yesterday.setDate(yesterday.getDate() - 1);
              dateConstraint = where('dateCreated', '>=', Timestamp.fromDate(yesterday));
              break;
            case 'week':
              const weekAgo = new Date(today);
              weekAgo.setDate(weekAgo.getDate() - 7);
              dateConstraint = where('dateCreated', '>=', Timestamp.fromDate(weekAgo));
              break;
            case 'month':
              const monthAgo = new Date(today);
              monthAgo.setMonth(monthAgo.getMonth() - 1);
              dateConstraint = where('dateCreated', '>=', Timestamp.fromDate(monthAgo));
              break;
            default:
              break;
          }
          
          if (dateConstraint) {
            constraints.push(dateConstraint);
          }
        }
        
        // Always sort by date
        constraints.push(orderBy('dateCreated', 'desc'));
        
        // Build query with pagination
        let ordersQuery;
        if (page === 1 || !lastVisible) {
          ordersQuery = query(ordersRef, ...constraints, limit(ordersPerPage));
        } else {
          ordersQuery = query(ordersRef, ...constraints, startAfter(lastVisible), limit(ordersPerPage));
        }
        
        // Execute query
        const snapshot = await getDocs(ordersQuery);
        const lastDoc = snapshot.docs[snapshot.docs.length - 1];
        setLastVisible(lastDoc);
        
        // Process fetched orders
        const fetchedOrders = [];
        
        for (const doc of snapshot.docs) {
          const orderData = doc.data();
          
          // Apply customer filter client-side (Firestore doesn't support LIKE queries)
          if (filters.customer && !orderData.customerName.toLowerCase().includes(filters.customer.toLowerCase())) {
            continue;
          }
          
          // Get item count (could be stored in the order document or calculated)
          let itemCount = orderData.itemCount || 0;
          let totalAmount = orderData.totalAmount || 0;
          
          // If not already in order document, you could fetch and calculate
          if (!orderData.itemCount || !orderData.totalAmount) {
            const itemsQuery = query(
              collection(db, 'orderItems'),
              where('orderId', '==', doc.id)
            );
            const itemsSnapshot = await getDocs(itemsQuery);
            
            itemCount = itemsSnapshot.size;
            
            if (!orderData.totalAmount) {
              totalAmount = 0;
              itemsSnapshot.forEach(itemDoc => {
                const itemData = itemDoc.data();
                totalAmount += (itemData.price * itemData.quantity);
              });
            }
          }
          
          fetchedOrders.push({
            id: doc.id,
            orderId: orderData.orderId || `#ORD-${doc.id.substring(0, 5)}`,
            customerName: orderData.customerName,
            dateCreated: orderData.dateCreated,
            status: orderData.status,
            itemCount,
            totalAmount
          });
        }
        
        setOrders(fetchedOrders);
        
        // Get total count for pagination
        const countQuery = query(ordersRef, ...constraints.filter(c => c.type !== 'limit' && c.type !== 'startAfter'));
        const countSnapshot = await getDocs(countQuery);
        setTotalOrders(countSnapshot.size);
      } catch (error) {
        console.error("Error fetching orders:", error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchOrders();
  }, [filters, page, lastVisible]);

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
    setPage(1); // Reset to first page when filters change
    setLastVisible(null);
  };
  
  const handlePreviousPage = () => {
    if (page > 1) {
      setPage(page - 1);
      setLastVisible(null); // Reset pagination when going back
    }
  };

  const handleNextPage = () => {
    if (page * ordersPerPage < totalOrders) {
      setPage(page + 1);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Orders</h1>
      
      <OrderFilters filters={filters} onFilterChange={handleFilterChange} />
      
      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
        </div>
      ) : (
        <div>
          <OrderTable orders={orders} />
          
          {/* Pagination controls */}
          <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
            <div className="flex-1 flex justify-between items-center">
              <div>
                <p className="text-sm text-gray-700">
                  Showing <span className="font-medium">{orders.length > 0 ? (page - 1) * ordersPerPage + 1 : 0}</span> to{' '}
                  <span className="font-medium">{Math.min(page * ordersPerPage, totalOrders)}</span> of{' '}
                  <span className="font-medium">{totalOrders}</span> results
                </p>
              </div>
              <div>
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <button
                    onClick={handlePreviousPage}
                    disabled={page === 1}
                    className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
                      page === 1 ? 'text-gray-300 cursor-not-allowed' : 'text-gray-500 hover:bg-gray-50'
                    }`}
                  >
                    Previous
                  </button>
                  {/* Current page indicator */}
                  <span className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                    Page {page}
                  </span>
                  <button
                    onClick={handleNextPage}
                    disabled={page * ordersPerPage >= totalOrders}
                    className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
                      page * ordersPerPage >= totalOrders ? 'text-gray-300 cursor-not-allowed' : 'text-gray-500 hover:bg-gray-50'
                    }`}
                  >
                    Next
                  </button>
                </nav>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OrdersPage;
</file>

<file path="src/firebase/orderService.js">
// This is src/firebase/orderService.js file.
import { 
  collection, 
  doc, 
  addDoc, 
  getDoc, 
  getDocs, 
  updateDoc, 
  deleteDoc, 
  query, 
  where, 
  orderBy, 
  limit,
  serverTimestamp 
} from 'firebase/firestore';
import { db } from './config';

const ORDERS_COLLECTION = 'orders';

// Here I Create a new order with items subcollection
export const createOrder = async (orderData) => {
  try {
    // Extract items from order data
    const { items, ...orderDetails } = orderData;
    
    // Create order document 
    const orderRef = await addDoc(collection(db, ORDERS_COLLECTION), {
      ...orderDetails,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
      status: orderDetails.status || 'pending'
    });
    
    // Add items to subcollection in the order collection.
    if (items && items.length > 0) {
      for (const item of items) {
        await addDoc(collection(db, ORDERS_COLLECTION, orderRef.id, 'orderItems'), {
          productId: item.productId,
          productName: item.productName,
          price: item.price,
          quantity: item.quantity
        });
      }
    }
    
    return orderRef.id;
  } catch (error) {
    console.error('Error creating order:', error);
    throw error;
  }
};

// here I will get all the order items
export const getOrderWithItems = async (orderId) => {
  try {
    // Here i will get order document
    const orderDoc = await getDoc(doc(db, ORDERS_COLLECTION, orderId));
    
    if (!orderDoc.exists()) {
      throw new Error(`Order with ID ${orderId} not found`);
    }
    
    // Here I will get order from the customer.
    const itemsQuery = query(
      collection(db, ORDERS_COLLECTION, orderId, 'orderItems')
    );
    
    const itemsSnapshot = await getDocs(itemsQuery);
    const items = [];
    
    itemsSnapshot.forEach((doc) => {
      items.push({
        id: doc.id,
        ...doc.data()
      });
    });
    
    // Here I will return all the data as single.
    return {
      id: orderDoc.id,
      ...orderDoc.data(),
      items
    };
  } catch (error) {
    console.error('Error getting order with items:', error);
    throw error;
  }
};
// Here I will update order by firebase database.
export const updateOrder = async (orderId, orderData) => {
  try {
    await updateDoc(doc(db, ORDERS_COLLECTION, orderId), {
      ...orderData,
      updatedAt: serverTimestamp()
    });
  } catch (error) {
    console.error('Error updating order:', error);
    throw error;
  }
};

// here i am will update order status.
export const updateOrderStatus = async (orderId, status) => {
  try {
    await updateDoc(doc(db, ORDERS_COLLECTION, orderId), {
      status,
      updatedAt: serverTimestamp()
    });
  } catch (error) {
    console.error('Error updating order status:', error);
    throw error;
  }
};

// Here I will pagination and filtering to get a order.
export const getOrders = async (options = {}) => {
  try {
    let ordersQuery = collection(db, ORDERS_COLLECTION);
    const constraints = [];
    
    // Here I have applied filtering.
    if (options.status && options.status !== 'all') {
      constraints.push(where('status', '==', options.status));
    }
    
    if (options.customerEmail) {
      constraints.push(where('customerEmail', '==', options.customerEmail));
    }
    
    // Then apply sorting
    constraints.push(orderBy('createdAt', 'desc'));
    
    // After that apply pagination
    if (options.limit) {
      constraints.push(limit(options.limit));
    }
    
    // Then run query 
    if (constraints.length > 0) {
      ordersQuery = query(ordersQuery, ...constraints);
    }
    
    const snapshot = await getDocs(ordersQuery);
    
    const orders = [];
    snapshot.forEach((doc) => {
      orders.push({
        id: doc.id,
        ...doc.data()
      });
    });
    
    return orders;
  } catch (error) {
    console.error('Error getting orders:', error);
    throw error;
  }
};

// Here I get recent orders
export const getRecentOrders = async (count = 5) => {
  return getOrders({ limit: count });
};
</file>

<file path="package.json">
{
  "name": "wholesaler-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@faker-js/faker": "^9.8.0",
    "date-fns": "^4.1.0",
    "firebase": "^11.7.1",
    "framer-motion": "^11.18.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^7.5.3",
    "recharts": "^2.15.3"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.5",
    "@tailwindcss/vite": "^4.1.5",
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.5",
    "vite": "^5.2.0"
  }
}
</file>

<file path="src/firebase/config.js">
// src/firebase/config.js - Firebase configuration with environment variables
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

// Firebase configuration
const firebaseConfig = {
  // In production, use environment variables
  // For demo/development, you can use these demo values
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || "your-demo-api-key",
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || "your-project.firebaseapp.com",
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || "your-project-id",
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || "your-project.appspot.com",
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || "your-messaging-sender-id",
  appId: import.meta.env.VITE_FIREBASE_APP_ID || "your-app-id"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

// Initialize services
const db = getFirestore(app);
const auth = getAuth(app);

export { db, auth };
export default app;
</file>

<file path="src/pages/Inventory.jsx">
// src/pages/Inventory.jsx
import { useState, useEffect, useCallback } from 'react';
import { collection, getDocs, doc, deleteDoc, updateDoc, query, where, orderBy } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db, storage } from '../firebase/config';
import { Link } from 'react-router-dom';
import ProductModal from '../components/inventory/ProductModal';
import LowStockAlert from '../components/inventory/LowStockAlert';
import { useTheme } from '../context/ThemeContext';

const Inventory = () => {
  // Theme support
  const { darkMode } = useTheme();
  
  // State Management
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [currentProduct, setCurrentProduct] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('');
  const [sortBy, setSortBy] = useState('name_asc');
  const [lowStockThreshold, setLowStockThreshold] = useState(10);
  const [lowStockCount, setLowStockCount] = useState(0);
  const [showLowStockAlert, setShowLowStockAlert] = useState(false);
  const [selectedFile, setSelectedFile] = useState(null);
  const [uploadingImage, setUploadingImage] = useState(false);

  // Available categories from our products - will be populated dynamically
  const [categories, setCategories] = useState([
    'Electronics', 'Office Supplies', 'Furniture', 'Kitchen', 'Clothing'
  ]);

  // Fetch products from Firestore
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        const productsRef = collection(db, 'products');
        const productsSnapshot = await getDocs(productsRef);
        const productsList = productsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        
        // Extract unique categories from fetched products
        const uniqueCategories = [...new Set(productsList.map(product => product.category).filter(Boolean))];
        if (uniqueCategories.length > 0) {
          setCategories(uniqueCategories);
        }
        
        setProducts(productsList);
        setFilteredProducts(productsList);

        // Count low stock items
        const lowStockItems = productsList.filter(product => product.stock <= lowStockThreshold);
        setLowStockCount(lowStockItems.length);

        setLoading(false);
      } catch (err) {
        console.error('Error fetching products:', err);
        setError('Failed to fetch products. Please try again later.');
        setLoading(false);
      }
    };

    fetchProducts();
  }, [lowStockThreshold]);

  // Apply filters and sorting
  useEffect(() => {
    let result = [...products];
    
    // Apply search filter
    if (searchTerm) {
      result = result.filter(product => 
        product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.sku?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.description?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    // Apply category filter
    if (categoryFilter) {
      result = result.filter(product => product.category === categoryFilter);
    }
    
    // Apply sorting
    if (sortBy === 'name_asc') {
      result.sort((a, b) => (a.name || '').localeCompare(b.name || ''));
    } else if (sortBy === 'name_desc') {
      result.sort((a, b) => (b.name || '').localeCompare(a.name || ''));
    } else if (sortBy === 'price_asc') {
      result.sort((a, b) => (a.price || 0) - (b.price || 0));
    } else if (sortBy === 'price_desc') {
      result.sort((a, b) => (b.price || 0) - (a.price || 0));
    } else if (sortBy === 'stock_asc') {
      result.sort((a, b) => (a.stock || 0) - (b.stock || 0));
    } else if (sortBy === 'stock_desc') {
      result.sort((a, b) => (b.stock || 0) - (a.stock || 0));
    }
    
    setFilteredProducts(result);
  }, [products, searchTerm, categoryFilter, sortBy]);

  // Handler for delete product
  const handleDeleteProduct = async (id) => {
    if (window.confirm('Are you sure you want to delete this product?')) {
      try {
        await deleteDoc(doc(db, 'products', id));
        setProducts(prevProducts => prevProducts.filter(product => product.id !== id));
        alert('Product deleted successfully!');
      } catch (err) {
        console.error('Error deleting product:', err);
        alert('Failed to delete product. Please try again.');
      }
    }
  };

  // Handler for updating stock
  const handleStockUpdate = async (id, newStock) => {
    try {
      await updateDoc(doc(db, 'products', id), {
        stock: newStock,
        updatedAt: new Date()
      });
      
      setProducts(prevProducts => prevProducts.map(product => 
        product.id === id ? { ...product, stock: newStock, updatedAt: new Date() } : product
      ));
      
      alert('Stock updated successfully!');
    } catch (err) {
      console.error('Error updating stock:', err);
      alert('Failed to update stock. Please try again.');
    }
  };

  // Handler for edit product
  const handleEditProduct = (product) => {
    setCurrentProduct(product);
    setShowModal(true);
  };

  // Handler for add new product
  const handleAddProduct = () => {
    setCurrentProduct(null);
    setShowModal(true);
  };

  // Handler for modal close
  const handleCloseModal = (refreshData = false) => {
    setShowModal(false);
    
    if (refreshData) {
      // Refresh the products after adding/editing
      const fetchProducts = async () => {
        try {
          setLoading(true);
          const productsRef = collection(db, 'products');
          const productsSnapshot = await getDocs(productsRef);
          const productsList = productsSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
          }));
          setProducts(productsList);
          setLoading(false);
        } catch (err) {
          console.error('Error fetching products:', err);
          setLoading(false);
        }
      };
      
      fetchProducts();
    }
  };

  // Function to toggle stock adjustment inputs
  const toggleStockAdjustment = (productId) => {
    setProducts(prevProducts => prevProducts.map(product => 
      product.id === productId 
        ? { ...product, isAdjusting: !product.isAdjusting, stockAdjustment: 0 } 
        : product
    ));
  };

  // Function to handle stock adjustment change
  const handleStockAdjustmentChange = (productId, value) => {
    setProducts(prevProducts => prevProducts.map(product => 
      product.id === productId 
        ? { ...product, stockAdjustment: parseInt(value) || 0 } 
        : product
    ));
  };

  // Function to apply stock adjustment
  const applyStockAdjustment = async (product) => {
    const newStock = Math.max(0, product.stock + (product.stockAdjustment || 0));
    await handleStockUpdate(product.id, newStock);
    toggleStockAdjustment(product.id);
  };

  // Function to handle file selection for bulk upload
  const handleFileChange = (event) => {
    setSelectedFile(event.target.files[0]);
  };

  // Function to handle bulk upload
  const handleBulkUpload = async () => {
    if (!selectedFile) {
      alert('Please select a file first');
      return;
    }

    try {
      setUploadingImage(true);
      // Logic for processing CSV/Excel file would go here
      
      // Example: Upload to Firebase Storage
      const storageRef = ref(storage, `uploads/${selectedFile.name}`);
      await uploadBytes(storageRef, selectedFile);
      const downloadURL = await getDownloadURL(storageRef);
      
      // Process the file (in a real implementation, you'd parse the CSV/Excel)
      console.log('File uploaded successfully:', downloadURL);
      
      setUploadingImage(false);
      setSelectedFile(null);
      alert('File uploaded successfully. Processing...');
      
      // In a real implementation, you would process the file and add products to Firestore
      
    } catch (error) {
      console.error('Error uploading file:', error);
      setUploadingImage(false);
      alert('Error uploading file. Please try again.');
    }
  };

  // Main render logic
  return (
    <div className={`container mx-auto px-4 py-8 ${darkMode ? 'text-gray-200' : 'text-gray-800'}`}>
      {/* Header with actions */}
      <div className="flex flex-col md:flex-row md:justify-between md:items-center mb-8">
        <h1 className={`text-3xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4 md:mb-0`}>Inventory Management</h1>
        <div className="flex flex-wrap gap-3">
          <button
            onClick={handleAddProduct}
            className={`inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${darkMode ? 'bg-indigo-600 hover:bg-indigo-700' : 'bg-indigo-600 hover:bg-indigo-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Add Product
          </button>
          
          {/* Bulk Upload Button with File Input */}
          <div className="relative">
            <input
              type="file"
              id="file-upload"
              className="hidden"
              accept=".csv,.xlsx"
              onChange={handleFileChange}
            />
            <label
              htmlFor="file-upload"
              className={`inline-flex items-center px-4 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-gray-200 hover:bg-gray-600' : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-md shadow-sm text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 cursor-pointer`}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
              Upload CSV
            </label>
          </div>
          
          {/* Upload Button (only visible when file is selected) */}
          {selectedFile && (
            <button
              onClick={handleBulkUpload}
              disabled={uploadingImage}
              className={`inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${darkMode ? 'bg-green-600 hover:bg-green-700' : 'bg-green-600 hover:bg-green-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500`}
            >
              {uploadingImage ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Uploading...
                </>
              ) : (
                <>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0l-4 4m4-4v12" />
                  </svg>
                  Process File
                </>
              )}
            </button>
          )}
        </div>
      </div>

      {/* Low stock alert */}
      {lowStockCount > 0 && (
        <div className="mb-6">
          <button 
            onClick={() => setShowLowStockAlert(!showLowStockAlert)}
            className={`flex items-center px-4 py-2 ${darkMode ? 'bg-yellow-900/30 text-yellow-400 border-yellow-800' : 'bg-yellow-100 text-yellow-800 border-yellow-200'} border rounded-lg hover:bg-yellow-200 transition-colors`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <span className="font-medium">{lowStockCount} products below low stock threshold</span>
            <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ml-2 transition-transform duration-200 ${showLowStockAlert ? 'transform rotate-180' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          
          {showLowStockAlert && (
            <LowStockAlert 
              products={products.filter(p => p.stock <= lowStockThreshold)} 
              onUpdateStock={handleStockUpdate}
              threshold={lowStockThreshold}
              onChangeThreshold={setLowStockThreshold}
              darkMode={darkMode}
            />
          )}
        </div>
      )}

      {/* Search and filters */}
      <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-lg shadow-md p-6 mb-6 border`}>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Search */}
          <div className="col-span-1">
            <label htmlFor="search" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Search Products</label>
            <div className="relative rounded-md shadow-sm">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <input
                type="text"
                id="search"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className={`focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md ${
                  darkMode ? 'bg-gray-700 border-gray-600 text-gray-100 placeholder-gray-400' : 'bg-white border-gray-300'
                }`}
                placeholder="Search by name, SKU, or description"
              />
            </div>
          </div>

          {/* Category Filter */}
          <div className="col-span-1">
            <label htmlFor="category" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Filter by Category</label>
            <select
              id="category"
              value={categoryFilter}
              onChange={(e) => setCategoryFilter(e.target.value)}
              className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md ${
                darkMode ? 'bg-gray-700 border-gray-600 text-gray-100' : 'bg-white border-gray-300'
              }`}
            >
              <option value="">All Categories</option>
              {categories.map((category) => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>

          {/* Sort By */}
          <div className="col-span-1">
            <label htmlFor="sortBy" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Sort By</label>
            <select
              id="sortBy"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className={`mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md ${
                darkMode ? 'bg-gray-700 border-gray-600 text-gray-100' : 'bg-white border-gray-300'
              }`}
            >
              <option value="name_asc">Name (A-Z)</option>
              <option value="name_desc">Name (Z-A)</option>
              <option value="price_asc">Price (Low to High)</option>
              <option value="price_desc">Price (High to Low)</option>
              <option value="stock_asc">Stock (Low to High)</option>
              <option value="stock_desc">Stock (High to Low)</option>
            </select>
          </div>
        </div>
      </div>

      {/* Products list */}
      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className={`animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 ${darkMode ? 'border-indigo-400' : 'border-indigo-500'}`}></div>
        </div>
      ) : error ? (
        <div className={`${darkMode ? 'bg-red-900/30 border-red-800' : 'bg-red-50 border-red-400'} p-4 mb-6 rounded-md`}>
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className={`h-5 w-5 ${darkMode ? 'text-red-400' : 'text-red-400'}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className={`text-sm ${darkMode ? 'text-red-400' : 'text-red-700'}`}>{error}</p>
            </div>
          </div>
        </div>
      ) : filteredProducts.length === 0 ? (
        <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-lg shadow-md p-8 text-center border`}>
          <svg xmlns="http://www.w3.org/2000/svg" className={`h-12 w-12 mx-auto ${darkMode ? 'text-gray-500' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
          </svg>
          <h3 className={`mt-2 text-lg font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>No products found</h3>
          <p className={`mt-1 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            {searchTerm || categoryFilter ? 
              'Try adjusting your search or filter to find what you\'re looking for.' : 
              'Get started by adding your first product.'}
          </p>
          <div className="mt-6">
            <button
              onClick={handleAddProduct}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Add Product
            </button>
          </div>
        </div>
      ) : (
        <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-lg shadow-lg overflow-hidden border`}>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className={`${darkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>
                <tr>
                  <th scope="col" className={`px-6 py-3 text-left text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider`}>
                    Product
                  </th>
                  <th scope="col" className={`px-6 py-3 text-left text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider`}>
                    Category
                  </th>
                  <th scope="col" className={`px-6 py-3 text-left text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider`}>
                    Price
                  </th>
                  <th scope="col" className={`px-6 py-3 text-left text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider`}>
                    Stock
                  </th>
                  <th scope="col" className={`px-6 py-3 text-right text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-500'} uppercase tracking-wider`}>
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className={`${darkMode ? 'bg-gray-800 divide-y divide-gray-700' : 'bg-white divide-y divide-gray-200'}`}>
                {filteredProducts.map((product) => (
                  <tr key={product.id} className={`${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'}`}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10 bg-gray-100 rounded-md flex items-center justify-center">
                          {product.imageUrl ? (
                            <img src={product.imageUrl} alt={product.name} className="h-10 w-10 rounded-md object-cover" />
                          ) : (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                          )}
                        </div>
                        <div className="ml-4">
                          <div className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>{product.name}</div>
                          <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>SKU: {product.sku || 'N/A'}</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`text-sm ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>{product.category}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className={`text-sm ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>${parseFloat(product.price).toFixed(2)}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {product.isAdjusting ? (
                        <div className="flex items-center space-x-2">
                          <div className="flex rounded-md shadow-sm">
                            <button
                              type="button"
                              onClick={() => handleStockAdjustmentChange(product.id, (product.stockAdjustment || 0) - 1)}
                              className={`relative inline-flex items-center px-2 py-1 rounded-l-md border ${
                                darkMode ? 'bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600' : 'bg-gray-50 border-gray-300 text-gray-500 hover:bg-gray-100'
                              }`}
                            >
                              <span className="sr-only">Decrease</span>
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M18 12H6" />
                              </svg>
                            </button>
                            <input
                              type="number"
                              value={product.stockAdjustment || 0}
                              onChange={(e) => handleStockAdjustmentChange(product.id, e.target.value)}
                              className={`focus:ring-indigo-500 focus:border-indigo-500 block w-16 min-w-0 text-center ${
                                darkMode ? 'bg-gray-700 border-gray-600 text-gray-200' : 'border-gray-300 text-black'
                              }`}
                            />
                            <button
                              type="button"
                              onClick={() => handleStockAdjustmentChange(product.id, (product.stockAdjustment || 0) + 1)}
                              className={`relative inline-flex items-center px-2 py-1 rounded-r-md border ${
                                darkMode ? 'bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600' : 'bg-gray-50 border-gray-300 text-gray-500 hover:bg-gray-100'
                              }`}
                            >
                              <span className="sr-only">Increase</span>
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                              </svg>
                            </button>
                          </div>
                          <div className="flex space-x-2">
                            <button
                              onClick={() => applyStockAdjustment(product)}
                              className={`${darkMode ? 'text-green-400 hover:text-green-300' : 'text-green-600 hover:text-green-900'}`}
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                              </svg>
                            </button>
                            <button
                              onClick={() => toggleStockAdjustment(product.id)}
                              className={`${darkMode ? 'text-red-400 hover:text-red-300' : 'text-red-600 hover:text-red-900'}`}
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div className="flex items-center">
                          <span
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium 
                              ${product.stock <= lowStockThreshold 
                                ? darkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-800' 
                                : product.stock <= lowStockThreshold * 2 
                                  ? darkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-800' 
                                  : darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-800'
                              }`}
                          >
                            {product.stock}
                          </span>
                          <button
                            onClick={() => toggleStockAdjustment(product.id)}
                            className={`ml-2 ${darkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-400 hover:text-gray-500'}`}
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                          </button>
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button
                        onClick={() => handleEditProduct(product)}
                        className={`${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-900'} mr-4`}
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => handleDeleteProduct(product.id)}
                        className={`${darkMode ? 'text-red-400 hover:text-red-300' : 'text-red-600 hover:text-red-900'}`}
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Product Modal */}
      {showModal && (
        <ProductModal
          product={currentProduct}
          onClose={handleCloseModal}
          categories={categories}
          darkMode={darkMode}
        />
      )}
    </div>
  );
};
</file>

<file path="src/pages/Orders/OrderDetails.jsx">
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import { doc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../../firebase/config';
import { format } from 'date-fns';

/**
 * OrderDetails Component
 * 
 * This component displays detailed information about a specific order,
 * including customer info, items in the order, and total price. 
 */
const OrderDetails = () => {
  const { id } = useParams(); // Get order ID from route params
  const [order, setOrder] = useState(null); // State to store order details
  const [items, setItems] = useState([]);   // State to store order items
  const [loading, setLoading] = useState(true); 

  useEffect(() => {
    // Async function to fetch order details and associated items
    const fetchOrderDetails = async () => {
      try {
        const orderRef = doc(db, 'orders', id);
        const orderSnap = await getDoc(orderRef);

        if (orderSnap.exists()) {
          // Set the order state with fetched data
          setOrder({
            id: orderSnap.id,
            ...orderSnap.data()
          });

          // Fetch items associated with the order
          const itemsRef = collection(db, 'orderItems');
          const q = query(itemsRef, where('orderId', '==', id));
          const itemsSnap = await getDocs(q);

          const orderItems = [];
          itemsSnap.forEach(doc => {
            orderItems.push({
              id: doc.id,
              ...doc.data()
            });
          });

          setItems(orderItems); // Update item list in state
        } else {
          console.error("Order not found");
        }
      } catch (error) {
        console.error("Error fetching order details:", error);
      } finally {
        setLoading(false); // Stop loading spinner
      }
    };

    fetchOrderDetails();
  }, [id]);

  // When data is fetched show loading spinner.
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }

  // Show message if no order is found
  if (!order) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white shadow rounded-lg p-6">
          <h1 className="text-2xl font-bold mb-4">Order not found</h1>
          <Link to="/orders" className="text-indigo-600 hover:text-indigo-900">
            ‚Üê Back to Orders
          </Link>
        </div>
      </div>
    );
  }

  // THis is my main UI for styling and designing.
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white shadow rounded-lg overflow-hidden">
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h1 className="text-2xl font-bold">{order.orderId || `Order #${id.substring(0, 5)}`}</h1>
            <Link to="/orders" className="text-indigo-600 hover:text-indigo-900">
              ‚Üê Back to Orders
            </Link>
          </div>
        </div>

        {/* Here I put Order Info & Customer Info */}
        <div className="p-6 grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Order Info */}
          <div>
            <h2 className="text-lg font-medium mb-4">Order Information</h2>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-500">Status:</span>
                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                  order.status === 'Completed' ? 'bg-green-100 text-green-800' :
                  order.status === 'Processing' ? 'bg-blue-100 text-blue-800' :
                  order.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {order.status}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Date:</span>
                <span>{order.dateCreated ? format(new Date(order.dateCreated.toDate()), 'dd MMM yyyy, hh:mm a') : '-'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Total:</span>
                <span className="font-medium">${order.totalAmount?.toFixed(2) || '-'}</span>
              </div>
            </div>
          </div>

          {/* Customer Info */}
          <div>
            <h2 className="text-lg font-medium mb-4">Customer Information</h2>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-500">Name:</span>
                <span>{order.customerName}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Email:</span>
                <span>{order.customerEmail || '-'}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-500">Phone:</span>
                <span>{order.customerPhone || '-'}</span>
              </div>
            </div>
          </div>
        </div>

        {/* Order Items Table */}
        <div className="px-6 py-4 border-t border-gray-200">
          <h2 className="text-lg font-medium mb-4">Order Items</h2>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {items.length > 0 ? (
                  items.map((item) => (
                    <tr key={item.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">{item.productName}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">${item.price?.toFixed(2)}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">{item.quantity}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">${(item.price * item.quantity).toFixed(2)}</div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="4" className="px-6 py-4 text-center text-sm text-gray-500">
                      No items found for this order
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>

       
        <div className="p-6 border-t border-gray-200">
          <div className="flex justify-end">
            <Link
              to={`/generate-invoice/${id}`}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              target="_blank"
            >
              Generate Invoice
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrderDetails;
</file>

<file path="src/pages/Orders/OrderTable.jsx">
import React from 'react';
import { format } from 'date-fns';

// Component to display a table of orders
const OrderTable = ({ orders }) => {
  // Display a message when no orders are available
  if (orders.length === 0) {
    return <div className="text-center py-8">No orders found</div>;
  }

  // Render the table when there are orders
  return (
    <div className="bg-white shadow rounded-lg overflow-hidden">
      <table className="min-w-full divide-y divide-gray-200">
        
        {/* Table header */}
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Items</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>

        {/* Table body with dynamic data */}
        <tbody className="bg-white divide-y divide-gray-200">
          {orders.map((order) => (
            <tr key={order.id} className="hover:bg-gray-50">
              
              {/* Display Order ID or fallback format if missing */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm font-medium text-gray-900">
                  {order.orderId || `#ORD-${order.id.substring(0, 5)}`}
                </div>
              </td>

              {/* Customer name */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-900">{order.customerName}</div>
              </td>

              {/* Formatted order creation date */}
              <td className="px-6 py-4 whitespace-nowrap">
                <div className="text-sm text-gray-500">
                  {order.dateCreated ? format(new Date(order.dateCreated.toDate()), 'dd MMM yyyy') : '-'}
                </div>
              </td>

              {/* Order status with color-coded badge */}
              <td className="px-6 py-4 whitespace-nowrap">
                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                  order.status === 'Completed' ? 'bg-green-100 text-green-800' :
                  order.status === 'Processing' ? 'bg-blue-100 text-blue-800' :
                  order.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {order.status}
                </span>
              </td>

              {/* Number of items in the order */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {order.itemCount || '-'}
              </td>

              {/* Total amount with currency formatting */}
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${order.totalAmount?.toFixed(2) || '-'}
              </td>

              {/* Action buttons: View order details or print invoice */}
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button 
                  className="text-indigo-600 hover:text-indigo-900 mr-2"
                  onClick={() => window.location.href = `/orders/${order.id}`}
                >
                  View
                </button>
                <button 
                  className="text-gray-600 hover:text-gray-900"
                  onClick={() => window.open(`/generate-invoice/${order.id}`, '_blank')}
                >
                  Print
                </button>
              </td>

            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default OrderTable;
</file>

<file path="src/App.jsx">
// src/App.jsx
import { useState, useEffect, lazy, Suspense } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider } from './context/AuthContext';
import { ThemeProvider } from './context/ThemeContext';
import Layout from './components/common/Layout';
import Login from './pages/Login';
import { auth } from './firebase/config';
import { onAuthStateChanged } from 'firebase/auth';
import { seedFirebaseData } from './utils/seedFirebase';

// Lazy-loaded components for better performance
const Dashboard = lazy(() => import('./pages/Dashboard'));
const EnhancedDashboard = lazy(() => import('./pages/EnhancedDashboard'));
const GuestDashboard = lazy(() => import('./pages/GuestDashboard'));
const Inventory = lazy(() => import('./pages/Inventory'));
const Orders = lazy(() => import('./pages/Orders/OrdersPage'));
const CreateOrder = lazy(() => import('./pages/CreateOrder'));
const OrderDetails = lazy(() => import('./pages/Orders/OrderDetails'));
const InvoicePage = lazy(() => import('./pages/Orders/InvoicePage'));
const OrderTable = lazy(() => import('./pages/Orders/OrderTable'));

// Loading fallback component
const LoadingFallback = () => (
  <div className="flex flex-col items-center justify-center min-h-screen">
    <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
    <p className="mt-4 text-gray-600">Loading...</p>
  </div>
);

// Protected Route Component
const ProtectedRoute = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  if (loading) {
    return <LoadingFallback />;
  }

  if (!user) {
    return <Navigate to="/login" />;
  }

  return children;
};

function App() {
  const [isSeeding, setIsSeeding] = useState(false);
  const [seedStatus, setSeedStatus] = useState('');
  const [seedError, setSeedError] = useState(null);
  const [showSeedOption, setShowSeedOption] = useState(false);
  const [userRole, setUserRole] = useState('guest'); // Default to guest
  
  // Check if seeding is needed and determine user role on app start
  useEffect(() => {
    async function checkDatabase() {
      try {
        // First just check if data exists (forceReseed = false)
        const result = await seedFirebaseData(false);
        
        // If empty database, show option to seed
        if (!result) {
          setShowSeedOption(true);
        }
        
        // Set up auth state listener to determine role
        const unsubscribe = onAuthStateChanged(auth, (user) => {
          if (user) {
            // In a real app, you would check the user's role in Firestore
            // For demo purposes, using email to determine role
            if (user.email?.includes('admin')) {
              setUserRole('admin');
            } else if (user.email?.includes('manager')) {
              setUserRole('manager');
            } else {
              setUserRole('user');
            }
          } else {
            setUserRole('guest');
          }
        });
        
        return () => unsubscribe();
      } catch (error) {
        console.error('Error checking database:', error);
        setSeedError(error.message);
      }
    }

    checkDatabase();
  }, []);

  // Handle manual seed request
  const handleSeedData = async () => {
    try {
      setIsSeeding(true);
      setSeedStatus('Creating sample data...');
      
      // Force reseed of the database
      await seedFirebaseData(true);
      
      setIsSeeding(false);
      setSeedStatus('Data successfully created!');
      setShowSeedOption(false);
      
      // Refresh after a short delay
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    } catch (error) {
      console.error('Error seeding data:', error);
      setSeedError(error.message);
      setIsSeeding(false);
    }
  };

  // Show loading screen while seeding data
  if (isSeeding) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
        <p className="mt-4 text-gray-600">{seedStatus}</p>
        <p className="mt-2 text-gray-500 text-sm">This may take a moment...</p>
      </div>
    );
  }

  // Show seed option screen if database is empty
  if (showSeedOption) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 px-4">
        <div className="bg-white border border-gray-200 p-6 rounded-lg shadow-md max-w-md">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">Initialize Application</h2>
          <p className="text-gray-600 mb-6">
            Your database appears to be empty. Would you like to create sample data for testing?
          </p>
          <div className="flex space-x-4">
            <button 
              onClick={handleSeedData}
              className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-6 rounded focus:outline-none focus:ring-2 focus:ring-indigo-500"
            >
              Create Sample Data
            </button>
            <button 
              onClick={() => setShowSeedOption(false)}
              className="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-6 rounded focus:outline-none focus:ring-2 focus:ring-gray-500"
            >
              Continue Without Data
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Show error screen if seeding failed
  if (seedError) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50 px-4">
        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-6 rounded shadow-md max-w-md">
          <h2 className="font-bold text-xl mb-2">Error Initializing Application</h2>
          <p className="mb-4">{seedError}</p>
          <p className="text-sm mb-4">
            Please check your Firebase configuration and make sure you have the proper permissions.
          </p>
          <button 
            onClick={() => window.location.reload()}
            className="bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded focus:outline-none"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  // Main application render
  return (
    <AuthProvider>
      <ThemeProvider>
        <Router>
          <Suspense fallback={<LoadingFallback />}>
            <Routes>
              {/* Public route - Login */}
              <Route path="/login" element={<Login />} />
              
              {/* Different dashboard based on user role */}
              <Route path="/" element={
                userRole === 'guest' ? (
                  <Layout>
                    <GuestDashboard />
                  </Layout>
                ) : (
                  <ProtectedRoute>
                    <Layout>
                      {userRole === 'admin' || userRole === 'manager' ? (
                        <EnhancedDashboard />
                      ) : (
                        <Dashboard />
                      )}
                    </Layout>
                  </ProtectedRoute>
                )
              } />
              
              {/* Protected routes */}
              <Route path="/inventory" element={
                <ProtectedRoute>
                  <Layout>
                    <Inventory />
                  </Layout>
                </ProtectedRoute>
              } />
              
              <Route path="/orders" element={
                <ProtectedRoute>
                  <Layout>
                    <Orders />
                  </Layout>
                </ProtectedRoute>
              } />
              
              <Route path="/orders/:id" element={
                <ProtectedRoute>
                  <Layout>
                    <OrderDetails />
                  </Layout>
                </ProtectedRoute>
              } />
              
              <Route path="/generate-invoice/:id" element={
                <ProtectedRoute>
                  <Layout>
                    <InvoicePage />
                  </Layout>
                </ProtectedRoute>
              } />
              
              <Route path="/create-order" element={
                <ProtectedRoute>
                  <Layout>
                    <CreateOrder />
                  </Layout>
                </ProtectedRoute>
              } />
              
              {/* Fallback route */}
              <Route path="*" element={<Navigate to="/" replace />} />
            </Routes>
          </Suspense>
        </Router>
      </ThemeProvider>
    </AuthProvider>
  );
}

export default App;
</file>

<file path="src/pages/GuestDashboard.jsx">
// src/pages/GuestDashboard.jsx
import { useState, useEffect } from 'react';
import { collection, getDocs, query, where, orderBy, limit } from 'firebase/firestore';
import { db } from '../firebase/config';
import { useTheme } from '../context/ThemeContext';
import ThemeToggle from '../components/common/ThemeToggle';

// ProductCard Component with hover effects and theme support
const ProductCard = ({ product, darkMode }) => {
  return (
    <div className={`border rounded-lg p-4 shadow-md transition-all duration-300 transform hover:scale-105 hover:shadow-lg ${
      darkMode ? 'bg-gray-800 hover:bg-gray-700 border-gray-700 text-white' : 'bg-white hover:bg-gray-50 border-gray-200 text-gray-900'
    }`}>
      <div className={`h-48 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} flex items-center justify-center rounded-md mb-4 overflow-hidden`}>
        {product.imageUrl ? (
          <img
            src={product.imageUrl}
            alt={product.name}
            className="object-cover h-full w-full"
          />
        ) : (
          // SVG placeholder
          <svg className="w-16 h-16" fill={darkMode ? "#4B5563" : "#D1D5DB"} viewBox="0 0 24 24">
            <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
        )}
      </div>
      <h3 className={`font-bold text-lg mb-1 ${darkMode ? 'text-white' : 'text-gray-900'}`}>{product.name}</h3>
      <p className={`text-sm mb-2 line-clamp-2 h-10 overflow-hidden ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
        {product.description || 'No description available'}
      </p>
      <div className="flex items-center justify-between mt-4">
        <span className={`font-bold text-lg ${darkMode ? 'text-white' : 'text-gray-900'}`}>
          ${Number(product.price).toFixed(2)}
        </span>
        <span className={`px-2 py-1 text-xs rounded-full ${
          product.stock > 10 
            ? darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-800'
            : product.stock > 0
              ? darkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-800'
              : darkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-800'
        }`}>
          {product.stock > 10 
            ? 'In Stock' 
            : product.stock > 0 
              ? 'Low Stock' 
              : 'Out of Stock'}
        </span>
      </div>
      <button 
        className={`mt-4 w-full py-2 px-4 rounded font-medium ${
          product.stock > 0 
            ? darkMode 
              ? 'bg-indigo-600 hover:bg-indigo-700 text-white' 
              : 'bg-indigo-600 hover:bg-indigo-700 text-white'
            : darkMode 
              ? 'bg-gray-600 cursor-not-allowed text-gray-300' 
              : 'bg-gray-300 cursor-not-allowed text-gray-500'
        }`}
        disabled={product.stock <= 0}
      >
        {product.stock > 0 ? 'Add to Cart' : 'Out of Stock'}
      </button>
    </div>
  );
};

// Featured Product Component
const FeaturedProduct = ({ product, darkMode }) => {
  if (!product) return null;
  
  return (
    <div className={`grid grid-cols-1 md:grid-cols-2 gap-8 rounded-lg overflow-hidden border ${
      darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'
    } shadow-lg p-6 mb-10`}>
      <div className={`h-80 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-lg overflow-hidden flex items-center justify-center`}>
        {product.imageUrl ? (
          <img src={product.imageUrl} alt={product.name} className="h-full w-full object-cover" />
        ) : (
          <svg className="w-24 h-24" fill={darkMode ? "#4B5563" : "#D1D5DB"} viewBox="0 0 24 24">
            <path d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
        )}
      </div>
      <div className="flex flex-col justify-center">
        <div className={`px-3 py-1 rounded-full text-sm font-medium w-fit mb-2 ${
          darkMode ? 'bg-indigo-900/30 text-indigo-400' : 'bg-indigo-100 text-indigo-700'
        }`}>
          Featured Product
        </div>
        <h2 className={`text-2xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
          {product.name}
        </h2>
        <p className={`mb-4 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
          {product.description || 'No description available'}
        </p>
        <div className="flex items-center space-x-4 mb-6">
          <span className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>
            ${Number(product.price).toFixed(2)}
          </span>
          <span className={`px-2 py-1 text-xs rounded-full ${
            product.stock > 10 
              ? darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-800'
              : product.stock > 0
                ? darkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-800'
                : darkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-800'
          }`}>
            {product.stock > 10 
              ? 'In Stock' 
              : product.stock > 0 
                ? 'Low Stock' 
                : 'Out of Stock'}
          </span>
        </div>
        <div className="flex space-x-4">
          <button 
            className={`py-2 px-6 rounded-lg font-medium ${
              product.stock > 0 
                ? darkMode 
                  ? 'bg-indigo-600 hover:bg-indigo-700 text-white' 
                  : 'bg-indigo-600 hover:bg-indigo-700 text-white'
                : darkMode 
                  ? 'bg-gray-600 cursor-not-allowed text-gray-300' 
                  : 'bg-gray-300 cursor-not-allowed text-gray-500'
            }`}
            disabled={product.stock <= 0}
          >
            {product.stock > 0 ? 'Add to Cart' : 'Out of Stock'}
          </button>
          <button 
            className={`py-2 px-6 rounded-lg font-medium ${
              darkMode
                ? 'bg-gray-700 hover:bg-gray-600 text-white'
                : 'bg-gray-100 hover:bg-gray-200 text-gray-900'
            }`}
          >
            Learn More
          </button>
        </div>
      </div>
    </div>
  );
};

const GuestDashboard = () => {
  const { darkMode, toggleDarkMode } = useTheme();
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [featuredProduct, setFeaturedProduct] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [sortOption, setSortOption] = useState('default');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch products from Firestore
  useEffect(() => {
    async function fetchProducts() {
      try {
        setLoading(true);
        
        // Create base query
        const productsRef = collection(db, 'products');
        
        // Add filters if necessary
        let productsQuery = productsRef;
        if (selectedCategory) {
          productsQuery = query(productsRef, where('category', '==', selectedCategory));
        }
        
        // Execute query
        const productsSnapshot = await getDocs(productsQuery);
        let productsData = productsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data(),
        }));
        
        // Extract unique categories
        const uniqueCategories = [...new Set(productsData.map(product => product.category).filter(Boolean))];
        setCategories(uniqueCategories);
        
        // Apply search filter (client-side since Firestore doesn't support LIKE)
        if (searchTerm.trim()) {
          const searchLower = searchTerm.toLowerCase();
          productsData = productsData.filter(product => 
            product.name?.toLowerCase().includes(searchLower) ||
            product.description?.toLowerCase().includes(searchLower) ||
            product.category?.toLowerCase().includes(searchLower)
          );
        }
        
        // Apply sorting
        if (sortOption === 'price_asc') {
          productsData.sort((a, b) => (a.price || 0) - (b.price || 0));
        } else if (sortOption === 'price_desc') {
          productsData.sort((a, b) => (b.price || 0) - (a.price || 0));
        } else if (sortOption === 'name_asc') {
          productsData.sort((a, b) => (a.name || '').localeCompare(b.name || ''));
        } else if (sortOption === 'name_desc') {
          productsData.sort((a, b) => (b.name || '').localeCompare(a.name || ''));
        }
        
        // Set featured product (pick the first one or one with an image)
        const productWithImage = productsData.find(product => product.imageUrl);
        setFeaturedProduct(productWithImage || productsData[0] || null);
        
        // Set all products
        setProducts(productsData);
        setLoading(false);
      } catch (err) {
        console.error('Failed to load products:', err);
        setError('Failed to load products. Please try again later.');
        setLoading(false);
      }
    }
    
    fetchProducts();
  }, [selectedCategory, searchTerm, sortOption]);

  return (
    <div className={`container mx-auto px-4 py-8 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
      {/* Hero Section with Toggle */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className={`text-3xl md:text-4xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-900'}`}>
            Welcome to Wholesaler
          </h1>
          <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
            Browse our premium inventory and find quality products at wholesale prices
          </p>
        </div>
        <ThemeToggle className="ml-4" />
      </div>
      
      {/* Featured Product */}
      {featuredProduct && <FeaturedProduct product={featuredProduct} darkMode={darkMode} />}
      
      {/* Filters and Search */}
      <div className={`mb-8 p-4 rounded-lg shadow-md ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} border`}>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {/* Search */}
          <div className="col-span-2">
            <label htmlFor="search" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>
              Search Products
            </label>
            <div className="relative rounded-md shadow-sm">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <input
                type="text"
                id="search"
                className={`focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm rounded-md ${
                  darkMode ? 'bg-gray-700 border-gray-600 text-gray-100 placeholder-gray-400' : 'border-gray-300'
                }`}
                placeholder="Search by name, description or category"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>
          
          {/* Category Filter */}
          <div>
            <label htmlFor="category" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>
              Category
            </label>
            <select
              id="category"
              className={`mt-1 block w-full pl-3 pr-10 py-2 text-base rounded-md ${
                darkMode ? 'bg-gray-700 border-gray-600 text-gray-100' : 'border-gray-300'
              } focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
            >
              <option value="">All Categories</option>
              {categories.map((category) => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
          
          {/* Sort Options */}
          <div>
            <label htmlFor="sort" className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>
              Sort By
            </label>
            <select
              id="sort"
              className={`mt-1 block w-full pl-3 pr-10 py-2 text-base rounded-md ${
                darkMode ? 'bg-gray-700 border-gray-600 text-gray-100' : 'border-gray-300'
              } focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm`}
              value={sortOption}
              onChange={(e) => setSortOption(e.target.value)}
            >
              <option value="default">Default</option>
              <option value="price_asc">Price: Low to High</option>
              <option value="price_desc">Price: High to Low</option>
              <option value="name_asc">Name: A to Z</option>
              <option value="name_desc">Name: Z to A</option>
            </select>
          </div>
        </div>
      </div>
      
      {/* Loading and Error States */}
      {loading && (
        <div className="flex justify-center items-center h-64">
          <div className={`animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 ${darkMode ? 'border-indigo-400' : 'border-indigo-500'}`}></div>
        </div>
      )}
      
      {error && (
        <div className={`${darkMode ? 'bg-red-900/30 border-red-800 text-red-400' : 'bg-red-50 border-red-400 text-red-700'} p-4 rounded-lg mb-8 border-l-4`}>
          {error}
        </div>
      )}
      
      {/* Product Grid */}
      {!loading && !error && (
        <>
          {products.length === 0 ? (
            <div className={`text-center py-12 rounded-lg ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-gray-50 border-gray-200'} border`}>
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-12 w-12 mx-auto ${darkMode ? 'text-gray-600' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
              </svg>
              <h3 className={`mt-4 text-lg font-medium ${darkMode ? 'text-gray-300' : 'text-gray-900'}`}>No products found</h3>
              <p className={`mt-2 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                Try changing your search criteria or check back later for new products.
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
              {products.map(product => (
                <ProductCard key={product.id} product={product} darkMode={darkMode} />
              ))}
            </div>
          )}
        </>
      )}
      
      {/* Sign In Prompt */}
      <div className={`mt-16 p-6 rounded-lg shadow-md border ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
        <div className="md:flex md:items-center md:justify-between">
          <div className="md:flex-1">
            <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>Create an Account</h2>
            <p className={`mt-2 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
              Register to access wholesale pricing, place orders, and manage your inventory.
            </p>
          </div>
          <div className="mt-4 md:mt-0">
            <a 
              href="/login" 
              className={`inline-block px-6 py-3 rounded-lg font-medium text-white ${darkMode ? 'bg-indigo-600 hover:bg-indigo-700' : 'bg-indigo-600 hover:bg-indigo-700'}`}
            >
              Sign Up Now
            </a>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GuestDashboard;
</file>

<file path="src/pages/Orders/InvoicePage.jsx">
import React, { useState, useEffect, useRef } from 'react';
import { useParams, Link } from 'react-router-dom';
import { doc, getDoc, collection, query, where, getDocs } from 'firebase/firestore';
import { db } from '../../firebase/config';
import { format } from 'date-fns';

/**
 * InvoicePage Component
 * 
 * Displays a printable invoice for a specific order.
 * 
 * Features:
 * - Shows invoice header with company and order information
 * - Shows customer billing information
 * - Shows all items with prices, quantities, and totals
 * - Provides a print button
 * - Loading state handling
 */
const InvoicePage = () => {
  const { id } = useParams();
  const [order, setOrder] = useState(null);
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(true);
  const invoiceRef = useRef(null);
  
  // Fetch order and its items when component mounts
  useEffect(() => {
    const fetchOrderDetails = async () => {
      try {
        const orderRef = doc(db, 'orders', id);
        const orderSnap = await getDoc(orderRef);
        
        if (orderSnap.exists()) {
          setOrder({
            id: orderSnap.id,
            ...orderSnap.data()
          });
          
          // Fetch order items
          const itemsRef = collection(db, 'orderItems');
          const q = query(itemsRef, where('orderId', '==', id));
          const itemsSnap = await getDocs(q);
          
          const orderItems = [];
          itemsSnap.forEach(doc => {
            orderItems.push({
              id: doc.id,
              ...doc.data()
            });
          });
          
          setItems(orderItems);
        } else {
          console.error("Order not found");
        }
      } catch (error) {
        console.error("Error fetching order details:", error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchOrderDetails();
  }, [id]);
  
   // Print invoice content
  const handlePrint = () => {
    const printContents = invoiceRef.current.innerHTML;
    const originalContents = document.body.innerHTML;
    
    document.body.innerHTML = printContents;
    window.print();
    document.body.innerHTML = originalContents;
    window.location.reload();
  };
  
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }
  
   // Handle case where order is not found
  if (!order) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white shadow rounded-lg p-6">
          <h1 className="text-2xl font-bold mb-4">Order not found</h1>
          <Link to="/orders" className="text-indigo-600 hover:text-indigo-900">
            ‚Üê Back to Orders
          </Link>
        </div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6 flex justify-between items-center">
        <Link to={`/orders/${id}`} className="text-indigo-600 hover:text-indigo-900">
          ‚Üê Back to Order
        </Link>
        <button
          onClick={handlePrint}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Print Invoice
        </button>
      </div>
      
      <div ref={invoiceRef} className="bg-white shadow rounded-lg overflow-hidden p-8">
        <div className="flex justify-between items-start mb-8">
          <div>
            <h1 className="text-2xl font-bold">INVOICE</h1>
            <p className="text-gray-500 mt-1">{order.orderId || `#ORD-${id.substring(0, 5)}`}</p>
          </div>
          <div className="text-right">
            <h2 className="text-xl font-bold">Wholesaler App</h2>
            <p className="text-gray-500">123 Business Street</p>
            <p className="text-gray-500">Auckland, New Zealand</p>
            <p className="text-gray-500">contact@wholesaler.com</p>
          </div>
        </div>
        
          {/* Billing and Invoice Info */}
        <div className="grid grid-cols-2 gap-8 mb-8">
          <div>
            <h3 className="text-gray-500 font-medium mb-2">Bill To:</h3>
            <p className="font-medium">{order.customerName}</p>
            <p>{order.customerEmail || ''}</p>
            <p>{order.customerPhone || ''}</p>
            <p>{order.billingAddress?.street || ''}</p>
            <p>{order.billingAddress?.city || ''}, {order.billingAddress?.state || ''} {order.billingAddress?.zip || ''}</p>
          </div>
          <div>
            <h3 className="text-gray-500 font-medium mb-2">Invoice Details:</h3>
            <div className="flex justify-between mb-1">
              <span className="text-gray-500">Invoice Date:</span>
              <span>{format(new Date(), 'dd MMM yyyy')}</span>
            </div>
            <div className="flex justify-between mb-1">
              <span className="text-gray-500">Order Date:</span>
              <span>{order.dateCreated ? format(new Date(order.dateCreated.toDate()), 'dd MMM yyyy') : '-'}</span>
            </div>
            <div className="flex justify-between mb-1">
              <span className="text-gray-500">Status:</span>
              <span>{order.status}</span>
            </div>
          </div>
        </div>
        
        <table className="min-w-full divide-y divide-gray-200 mb-8">
          <thead>
            <tr>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Item</th>
              <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
              <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
              <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-gray-200">
            {items.map((item) => (
              <tr key={item.id}>
                <td className="px-4 py-4">
                  <div className="text-sm font-medium text-gray-900">{item.productName}</div>
                </td>
                <td className="px-4 py-4 text-right text-sm text-gray-500">
                  ${item.price?.toFixed(2)}
                </td>
                <td className="px-4 py-4 text-right text-sm text-gray-500">
                  {item.quantity}
                </td>
                <td className="px-4 py-4 text-right text-sm text-gray-900">
                  ${(item.price * item.quantity).toFixed(2)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        
          {/* Here is the summary of the order. */}
        <div className="flex justify-end">
          <div className="w-64">
            <div className="flex justify-between py-2 border-t">
              <span className="font-medium">Subtotal:</span>
              <span>
                ${items.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2)}
              </span>
            </div>
            <div className="flex justify-between py-2">
              <span className="font-medium">Tax:</span>
              <span>$0.00</span>
            </div>
            <div className="flex justify-between py-2 font-bold text-lg border-t">
              <span>Total:</span>
              <span>
                ${items.reduce((sum, item) => sum + (item.price * item.quantity), 0).toFixed(2)}
              </span>
            </div>
          </div>
        </div>
        
        <div className="mt-8 text-center text-gray-500 text-sm">
          <p>Thank you for your business!</p>
          <p>Payment is due within 30 days.</p>
        </div>
      </div>
    </div>
  );
};

export default InvoicePage;
</file>

<file path="src/pages/Dashboard.jsx">
// src/pages/Dashboard.jsx
import { useState, useEffect, useMemo, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { collection, getDocs, query, where, orderBy, limit, doc, getDoc } from 'firebase/firestore';
import { db } from '../firebase/config';
import { useTheme } from '../context/ThemeContext';

// Simple chart component for data visualization
const SimpleBarChart = ({ data, title, description, color, darkMode }) => {
  const max = Math.max(...data.map(item => item.value));
  
  return (
    <div className="mb-6">
      <h3 className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>{title}</h3>
      {description && <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-3`}>{description}</p>}
      <div className="space-y-2">
        {data.map((item, index) => (
          <div key={index} className="flex items-center">
            <span className={`text-xs w-16 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>{item.name}</span>
            <div className="flex-1 ml-2">
              <div className={`h-4 rounded-full bg-${color}-${darkMode ? '900/30' : '100'} overflow-hidden`}>
                <div 
                  className={`h-4 rounded-full bg-${color}-${darkMode ? '500' : '600'}`} 
                  style={{ width: `${(item.value / max) * 100}%` }}
                ></div>
              </div>
            </div>
            <span className={`ml-2 text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
              {item.value}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};
const FeaturedProducts = ({ products, darkMode }) => {
  // Get the top 4 products to feature
  const featuredProducts = products.slice(0, 4);
  
  return (
    <motion.div 
      className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: 0.2 }}
    >
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Featured Products</h2>
      </div>
      
      <div className="p-5 grid grid-cols-2 gap-4">
        {featuredProducts.map((product) => (
          <Link 
            key={product.id}
            to={`/inventory/${product.id}`}
            className={`flex flex-col p-4 rounded-xl 
              hover:bg-gray-${darkMode ? '700' : '50'} 
              transition-all duration-300 border ${darkMode ? 
                'border-gray-700' : 
                'border-gray-100'}`}
          >
            <div className="h-32 w-full mb-3 bg-gray-100 dark:bg-gray-700 rounded-lg overflow-hidden">
              {product.imageUrl ? (
                <img 
                  src={product.imageUrl} 
                  alt={product.name} 
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center bg-gray-200 dark:bg-gray-800">
                  <svg className="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
              )}
            </div>
            <span className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-800'}`}>
              {product.name}
            </span>
            <div className="flex justify-between mt-2">
              <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                {product.category}
              </span>
              <span className={`text-xs font-bold ${darkMode ? 'text-indigo-400' : 'text-indigo-600'}`}>
                ${parseFloat(product.price).toFixed(2)}
              </span>
            </div>
          </Link>
        ))}
      </div>
      <div className={`border-t ${darkMode ? 'border-gray-700 bg-gray-700' : 'border-gray-100 bg-gray-50'} px-6 py-3`}>
        <Link 
          to="/inventory" 
          className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center`}
        >
          View all products
          <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </Link>
      </div>
    </motion.div>
  );
};

// Enhanced Activity Timeline with expandable details
const ActivityTimeline = ({ activities, darkMode }) => {
  const [filter, setFilter] = useState('all');
  const [expandedId, setExpandedId] = useState(null);
  
  // Filter activities based on selected type
  const filteredActivities = useMemo(() => {
    if (filter === 'all') return activities;
    return activities.filter(activity => activity.type === filter);
  }, [activities, filter]);
  
  const handleActivityClick = (id) => {
    setExpandedId(expandedId === id ? null : id);
  };
  
  return (
    <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}>
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'} flex justify-between items-center`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Recent Activities</h2>
        <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} flex items-center`}>
          <span className="mr-2">Filter by:</span>
          <select 
            className={`form-select rounded-md ${darkMode ? 'bg-gray-700 border-gray-600 text-gray-300' : 'border-gray-300 text-gray-600'} text-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50`}
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
          >
            <option value="all">All Activities</option>
            <option value="order">Orders</option>
            <option value="inventory">Inventory</option>
          </select>
        </div>
      </div>
      <div className={`divide-y ${darkMode ? 'divide-gray-700' : 'divide-gray-100'}`}>
        {filteredActivities.length > 0 ? (
          filteredActivities.map((activity) => (
            <div 
              key={activity.id} 
              className={`p-5 ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'} transition-colors cursor-pointer`}
              onClick={() => handleActivityClick(activity.id)}
            >
              <div className="flex items-start">
                <div className={`flex-shrink-0 h-10 w-10 rounded-full flex items-center justify-center ${
                  activity.type === 'order' 
                    ? darkMode ? 'bg-blue-900/30 text-blue-400' : 'bg-blue-100 text-blue-600'
                    : darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-600'
                }`}>
                  {activity.type === 'order' ? (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                    </svg>
                  ) : (
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10" />
                    </svg>
                  )}
                </div>
                <div className="ml-4 flex-1">
                  <div className="flex justify-between">
                    <p className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>{activity.description}</p>
                    <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>{activity.time}</span>
                  </div>
                  <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>
                    {activity.type === 'order' ? 'Order Management' : 'Inventory Update'}
                  </p>
                  
                  {/* Expanded details */}
                  {expandedId === activity.id && (
                    <div className={`mt-4 pt-4 border-t ${darkMode ? 'border-gray-700' : 'border-gray-200'} animate-fade-in`}>
                      {activity.type === 'order' ? (
                        <div className="space-y-3">
                          <div className="flex items-center justify-between">
                            <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Reference:</span>
                            <span className={`text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                              #{activity.id.substring(0, 8)}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Status:</span>
                            <span className={`px-2 py-0.5 rounded-full text-xs font-medium 
                              ${darkMode ? 'bg-blue-900/20 text-blue-400' : 'bg-blue-100 text-blue-700'}`}>
                              Processing
                            </span>
                          </div>
                          <div className="mt-2 text-right">
                            <Link 
                              to={`/orders/${activity.id.replace('order-', '')}`} 
                              className={`text-xs font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-700'}`}
                              onClick={(e) => e.stopPropagation()}
                            >
                              View details
                            </Link>
                          </div>
                        </div>
                      ) : (
                        <div className="space-y-3">
                          <div className="flex items-center justify-between">
                            <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Product:</span>
                            <span className={`text-xs font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                              {activity.description.includes('"') 
                                ? activity.description.split('"')[1] 
                                : 'Unknown product'}
                            </span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Stock level:</span>
                            <span className={`px-2 py-0.5 rounded-full text-xs font-medium 
                              ${darkMode ? 'bg-red-900/20 text-red-400' : 'bg-red-100 text-red-700'}`}>
                              Low stock
                            </span>
                          </div>
                          <div className="mt-2 text-right">
                            <Link 
                              to="/inventory" 
                              className={`text-xs font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-700'}`}
                              onClick={(e) => e.stopPropagation()}
                            >
                              View inventory
                            </Link>
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))
        ) : (
          <div className="p-6 text-center">
            <p className={`${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>No activities found with the selected filter.</p>
          </div>
        )}
      </div>
      <div className={`${darkMode ? 'bg-gray-700 border-gray-700' : 'bg-gray-50 border-gray-100'} px-6 py-3 border-t`}>
        <Link to="/activity" className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center`}>
          View all activities
          <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </Link>
      </div>
    </div>
  );
};

// Interactive QuickActions Component
const QuickActions = ({ darkMode }) => {
  const [hoverIndex, setHoverIndex] = useState(null);
  
  const actions = [
    {
      id: 'new-order',
      to: '/create-order',
      name: 'New Order',
      description: 'Create customer order',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
      ),
      color: 'blue'
    },
    {
      id: 'add-product',
      to: '/inventory',
      name: 'Add Product',
      description: 'Add to inventory',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
      ),
      color: 'green'
    },
    {
      id: 'low-stock',
      to: '/inventory',
      name: 'Low Stock',
      description: 'View alerts',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      ),
      color: 'yellow'
    },
    {
      id: 'pending-orders',
      to: '/orders',
      name: 'Pending Orders',
      description: 'Process orders',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      ),
      color: 'purple'
    },
  ];
  
  return (
    <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}>
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Quick Actions</h2>
      </div>
      <div className="p-5 grid grid-cols-2 gap-4">
        {actions.map((action, index) => (
          <Link 
            key={action.id}
            to={action.to}
            className={`flex flex-col items-center p-4 rounded-xl 
              hover:bg-${action.color}-${darkMode ? '900/20' : '50'} 
              transition-all duration-300 transform ${hoverIndex === index ? 'scale-105' : 'scale-100'}
              group border ${darkMode ? 
                `border-gray-700 hover:border-${action.color}-800` : 
                `border-gray-100 hover:border-${action.color}-100`}`}
            onMouseEnter={() => setHoverIndex(index)}
            onMouseLeave={() => setHoverIndex(null)}
          >
            <div className={`h-12 w-12 rounded-full ${darkMode ? 
              `bg-${action.color}-900/30` : 
              `bg-${action.color}-100`} 
              flex items-center justify-center mb-3 
              ${darkMode ? 
                `group-hover:bg-${action.color}-900/50` : 
                `group-hover:bg-${action.color}-200`} 
              transition-colors`}
            >
              <span className={`${darkMode ? 
                `text-${action.color}-400` : 
                `text-${action.color}-600`}`}
              >
                {action.icon}
              </span>
            </div>
            <span className={`text-sm font-medium ${darkMode ? 
              `text-gray-200 group-hover:text-${action.color}-400` : 
              `text-gray-800 group-hover:text-${action.color}-700`}`}
            >
              {action.name}
            </span>
            <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>
              {action.description}
            </span>
          </Link>
        ))}
      </div>
    </div>
  );
};

// Enhanced Orders Table with search function
const OrdersTable = ({ orders, darkMode }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  
  const filteredOrders = useMemo(() => {
    let result = orders;
    
    // Filter by status
    if (statusFilter !== 'all') {
      result = result.filter(order => order.status === statusFilter);
    }
    
    // Filter by search term
    if (searchTerm.trim()) {
      const term = searchTerm.toLowerCase().trim();
      result = result.filter(order => 
        order.customerName.toLowerCase().includes(term) ||
        order.id.toLowerCase().includes(term)
      );
    }
    
    return result;
  }, [orders, statusFilter, searchTerm]);
  
  return (
    <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}>
      <div className={`flex flex-col sm:flex-row sm:justify-between sm:items-center p-6 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-3 sm:mb-0`}>Recent Orders</h2>
        <div className="flex flex-col sm:flex-row gap-3">
          {/* Search input */}
          <div className="relative">
            <input
              type="text"
              placeholder="Search orders..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={`pl-9 pr-4 py-2 rounded-lg ${
                darkMode ? 'bg-gray-700 border-gray-600 text-gray-200 placeholder-gray-400' : 'bg-white border-gray-300 text-gray-800'
              } border focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm transition-colors`}
            />
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-4 w-4 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>
          
          {/* Status filter */}
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className={`form-select rounded-md ${darkMode ? 'bg-gray-700 border-gray-600 text-gray-300' : 'border-gray-300 text-gray-600'} text-sm pr-8 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50`}
          >
            <option value="all">All orders</option>
            <option value="completed">Completed</option>
            <option value="pending">Pending</option>
            <option value="cancelled">Cancelled</option>
          </select>
          
          <Link to="/orders" className={`${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} font-medium flex items-center text-sm`}>
            View all
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </Link>
        </div>
      </div>
      
      {orders.length > 0 ? (
        <>
          <div className="overflow-x-auto">
            <table className="w-full text-left">
              <thead>
                <tr className={`${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-100'} border-b`}>
                  <th className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Order ID</th>
                  <th className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Customer</th>
                  <th className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Date</th>
                  <th className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Items</th>
                  <th className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Total</th>
                  <th className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Status</th>
                  <th className={`px-6 py-3 text-xs font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wider`}>Actions</th>
                </tr>
              </thead>
              <tbody className={`divide-y ${darkMode ? 'divide-gray-700' : 'divide-gray-100'}`}>
                {filteredOrders.length > 0 ? (
                  filteredOrders.map((order) => (
                    <tr key={order.id} className={`${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'} transition-colors`}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>#{order.id.slice(0, 6)}</span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className={`h-8 w-8 flex-shrink-0 rounded-full ${darkMode ? 'bg-gray-600 text-gray-300' : 'bg-gray-200 text-gray-500'} flex items-center justify-center font-medium`}>
                            {order.customerName.charAt(0)}
                          </div>
                          <div className="ml-3">
                            <div className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>{order.customerName}</div>
                          </div>
                        </div>
                      </td>
                      <td className={`px-6 py-4 whitespace-nowrap text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                        {order.createdAt.toLocaleDateString('en-US', { 
                          year: 'numeric', 
                          month: 'short', 
                          day: 'numeric' 
                        })}
                      </td>
                      <td className={`px-6 py-4 whitespace-nowrap text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                        <div className="flex items-center">
                          <div className={`h-6 w-6 rounded-full ${darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600'} flex items-center justify-center text-xs font-medium`}>
                            {order.itemCount || (order.items && order.items.length) || 0}
                          </div>
                          <span className="ml-2">items</span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className={`text-sm font-bold ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>${parseFloat(order.total).toFixed(2)}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium
                          ${order.status === 'completed' 
                            ? darkMode ? 'bg-green-900/30 text-green-400' : 'bg-green-100 text-green-800'
                            : order.status === 'pending' 
                              ? darkMode ? 'bg-yellow-900/30 text-yellow-400' : 'bg-yellow-100 text-yellow-800'
                              : darkMode ? 'bg-red-900/30 text-red-400' : 'bg-red-100 text-red-800'}`}>
                          {order.status === 'completed' && (
                            <svg className={`mr-1.5 h-2 w-2 ${darkMode ? 'text-green-400' : 'text-green-500'}`} fill="currentColor" viewBox="0 0 8 8">
                              <circle cx="4" cy="4" r="3" />
                            </svg>
                          )}
                          {order.status === 'pending' && (
                            <svg className={`mr-1.5 h-2 w-2 ${darkMode ? 'text-yellow-400' : 'text-yellow-500'}`} fill="currentColor" viewBox="0 0 8 8">
                              <circle cx="4" cy="4" r="3" />
                            </svg>
                          )}
                          {order.status === 'cancelled' && (
                            <svg className={`mr-1.5 h-2 w-2 ${darkMode ? 'text-red-400' : 'text-red-500'}`} fill="currentColor" viewBox="0 0 8 8">
                              <circle cx="4" cy="4" r="3" />
                            </svg>
                          )}
                          {order.status}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <Link to={`/orders/${order.id}`} className={`${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-900'} mr-3`}>View</Link>
                        <a href="#" className={`${darkMode ? 'text-gray-400 hover:text-gray-300' : 'text-gray-600 hover:text-gray-900'}`}>Edit</a>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan="7" className="px-6 py-8 text-center">
                      <p className={`${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>No orders found with the current filters.</p>
                      <button 
                        onClick={() => { setSearchTerm(''); setStatusFilter('all'); }}
                        className={`mt-2 text-sm ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} font-medium`}
                      >
                        Reset filters
                      </button>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </>
      ) : (
        <div className="text-center py-12">
          <svg xmlns="http://www.w3.org/2000/svg" className={`h-12 w-12 mx-auto ${darkMode ? 'text-gray-600' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
          </svg>
          <p className={`mt-2 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>No recent orders found.</p>
          <Link to="/create-order" className={`mt-3 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md ${darkMode ? 'text-indigo-300 bg-indigo-900/30 hover:bg-indigo-900/50' : 'text-indigo-700 bg-indigo-100 hover:bg-indigo-200'}`}>
            Create your first order
          </Link>
        </div>
      )}
    </div>
  );
};

// Skeleton Loader for better loading UX
const SkeletonLoader = ({ type, darkMode }) => {
  const bgColor = darkMode ? 'bg-gray-700' : 'bg-gray-200';
  const pulseClass = 'animate-pulse';
  
  if (type === 'card') {
    return (
      <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-md overflow-hidden h-40`}>
        <div className="p-6">
          <div className="flex items-center">
            <div className={`${bgColor} ${pulseClass} h-12 w-12 rounded-xl`}></div>
            <div className="ml-5 space-y-2">
              <div className={`${bgColor} ${pulseClass} h-4 w-24 rounded`}></div>
              <div className={`${bgColor} ${pulseClass} h-6 w-16 rounded`}></div>
            </div>
          </div>
          <div className="mt-4">
            <div className={`${bgColor} ${pulseClass} h-4 w-full rounded`}></div>
          </div>
        </div>
      </div>
    );
  }
  
  if (type === 'table') {
    return (
      <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-md overflow-hidden`}>
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between">
            <div className={`${bgColor} ${pulseClass} h-6 w-40 rounded`}></div>
            <div className={`${bgColor} ${pulseClass} h-6 w-24 rounded`}></div>
          </div>
        </div>
        <div className="p-6 space-y-4">
          {[1, 2, 3].map(i => (
            <div key={i} className="flex items-center space-x-4">
              <div className={`${bgColor} ${pulseClass} h-10 w-10 rounded-full`}></div>
              <div className="flex-1">
                <div className={`${bgColor} ${pulseClass} h-4 w-full rounded mb-2`}></div>
                <div className={`${bgColor} ${pulseClass} h-3 w-1/2 rounded`}></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }
  
  return null;
};

// Enhanced Analytics component with visualization
const Analytics = ({ metrics, stats, darkMode }) => {
  // Sample data for the chart
  const monthlyData = [
    { name: 'Jan', value: 3200 },
    { name: 'Feb', value: 4100 },
    { name: 'Mar', value: 3800 },
    { name: 'Apr', value: 5200 },
    { name: 'May', value: 6100 },
    { name: 'Jun', value: metrics?.revenue?.total || 7320 },
  ];
  
  const categoryData = [
    { name: 'Electronics', value: 42 },
    { name: 'Office', value: 28 },
    { name: 'Furniture', value: 16 },
    { name: 'Other', value: 14 },
  ];
  
  return (
    <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}>
      <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
        <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Performance Metrics</h2>
      </div>
      
      <div className="p-6">
        <div className="mb-6">
          <div className="flex justify-between items-center mb-2">
            <div className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>Revenue this month</div>
            <span className="text-sm text-green-600 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
              </svg>
              {metrics?.revenue?.percentChange || 16}%
            </span>
          </div>
          <div className="relative pt-1">
            <div className={`overflow-hidden h-2 text-xs flex rounded ${darkMode ? 'bg-indigo-900/30' : 'bg-indigo-200'}`}>
              <div style={{ width: "70%" }} className={`shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center ${darkMode ? 'bg-indigo-500' : 'bg-indigo-600'} transition-all duration-500`}></div>
            </div>
            <div className={`flex justify-between mt-1 text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              <span>$0</span>
              <span>${metrics?.revenue?.total || '7,320.80'}</span>
            </div>
          </div>
        </div>
        
        <SimpleBarChart 
          title="Monthly Revenue" 
          description="Sales performance over the last 6 months" 
          data={monthlyData} 
          color="indigo" 
          darkMode={darkMode} 
        />
        
        <SimpleBarChart 
          title="Inventory by Category" 
          description="Distribution of products across categories" 
          data={categoryData} 
          color="green" 
          darkMode={darkMode} 
        />
      </div>
      
      <div className={`border-t ${darkMode ? 'border-gray-700 bg-gray-700' : 'border-gray-100 bg-gray-50'} px-6 py-3`}>
        <a href="#" className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center`}>
          Generate detailed report
          <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>
    </div>
  );
};

// Main Dashboard Component
const Dashboard = () => {
  const { darkMode } = useTheme();
  
  // State for dashboard data
  const [stats, setStats] = useState({
    totalProducts: 0,
    lowStockProducts: 0,
    totalOrders: 0,
    recentOrders: []
  });
  const [activities, setActivities] = useState([]);
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [lastUpdated, setLastUpdated] = useState(new Date());
  const lowStockThreshold = 10;
  
  // Fetch dashboard data from Firebase
  useEffect(() => {
    async function fetchDashboardData() {
      try {
        setLoading(true);
        setError(null);

        // Fetch product stats
        const productsRef = collection(db, 'products');
        const productsSnapshot = await getDocs(productsRef);
        const products = productsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        
        // Calculate product stats
        const totalProducts = products.length;
        const lowStockProducts = products.filter(
          product => product.stock <= lowStockThreshold
        ).length;

        // Fetch recent orders
        const ordersRef = collection(db, 'orders');
        const recentOrdersQuery = query(
          ordersRef,
          orderBy('createdAt', 'desc'),
          limit(5)
        );
        
        const ordersSnapshot = await getDocs(recentOrdersQuery);
        const recentOrders = ordersSnapshot.docs.map(doc => {
          const data = doc.data();
          // Handle potential missing fields or different timestamp formats
          const createdAt = data.createdAt ? 
            (typeof data.createdAt.toDate === 'function' ? 
              data.createdAt.toDate() : new Date(data.createdAt)) : 
            new Date();
            
          return {
            id: doc.id,
            customerName: data.customerName || 'Unknown Customer',
            createdAt,
            items: data.items || [],
            itemCount: data.itemCount || 0,
            total: data.total || 0,
            status: data.status || 'pending'
          };
        });

        // Get total orders count
        const ordersCountSnapshot = await getDocs(collection(db, 'orders'));
        const totalOrders = ordersCountSnapshot.size;

        // Try to get metrics data (added in new seed)
        try {
          const metricsDoc = await getDoc(doc(db, 'metrics', 'current'));
          if (metricsDoc.exists()) {
            setMetrics(metricsDoc.data());
          }
        } catch (metricsError) {
          console.log('Metrics not available:', metricsError);
          // Not critical, continue without metrics
        }

        // Generate activities from recent actions
        const activitiesRef = collection(db, 'activities');
        const activitiesQuery = query(
          activitiesRef,
          orderBy('createdAt', 'desc'),
          limit(5)
        );
        
        const activitiesSnapshot = await getDocs(activitiesQuery);
        const fetchedActivities = activitiesSnapshot.docs.map(doc => {
          const data = doc.data();
          const activityDate = data.createdAt ? 
            (typeof data.createdAt.toDate === 'function' ? 
              data.createdAt.toDate() : new Date(data.createdAt)) : 
            new Date();
            
          return {
            id: doc.id,
            type: data.type || 'order',
            description: data.description || 'Activity',
            time: getRelativeTime(activityDate),
            createdAt: activityDate
          };
        });

        // If no activities found, generate from orders and products
        const combinedActivities = fetchedActivities.length > 0 ? 
          fetchedActivities : [];
        
        // Add order activities if no activities found
        if (combinedActivities.length === 0 && recentOrders.length > 0) {
          recentOrders.forEach((order, index) => {
            combinedActivities.push({
              id: `order-${order.id}`,
              type: 'order',
              description: `New order from ${order.customerName}`,
              time: getRelativeTime(order.createdAt),
              createdAt: order.createdAt
            });
          });

          // Add inventory activities for low stock
          const lowStockItems = products.filter(product => product.stock <= lowStockThreshold);
          lowStockItems.slice(0, 3).forEach((product, index) => {
            combinedActivities.push({
              id: `inventory-${product.id}`,
              type: 'inventory',
              description: `Product "${product.name}" is low on stock`,
              time: 'Today', // Fallback
              createdAt: new Date()
            });
          });
        }

        // Sort activities by time
        combinedActivities.sort((a, b) => b.createdAt - a.createdAt);

        // Update state with all fetched data
        setStats({
          totalProducts,
          lowStockProducts,
          totalOrders,
          recentOrders
        });
        
        setActivities(combinedActivities);
        setLastUpdated(new Date());
        setLoading(false);
      } catch (err) {
        console.error('Error fetching dashboard data:', err);
        setError('Failed to load dashboard data. Please try again later.');
        setLoading(false);
      }
    }

    fetchDashboardData();
  }, [lowStockThreshold]);

  // Helper function to format relative time
  function getRelativeTime(date) {
    if (!date) return 'Unknown';
    
    const now = new Date();
    const diffMs = now - date;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

    if (diffMinutes < 60) {
      return diffMinutes <= 1 ? 'Just now' : `${diffMinutes} minutes ago`;
    } else if (diffHours < 24) {
      return `${diffHours} ${diffHours === 1 ? 'hour' : 'hours'} ago`;
    } else if (diffDays < 7) {
      return diffDays === 1 ? 'Yesterday' : `${diffDays} days ago`;
    } else {
      return date.toLocaleDateString();
    }
  }

  // Handle refresh - now with useCallback for better performance
  const handleRefresh = useCallback(() => {
    window.location.reload();
  }, []);
  
  // Memoize stat cards data to prevent unnecessary recalculations
  const statCards = useMemo(() => [
    {
      id: 'products',
      title: 'Products',
      value: stats.totalProducts,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10" />
        </svg>
      ),
      color: 'indigo',
      description: 'in inventory',
      link: '/inventory',
      linkText: 'View inventory',
      trend: 'up'
    },
    {
      id: 'low-stock',
      title: 'Low Stock',
      value: stats.lowStockProducts,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      ),
      color: 'red',
      description: 'need attention',
      link: '/inventory',
      linkText: 'View alerts',
      trend: 'down'
    },
    {
      id: 'orders',
      title: 'Orders',
      value: stats.totalOrders,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
        </svg>
      ),
      color: 'green',
      description: 'total orders',
      link: '/orders',
      linkText: 'View orders',
      trend: 'up'
    }
  ], [stats.totalProducts, stats.lowStockProducts, stats.totalOrders]);

  // CSS for animations
  useEffect(() => {
    // Add CSS for animations to document head
    const style = document.createElement('style');
    style.textContent = `
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      .animate-fade-in {
        animation: fadeIn 0.3s ease-out forwards;
      }
    `;
    document.head.appendChild(style);
    
    // Clean up on unmount
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  return (
    <div className={`container mx-auto px-4 py-8 max-w-7xl ${darkMode ? 'text-gray-200' : 'text-gray-800'}`}>
      {/* Page Header */}
      <div className="mb-8">
        <div className="flex flex-col md:flex-row md:justify-between md:items-center">
          <div>
            <h1 className={`text-3xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>Welcome to Your Dashboard</h1>
            <p className={`mt-1 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              Here's what's happening with your business today
            </p>
          </div>
          <div className="mt-4 md:mt-0 flex items-center space-x-3">
            <span className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              Last updated: {lastUpdated.toLocaleTimeString()}
            </span>
            <button 
              className={`p-2 ${darkMode ? 'bg-gray-700 text-indigo-400 border-gray-600' : 'bg-white text-indigo-600 border-gray-200'} rounded-full hover:bg-indigo-${darkMode ? '900' : '50'} border shadow-sm transition-colors`}
              onClick={handleRefresh}
              disabled={loading}
              aria-label="Refresh dashboard data"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${loading ? 'animate-spin' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
            </button>
            <button className={`inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${darkMode ? 'bg-indigo-700 hover:bg-indigo-800' : 'bg-indigo-600 hover:bg-indigo-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors`}>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Export Report
            </button>
          </div>
        </div>
        
        {/* Breadcrumbs */}
        <nav className="mt-4">
          <ol className={`flex items-center space-x-1 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            <li>
              <Link to="/" className={`hover:text-indigo-${darkMode ? '400' : '600'} transition-colors`}>Home</Link>
            </li>
            <li className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </li>
            <li>
              <span className={`${darkMode ? 'text-gray-300' : 'text-gray-800'} font-medium`}>Dashboard</span>
            </li>
          </ol>
        </nav>
      </div>
      
      {/* Loading state with skeleton loaders */}
      {loading ? (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-8">
            {/* Stats Cards Skeletons */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {[1, 2, 3].map(i => (
                <SkeletonLoader key={i} type="card" darkMode={darkMode} />
              ))}
            </div>
            
            {/* Table and Activity Skeletons */}
            <SkeletonLoader type="table" darkMode={darkMode} />
            <SkeletonLoader type="table" darkMode={darkMode} />
          </div>
          
          <div className="space-y-8">
            <SkeletonLoader type="table" darkMode={darkMode} />
            <SkeletonLoader type="table" darkMode={darkMode} />
          </div>
        </div>
      ) : error ? (
        <div className={`${darkMode ? 'bg-red-900/20 border-red-800 text-red-300' : 'bg-red-50 border-red-400 text-red-700'} border-l-4 p-4 mb-6`}>
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className={`h-5 w-5 ${darkMode ? 'text-red-500' : 'text-red-400'}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className={`text-sm ${darkMode ? 'text-red-300' : 'text-red-700'}`}>{error}</p>
              <button 
                onClick={handleRefresh}
                className={`mt-2 text-sm ${darkMode ? 'text-red-300 hover:text-red-200' : 'text-red-700 hover:text-red-600'} font-medium focus:outline-none`}
              >
                Try Again
              </button>
            </div>
          </div>
        </div>
      ) : (
        // Dashboard content
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-8">
            {/* Stats Cards - now using memoized data */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              {statCards.map(card => (
                <div 
                  key={card.id}
                  className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-md overflow-hidden transition-all duration-300 transform hover:scale-105 border hover:shadow-lg`}
                >
                  <div className="px-6 py-5">
                    <div className="flex items-center">
                      <div className={`flex-shrink-0 rounded-xl ${darkMode ? `bg-${card.color}-900/30` : `bg-${card.color}-100`} p-3`}>
                        <span className={`${darkMode ? `text-${card.color}-400` : `text-${card.color}-600`}`}>
                          {card.icon}
                        </span>
                      </div>
                      <div className="ml-5">
                        <div className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-500'} uppercase tracking-wide`}>{card.title}</div>
                        <div className={`mt-1 text-3xl font-extrabold ${darkMode ? `text-${card.color}-400` : `text-${card.color}-600`}`}>{card.value}</div>
                        <div className="mt-1 flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" className={`h-4 w-4 ${
                            card.trend === 'up' ? 'text-green-500' : 'text-red-500'
                          }`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={
                              card.trend === 'up' 
                                ? "M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" 
                                : "M13 17h8m0 0V9m0 8l-8-8-4 4-6-6"
                            } />
                          </svg>
                          <span className={`text-sm ${
                            card.trend === 'up' ? darkMode ? 'text-green-400' : 'text-green-600' : darkMode ? 'text-red-400' : 'text-red-600'
                          } ml-1`}>{card.description}</span>
                        </div>
                      </div>
                    </div>
                    <div className="mt-6">
                      <Link to={card.link} className={`text-sm ${darkMode ? `text-${card.color}-400 hover:text-${card.color}-300` : `text-${card.color}-600 hover:text-${card.color}-800`} font-medium flex items-center`}>
                        {card.linkText}
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </Link>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            {/* Recent Orders - Enhanced with search functionality */}
            <OrdersTable orders={stats.recentOrders} darkMode={darkMode} />
            
            {/* Activity Timeline - Enhanced with expandable details */}
            <ActivityTimeline activities={activities} darkMode={darkMode} />
          </div>

          {/* Right Sidebar with Enhanced Components */}
          <div className="space-y-8">
            {/* Quick Actions - Enhanced with hover effects */}
            <QuickActions darkMode={darkMode} />
            
            {/* Analytics with data visualization */}
            <Analytics metrics={metrics} stats={stats} darkMode={darkMode} />
            
            {/* Upcoming Deliveries */}
            <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-100'} rounded-xl shadow-lg overflow-hidden border`}>
              <div className={`px-6 py-4 border-b ${darkMode ? 'border-gray-700' : 'border-gray-100'}`}>
                <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Upcoming Deliveries</h2>
              </div>
              
              <div className="p-6 space-y-4">
                <div className={`flex items-center p-4 rounded-lg ${darkMode ? 'bg-blue-900/20 border-blue-800' : 'bg-blue-50 border-blue-100'} border`}>
                  <div className={`h-10 w-10 rounded-full ${darkMode ? 'bg-blue-900/50' : 'bg-blue-100'} flex items-center justify-center`}>
                    <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${darkMode ? 'text-blue-400' : 'text-blue-600'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l3.414 3.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0m-4 0a2 2 0 114 0m6 0a2 2 0 104 0m-4 0a2 2 0 114 0" />
                    </svg>
                  </div>
                  <div className="ml-4 flex-1">
                    <p className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>Office Supplies Delivery</p>
                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>Arriving Today, 2:30 PM</p>
                    
                    {/* Added progress bar */}
                    <div className="mt-2 w-full bg-blue-200 rounded-full h-1.5 dark:bg-blue-700/30">
                      <div className={`${darkMode ? 'bg-blue-500' : 'bg-blue-600'} h-1.5 rounded-full`} style={{ width: '75%' }}></div>
                    </div>
                    <div className="flex justify-between mt-1">
                      <span className={`text-xs ${darkMode ? 'text-blue-400' : 'text-blue-600'} font-medium`}>In Transit</span>
                      <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>75%</span>
                    </div>
                  </div>
                </div>
                
                <div className={`flex items-center p-4 rounded-lg ${darkMode ? 'bg-green-900/20 border-green-800' : 'bg-green-50 border-green-100'} border`}>
                  <div className={`h-10 w-10 rounded-full ${darkMode ? 'bg-green-900/50' : 'bg-green-100'} flex items-center justify-center`}>
                    <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${darkMode ? 'text-green-400' : 'text-green-600'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z" />
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l3.414 3.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0m-4 0a2 2 0 114 0m6 0a2 2 0 104 0m-4 0a2 2 0 114 0" />
                    </svg>
                  </div>
                  <div className="ml-4 flex-1">
                    <p className={`text-sm font-medium ${darkMode ? 'text-gray-200' : 'text-gray-900'}`}>Electronics Shipment</p>
                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>Arriving Tomorrow, 10:00 AM</p>
                    
                    {/* Added progress bar */}
                    <div className="mt-2 w-full bg-green-200 rounded-full h-1.5 dark:bg-green-700/30">
                      <div className={`${darkMode ? 'bg-green-500' : 'bg-green-600'} h-1.5 rounded-full`} style={{ width: '40%' }}></div>
                    </div>
                    <div className="flex justify-between mt-1">
                      <span className={`text-xs ${darkMode ? 'text-green-400' : 'text-green-600'} font-medium`}>Processing</span>
                      <span className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>40%</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className={`border-t ${darkMode ? 'border-gray-700 bg-gray-700' : 'border-gray-100 bg-gray-50'} px-6 py-3`}>
                <a href="#" className={`text-sm font-medium ${darkMode ? 'text-indigo-400 hover:text-indigo-300' : 'text-indigo-600 hover:text-indigo-800'} flex items-center justify-center`}>
                  View all deliveries
                  <svg xmlns="http://www.w3.org/2000/svg" className="ml-1 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Dashboard;
</file>

</files>
