import{f as q,d as a,e as u,N as g,c as l,s as A,W as D,q as E,g as I}from"./index-l2F0ffZz.js";const p="orders",y="products",R=async s=>{try{const o=q(a),{items:r,...c}=s,n=r.reduce((t,e)=>t+e.price*e.quantity,0),i=n*.1,d=n+i;for(const t of r){const e=u(a,y,t.productId),h=await g(e);if(!h.exists())throw new Error(`Product ${t.productName} not found`);const w=h.data();if(w.stock<t.quantity)throw new Error(`Insufficient stock for ${t.productName}. Available: ${w.stock}, Requested: ${t.quantity}`)}const f=u(l(a,p)),m=A();o.set(f,{...c,subtotal:n,taxAmount:i,totalAmount:d,total:d,createdAt:m,dateCreated:m,updatedAt:m,status:c.status||"pending",paymentStatus:c.paymentStatus||"pending"});for(const t of r){const e=u(a,y,t.productId);o.update(e,{stock:D(-t.quantity),updatedAt:m})}for(const t of r){const e=u(l(a,p,f.id,"orderItems"));o.set(e,{productId:t.productId,productName:t.productName,price:t.price,quantity:t.quantity,subtotal:t.price*t.quantity})}return await o.commit(),f.id}catch(o){throw console.error("Error creating order with stock update:",o),o}},N=async s=>{try{const o=await g(u(a,p,s));if(!o.exists())throw new Error(`Order with ID ${s} not found`);const r=o.data(),c=E(l(a,p,s,"orderItems")),n=await I(c),i=[];return n.forEach(d=>{i.push({id:d.id,...d.data()})}),{id:o.id,...r,items:i,totalAmount:r.totalAmount||r.total||0,total:r.total||r.totalAmount||0}}catch(o){throw console.error("Error getting order with items:",o),o}};export{R as c,N as g};
