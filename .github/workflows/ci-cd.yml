name: "🚀 CI/CD Pipeline"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 20
  VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
  VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
  VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
  VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
  VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
  VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

# needed so Semgrep can upload SARIF to the Security tab
permissions:
  contents: read
  pull-requests: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # -------------------- OWASP: Secrets scanning (A08) --------------------
  gitleaks:
    name: Secrets scan (A08)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          # exits non-zero if leaks are found
          args: detect --no-git -v

  # -------------------- OWASP: SAST (A01–A10) ----------------------------
  semgrep:
    name: SAST OWASP Top 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.cache/semgrep
          key: semgrep-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            semgrep-${{ runner.os }}-

      - name: Run Semgrep (OWASP rules)
        uses: semgrep/semgrep-action@v1
        with:
          config: p/owasp-top-ten
          generateSarif: true
          # fail the job on findings; remove --error if you only want reports
          args: --error

      - name: Upload SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  # -------------------- Your existing CI chain ---------------------------
  test:
    runs-on: ubuntu-latest
    needs: [gitleaks, semgrep]   # gate CI on security checks
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci --no-audit --progress=false
      - run: npm run ci
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: ignore
          retention-days: 3

  # -------------------- Deploy to Firebase Hosting ----------------------
  deploy:
    needs: [test]                 # indirectly depends on gitleaks + semgrep
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci --no-audit --progress=false
      - run: npm run build
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }} # JSON string
          channelId: live
          projectId: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      - name: Print Hosting URL (and add to summary)
        run: |
          echo "Deployed to: https://${{ secrets.VITE_FIREBASE_PROJECT_ID }}.web.app"
          {
            echo "### Deployment"
            echo "- Live: https://${{ secrets.VITE_FIREBASE_PROJECT_ID }}.web.app"
          } >> $GITHUB_STEP_SUMMARY
