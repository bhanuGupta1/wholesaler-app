name: "🚀 CI/CD Pipeline"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 20
  VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
  VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
  VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
  VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
  VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
  VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

# So SARIF shows up under Security > Code scanning alerts
permissions:
  contents: read
  pull-requests: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security:
    name: OWASP Lite (Gitleaks + Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ----- A08: Secrets (Gitleaks) -----
      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true            # allow SARIF upload even if leaks found
        with:
          args: detect --no-git --redact --report-format sarif --report-path gitleaks.sarif

      - name: Upload Gitleaks SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      # ----- A01–A10: SAST (Semgrep OWASP Top 10) -----
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Semgrep
        run: |
          python -m pip install --upgrade pip
          pip install "semgrep>=1.73.0"

      - name: Run Semgrep (OWASP Top 10)
        id: semgrep
        continue-on-error: true
        run: |
          semgrep \
            --config p/owasp-top-ten \
            --exclude node_modules --exclude dist --exclude build --exclude .git \
            --error \
            --sarif --output semgrep.sarif

      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      # Fail the job if either scanner reported problems
      - name: Fail if scanners failed
        if: steps.gitleaks.outcome == 'failure' || steps.semgrep.outcome == 'failure'
        run: |
          echo "Security checks failed (Gitleaks or Semgrep). See Security > Code scanning alerts."
          exit 1

  test:
    name: Lint • Test • Build
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci --no-audit --progress=false
      - run: npm run ci
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          if-no-files-found: ignore
          retention-days: 3

  deploy:
    name: Deploy to Firebase Hosting
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci --no-audit --progress=false
      - run: npm run build
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}   # JSON string
          channelId: live
          projectId: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      - name: Print Hosting URL
        run: |
          echo "### Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Live: https://${{ secrets.VITE_FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_STEP_SUMMARY
